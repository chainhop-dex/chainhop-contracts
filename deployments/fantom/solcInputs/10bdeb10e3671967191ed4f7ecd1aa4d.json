{
  "language": "Solidity",
  "sources": {
    "contracts/bridges/AcrossAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../interfaces/IBridgeAdapter.sol\";\nimport \"../interfaces/ISpokePool.sol\";\n\nimport \"../lib/Ownable.sol\";\n\ncontract AcrossAdapter is IBridgeAdapter, Ownable {\n    using SafeERC20 for IERC20;\n\n    address public spokePool;\n\n    event SpokePoolUpdated(address spokePool);\n\n    constructor(address _spokePool) {\n        spokePool = _spokePool;\n    }\n\n    struct BridgeParams {\n        uint64 relayerFeePct;\n        uint32 quoteTimestamp;\n    }\n\n    function bridge(\n        uint64 _dstChainId,\n        address _receiver,\n        uint256 _amount,\n        address _token,\n        bytes memory _bridgeParams\n    ) external payable returns (bytes memory bridgeResp) {\n        BridgeParams memory params = abi.decode(_bridgeParams, (BridgeParams));\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        IERC20(_token).safeApprove(spokePool, _amount);\n        uint32 depositId = ISpokePool(spokePool).numberOfDeposits();\n        ISpokePool(spokePool).deposit(\n            _receiver,\n            _token,\n            _amount,\n            _dstChainId,\n            params.relayerFeePct,\n            params.quoteTimestamp\n        );\n        IERC20(_token).safeApprove(spokePool, 0);\n        return abi.encode(depositId);\n    }\n\n    function setSpokePool(address _spokePool) external onlyOwner {\n        spokePool = _spokePool;\n        emit SpokePoolUpdated(_spokePool);\n    }\n\n    // convenience function to make encoding bridge params easier using ABI generated go code\n    function encodeBridgeParams(BridgeParams memory _params) external {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IBridgeAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\ninterface IBridgeAdapter {\n    function bridge(\n        uint64 _dstChainId,\n        // the address that the fund is transfered to on the destination chain\n        address _receiver,\n        uint256 _amount,\n        address _token,\n        // Bridge transfers quoted and abi encoded by chainhop backend server.\n        // Bridge adapter implementations need to decode this themselves.\n        bytes memory _bridgeParams\n    ) external payable returns (bytes memory bridgeResp);\n}\n"
    },
    "contracts/interfaces/ISpokePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @notice Contains common data structures and functions used by all SpokePool implementations.\n */\ninterface ISpokePool {\n    // This leaf is meant to be decoded in the SpokePool to pay out successful relayers.\n    struct RelayerRefundLeaf {\n        // This is the amount to return to the HubPool. This occurs when there is a PoolRebalanceLeaf netSendAmount that\n        // is negative. This is just the negative of this value.\n        uint256 amountToReturn;\n        // Used to verify that this is being executed on the correct destination chainId.\n        uint256 chainId;\n        // This array designates how much each of those addresses should be refunded.\n        uint256[] refundAmounts;\n        // Used as the index in the bitmap to track whether this leaf has been executed or not.\n        uint32 leafId;\n        // The associated L2TokenAddress that these claims apply to.\n        address l2TokenAddress;\n        // Must be same length as refundAmounts and designates each address that must be refunded.\n        address[] refundAddresses;\n    }\n\n    // This struct represents the data to fully specify a relay. If any portion of this data differs, the relay is\n    // considered to be completely distinct. Only one relay for a particular depositId, chainId pair should be\n    // considered valid and repaid. This data is hashed and inserted into the slow relay merkle root so that an off\n    // chain validator can choose when to refund slow relayers.\n    struct RelayData {\n        // The address that made the deposit on the origin chain.\n        address depositor;\n        // The recipient address on the destination chain.\n        address recipient;\n        // The corresponding token address on the destination chain.\n        address destinationToken;\n        // The total relay amount before fees are taken out.\n        uint256 amount;\n        // Origin chain id.\n        uint256 originChainId;\n        // Destination chain id.\n        uint256 destinationChainId;\n        // The LP Fee percentage computed by the relayer based on the deposit's quote timestamp\n        // and the HubPool's utilization.\n        uint64 realizedLpFeePct;\n        // The relayer fee percentage specified in the deposit.\n        uint64 relayerFeePct;\n        // The id uniquely identifying this deposit on the origin chain.\n        uint32 depositId;\n    }\n\n    // Stores collection of merkle roots that can be published to this contract from the HubPool, which are referenced\n    // by \"data workers\" via inclusion proofs to execute leaves in the roots.\n    struct RootBundle {\n        // Merkle root of slow relays that were not fully filled and whose recipient is still owed funds from the LP pool.\n        bytes32 slowRelayRoot;\n        // Merkle root of relayer refunds for successful relays.\n        bytes32 relayerRefundRoot;\n        // This is a 2D bitmap tracking which leaves in the relayer refund root have been claimed, with max size of\n        // 256x(2^248) leaves per root.\n        mapping(uint256 => uint256) claimedBitmap;\n    }\n\n    event FundsDeposited(\n        uint256 amount,\n        uint256 originChainId,\n        uint256 destinationChainId,\n        uint64 relayerFeePct,\n        uint32 indexed depositId,\n        uint32 quoteTimestamp,\n        address indexed originToken,\n        address recipient,\n        address indexed depositor\n    );\n\n    event FilledRelay(\n        uint256 amount,\n        uint256 totalFilledAmount,\n        uint256 fillAmount,\n        uint256 repaymentChainId,\n        uint256 originChainId,\n        uint256 destinationChainId,\n        uint64 relayerFeePct,\n        uint64 appliedRelayerFeePct,\n        uint64 realizedLpFeePct,\n        uint32 depositId,\n        address destinationToken,\n        address indexed relayer,\n        address indexed depositor,\n        address recipient,\n        bool isSlowRelay\n    );\n\n    function setCrossDomainAdmin(address newCrossDomainAdmin) external;\n\n    function setHubPool(address newHubPool) external;\n\n    function setEnableRoute(\n        address originToken,\n        uint256 destinationChainId,\n        bool enable\n    ) external;\n\n    function setDepositQuoteTimeBuffer(uint32 buffer) external;\n\n    function relayRootBundle(bytes32 relayerRefundRoot, bytes32 slowRelayRoot) external;\n\n    function emergencyDeleteRootBundle(uint256 rootBundleId) external;\n\n    function numberOfDeposits() external view returns (uint32 numberOfDeposits);\n\n    function deposit(\n        address recipient,\n        address originToken,\n        uint256 amount,\n        uint256 destinationChainId,\n        uint64 relayerFeePct,\n        uint32 quoteTimestamp\n    ) external payable;\n\n    function speedUpDeposit(\n        address depositor,\n        uint64 newRelayerFeePct,\n        uint32 depositId,\n        bytes memory depositorSignature\n    ) external;\n\n    function fillRelay(\n        address depositor,\n        address recipient,\n        address destinationToken,\n        uint256 amount,\n        uint256 maxTokensToSend,\n        uint256 repaymentChainId,\n        uint256 originChainId,\n        uint64 realizedLpFeePct,\n        uint64 relayerFeePct,\n        uint32 depositId\n    ) external;\n\n    function fillRelayWithUpdatedFee(\n        address depositor,\n        address recipient,\n        address destinationToken,\n        uint256 amount,\n        uint256 maxTokensToSend,\n        uint256 repaymentChainId,\n        uint256 originChainId,\n        uint64 realizedLpFeePct,\n        uint64 relayerFeePct,\n        uint64 newRelayerFeePct,\n        uint32 depositId,\n        bytes memory depositorSignature\n    ) external;\n\n    function executeSlowRelayLeaf(\n        address depositor,\n        address recipient,\n        address destinationToken,\n        uint256 amount,\n        uint256 originChainId,\n        uint64 realizedLpFeePct,\n        uint64 relayerFeePct,\n        uint32 depositId,\n        uint32 rootBundleId,\n        bytes32[] memory proof\n    ) external;\n\n    function executeRelayerRefundLeaf(\n        uint32 rootBundleId,\n        ISpokePool.RelayerRefundLeaf memory relayerRefundLeaf,\n        bytes32[] memory proof\n    ) external;\n\n    function chainId() external view returns (uint256);\n}\n"
    },
    "contracts/lib/Ownable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n *\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\n * renounceOwnership. So we can support Proxy based upgradable contract\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\n     * we require _owner == address(0), which is only possible when it's a delegateCall\n     * because constructor sets _owner in contract state.\n     */\n    function initOwner() internal {\n        require(_owner == address(0), \"owner already set\");\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/FeeVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./lib/Ownable.sol\";\n\n/**\n * @title Allows the owner to set fee collector and allows fee collectors to collect fees\n * @author Padoriku\n */\ncontract FeeVault is Ownable {\n    using SafeERC20 for IERC20;\n\n    address public feeCollector;\n\n    event FeeCollectorUpdated(address from, address to);\n\n    constructor(address _feeCollector) {\n        feeCollector = _feeCollector;\n    }\n\n    modifier onlyFeeCollector() {\n        require(msg.sender == feeCollector, \"not fee collector\");\n        _;\n    }\n\n    function collectFee(address[] calldata _tokens, address _to) external onlyFeeCollector {\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            // use zero address to denote native token\n            if (_tokens[i] == address(0)) {\n                uint256 bal = address(this).balance;\n                (bool sent, ) = _to.call{value: bal, gas: 50000}(\"\");\n                require(sent, \"send native failed\");\n            } else {\n                uint256 balance = IERC20(_tokens[i]).balanceOf(address(this));\n                IERC20(_tokens[i]).safeTransfer(_to, balance);\n            }\n        }\n    }\n\n    function setFeeCollector(address _feeCollector) external onlyOwner {\n        _setFeeCollector(_feeCollector);\n    }\n\n    function _setFeeCollector(address _feeCollector) private {\n        address oldFeeCollector = feeCollector;\n        feeCollector = _feeCollector;\n        emit FeeCollectorUpdated(oldFeeCollector, _feeCollector);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/test-helpers/MockUniswapV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract MockUniswapV2 {\n    using SafeERC20 for IERC20;\n\n    uint256 fakeSlippage; // 100% = 100 * 1e4\n    uint256 constant HUNDRED_PERC = 100 * 1e4;\n\n    constructor(uint256 _fakeSlippage) {\n        fakeSlippage = _fakeSlippage;\n    }\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts) {\n        require(deadline != 0 && deadline > block.timestamp, \"deadline exceeded\");\n        require(path.length > 1, \"path must have more than 1 token in it\");\n\n        // fake simulate slippage\n        uint256 amountAfterSlippage = (amountIn * (HUNDRED_PERC - fakeSlippage)) / HUNDRED_PERC;\n        require(amountAfterSlippage >= amountOutMin, \"bad slippage\");\n        IERC20(path[0]).safeTransferFrom(msg.sender, address(this), amountIn);\n        IERC20(path[path.length - 1]).safeTransfer(to, amountAfterSlippage);\n        uint256[] memory ret = new uint256[](2);\n        ret[0] = amountIn;\n        ret[1] = amountAfterSlippage;\n        return ret;\n    }\n\n    function setFakeSlippage(uint256 _fakeSlippage) public {\n        fakeSlippage = _fakeSlippage;\n    }\n}\n"
    },
    "contracts/test-helpers/MockCurvePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/ICurvePool.sol\";\n\nimport \"hardhat/console.sol\";\n\ncontract MockCurvePool {\n    using SafeERC20 for IERC20;\n\n    address[] public coins;\n    uint8[] public decimals;\n\n    uint256 fakeSlippage; // 100% = 100 * 1e4\n    uint256 constant HUNDRED_PERC = 100 * 1e4;\n\n    constructor(\n        address[] memory _coins,\n        uint8[] memory _decimals,\n        uint256 _fakeSlippage\n    ) {\n        coins = _coins;\n        fakeSlippage = _fakeSlippage;\n        decimals = _decimals;\n    }\n\n    function exchange(\n        int128 _i,\n        int128 _j,\n        uint256 _dx,\n        uint256 _min_dy\n    ) external {\n        address coini = coins[uint256(int256(_i))];\n        address coinj = coins[uint256(int256(_j))];\n\n        uint8 decimali = decimals[uint256(int256(_i))];\n        uint8 decimalj = decimals[uint256(int256(_j))];\n\n        require(coini != address(0), \"coin i not found\");\n        require(coinj != address(0), \"coin j not found\");\n\n        IERC20(coini).safeTransferFrom(msg.sender, address(this), _dx);\n\n        uint256 amountOut = (((_dx * decimali) / decimalj) * (HUNDRED_PERC - fakeSlippage)) / HUNDRED_PERC;\n        require(amountOut >= _min_dy, \"slippage too large\");\n\n        IERC20(coinj).safeTransfer(msg.sender, amountOut);\n    }\n\n    function get_dy(\n        int128 _i,\n        int128 _j,\n        uint256 _dx\n    ) external view returns (uint256) {\n        address coini = coins[uint256(int256(_i))];\n        address coinj = coins[uint256(int256(_j))];\n        require(coini != address(0), \"coin i not found\");\n        require(coinj != address(0), \"coin j not found\");\n        return (_dx * (HUNDRED_PERC - fakeSlippage)) / HUNDRED_PERC;\n    }\n}\n"
    },
    "contracts/interfaces/ICurvePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\ninterface ICurvePool {\n    function coins(uint256 i) external view returns (address);\n\n    function underlying_coins(uint256 i) external view returns (address);\n\n    // plain & meta pool\n    function get_dy(\n        int128 i,\n        int128 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    // meta pool\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    // plain & meta pool\n    function exchange(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external;\n\n    // meta pool\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 min_dy,\n        address _receiver\n    ) external returns (uint256);\n\n    // special function signature that is only used by the sUSD pool on Ethereum 0xA5407eAE9Ba41422680e2e00537571bcC53efBfD\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external;\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/test-helpers/WETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport \"hardhat/console.sol\";\n\ncontract WETH is ERC20 {\n    constructor() ERC20(\"WETH\", \"WETH\") {\n        _mint(msg.sender, 1e26);\n    }\n\n    function deposit() external payable {\n        _mint(msg.sender, msg.value);\n    }\n\n    function withdraw(uint256 _amount) external {\n        _burn(msg.sender, _amount);\n        (bool sent, ) = msg.sender.call{value: _amount, gas: 50000}(\"\");\n        require(sent, \"failed to send\");\n    }\n\n    receive() external payable {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/test-helpers/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title A test ERC20 token.\n */\ncontract TestERC20 is ERC20 {\n    uint256 public constant INITIAL_SUPPLY = 1e28;\n\n    /**\n     * @dev Constructor that gives msg.sender all of the existing tokens.\n     */\n    constructor() ERC20(\"TestERC20\", \"TERC20\") {\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n}\n"
    },
    "contracts/test-helpers/IntermediaryOriginalToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title Intermediary token that automatically transfers the canonical token when interacting with approved bridges.\n */\ncontract IntermediaryOriginalToken is ERC20, Ownable {\n    using SafeERC20 for IERC20;\n\n    mapping(address => bool) public bridges;\n    address public immutable canonical; // canonical token\n\n    event BridgeUpdated(address bridge, bool enable);\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        address[] memory bridges_,\n        address canonical_\n    ) ERC20(name_, symbol_) {\n        for (uint256 i = 0; i < bridges_.length; i++) {\n            bridges[bridges_[i]] = true;\n        }\n        canonical = canonical_;\n    }\n\n    function transfer(address _to, uint256 _amount) public virtual override returns (bool) {\n        bool success = super.transfer(_to, _amount);\n        if (bridges[msg.sender]) {\n            _burn(_to, _amount);\n            IERC20(canonical).safeTransfer(_to, _amount);\n        }\n        return success;\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) public virtual override returns (bool) {\n        if (bridges[msg.sender]) {\n            _mint(_from, _amount);\n            IERC20(canonical).safeTransferFrom(_from, address(this), _amount);\n        }\n        return super.transferFrom(_from, _to, _amount);\n    }\n\n    function updateBridge(address _bridge, bool _enable) external onlyOwner {\n        bridges[_bridge] = _enable;\n        emit BridgeUpdated(_bridge, _enable);\n    }\n\n    // to make compatible with BEP20\n    function getOwner() external view returns (address) {\n        return owner();\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return ERC20(canonical).decimals();\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/test-helpers/Signers.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/ISigsVerifier.sol\";\n\ncontract Signers is Ownable, ISigsVerifier {\n    using ECDSA for bytes32;\n\n    bytes32 public ssHash;\n    uint256 public triggerTime; // timestamp when last update was triggered\n\n    // reset can be called by the owner address for emergency recovery\n    uint256 public resetTime;\n    uint256 public noticePeriod; // advance notice period as seconds for reset\n    uint256 constant MAX_INT = 2**256 - 1;\n\n    event SignersUpdated(address[] _signers, uint256[] _powers);\n\n    event ResetNotification(uint256 resetTime);\n\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers\n     * The sigs must be sorted by signer addresses in ascending order.\n     * @param _msg signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) public view override {\n        bytes32 h = keccak256(abi.encodePacked(_signers, _powers));\n        require(ssHash == h, \"Mismatch current signers\");\n        _verifySignedPowers(keccak256(_msg).toEthSignedMessageHash(), _sigs, _signers, _powers);\n    }\n\n    /**\n     * @notice Update new signers.\n     * @param _newSigners sorted list of new signers\n     * @param _curPowers powers of new signers\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _curSigners sorted list of current signers\n     * @param _curPowers powers of current signers\n     */\n    function updateSigners(\n        uint256 _triggerTime,\n        address[] calldata _newSigners,\n        uint256[] calldata _newPowers,\n        bytes[] calldata _sigs,\n        address[] calldata _curSigners,\n        uint256[] calldata _curPowers\n    ) external {\n        // use trigger time for nonce protection, must be ascending\n        require(_triggerTime > triggerTime, \"Trigger time is not increasing\");\n        // make sure triggerTime is not too large, as it cannot be decreased once set\n        require(_triggerTime < block.timestamp + 3600, \"Trigger time is too large\");\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"UpdateSigners\"));\n        verifySigs(abi.encodePacked(domain, _triggerTime, _newSigners, _newPowers), _sigs, _curSigners, _curPowers);\n        _updateSigners(_newSigners, _newPowers);\n        triggerTime = _triggerTime;\n    }\n\n    /**\n     * @notice reset signers, only used for init setup and emergency recovery\n     */\n    function resetSigners(address[] calldata _signers, uint256[] calldata _powers) external onlyOwner {\n        require(block.timestamp > resetTime, \"not reach reset time\");\n        resetTime = MAX_INT;\n        _updateSigners(_signers, _powers);\n    }\n\n    function notifyResetSigners() external onlyOwner {\n        resetTime = block.timestamp + noticePeriod;\n        emit ResetNotification(resetTime);\n    }\n\n    function increaseNoticePeriod(uint256 period) external onlyOwner {\n        require(period > noticePeriod, \"notice period can only be increased\");\n        noticePeriod = period;\n    }\n\n    // separate from verifySigs func to avoid \"stack too deep\" issue\n    function _verifySignedPowers(\n        bytes32 _hash,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) private pure {\n        require(_signers.length == _powers.length, \"signers and powers length not match\");\n        uint256 totalPower; // sum of all signer.power\n        for (uint256 i = 0; i < _signers.length; i++) {\n            totalPower += _powers[i];\n        }\n        uint256 quorum = (totalPower * 2) / 3 + 1;\n\n        uint256 signedPower; // sum of signer powers who are in sigs\n        address prev = address(0);\n        uint256 index = 0;\n        for (uint256 i = 0; i < _sigs.length; i++) {\n            address signer = _hash.recover(_sigs[i]);\n            require(signer > prev, \"signers not in ascending order\");\n            prev = signer;\n            // now find match signer add its power\n            while (signer > _signers[index]) {\n                index += 1;\n                require(index < _signers.length, \"signer not found\");\n            }\n            if (signer == _signers[index]) {\n                signedPower += _powers[index];\n            }\n            if (signedPower >= quorum) {\n                // return early to save gas\n                return;\n            }\n        }\n        revert(\"quorum not reached\");\n    }\n\n    function _updateSigners(address[] calldata _signers, uint256[] calldata _powers) private {\n        require(_signers.length == _powers.length, \"signers and powers length not match\");\n        address prev = address(0);\n        for (uint256 i = 0; i < _signers.length; i++) {\n            require(_signers[i] > prev, \"New signers not in ascending order\");\n            prev = _signers[i];\n        }\n        ssHash = keccak256(abi.encodePacked(_signers, _powers));\n        emit SignersUpdated(_signers, _powers);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/test-helpers/interfaces/ISigsVerifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.15;\n\ninterface ISigsVerifier {\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers.\n     * @param _msg signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external view;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/test-helpers/MessageBusSender.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.15;\n\nimport \"./Ownable.sol\";\nimport \"./interfaces/ISigsVerifier.sol\";\nimport \"hardhat/console.sol\";\n\ncontract MessageBusSender is Ownable {\n    ISigsVerifier public immutable sigsVerifier;\n\n    uint256 public feeBase;\n    uint256 public feePerByte;\n    mapping(address => uint256) public withdrawnFees;\n\n    event Message(address indexed sender, address receiver, uint256 dstChainId, bytes message, uint256 fee);\n\n    event MessageWithTransfer(\n        address indexed sender,\n        address receiver,\n        uint256 dstChainId,\n        address bridge,\n        bytes32 srcTransferId,\n        bytes message,\n        uint256 fee\n    );\n\n    event FeeBaseUpdated(uint256 feeBase);\n    event FeePerByteUpdated(uint256 feePerByte);\n\n    constructor(ISigsVerifier _sigsVerifier) {\n        sigsVerifier = _sigsVerifier;\n    }\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\n     * A fee is charged in the native gas token.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     */\n    function sendMessage(\n        address _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message\n    ) external payable {\n        uint256 minFee = calcFee(_message);\n        if (msg.value < minFee) {\n            console.log(\"MessageBus: required msg fee\", minFee);\n        }\n        require(msg.value >= minFee, \"Insufficient fee\");\n        emit Message(msg.sender, _receiver, _dstChainId, _message, msg.value);\n    }\n\n    /**\n     * @notice Sends a message associated with a transfer to an app on another chain via MessageBus without an associated transfer.\n     * A fee is charged in the native token.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _srcBridge The bridge contract to send the transfer with.\n     * @param _srcTransferId The transfer ID.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     */\n    function sendMessageWithTransfer(\n        address _receiver,\n        uint256 _dstChainId,\n        address _srcBridge,\n        bytes32 _srcTransferId,\n        bytes calldata _message\n    ) external payable {\n        uint256 minFee = calcFee(_message);\n        require(msg.value >= minFee, \"Insufficient fee\");\n        // SGN needs to verify\n        // 1. msg.sender matches sender of the src transfer\n        // 2. dstChainId matches dstChainId of the src transfer\n        // 3. bridge is either liquidity bridge, peg src vault, or peg dst bridge\n        emit MessageWithTransfer(msg.sender, _receiver, _dstChainId, _srcBridge, _srcTransferId, _message, msg.value);\n    }\n\n    /**\n     * @notice Withdraws message fee in the form of native gas token.\n     * @param _account The address receiving the fee.\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function withdrawFee(\n        address _account,\n        uint256 _cumulativeFee,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external {\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"withdrawFee\"));\n        sigsVerifier.verifySigs(abi.encodePacked(domain, _account, _cumulativeFee), _sigs, _signers, _powers);\n        uint256 amount = _cumulativeFee - withdrawnFees[_account];\n        require(amount > 0, \"No new amount to withdraw\");\n        withdrawnFees[_account] = _cumulativeFee;\n        (bool sent, ) = _account.call{value: amount, gas: 50000}(\"\");\n        require(sent, \"failed to withdraw fee\");\n    }\n\n    /**\n     * @notice Calculates the required fee for the message.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     @ @return The required fee.\n     */\n    function calcFee(bytes calldata _message) public view returns (uint256) {\n        return feeBase + _message.length * feePerByte;\n    }\n\n    // -------------------- Admin --------------------\n\n    function setFeePerByte(uint256 _fee) external onlyOwner {\n        feePerByte = _fee;\n        emit FeePerByteUpdated(feePerByte);\n    }\n\n    function setFeeBase(uint256 _fee) external onlyOwner {\n        feeBase = _fee;\n        emit FeeBaseUpdated(feeBase);\n    }\n}\n"
    },
    "contracts/test-helpers/Ownable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n *\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\n * renounceOwnership. So we can support Proxy based upgradable contract\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\n     * we require _owner == address(0), which is only possible when it's a delegateCall\n     * because constructor sets _owner in contract state.\n     */\n    function initOwner() internal {\n        require(_owner == address(0), \"owner already set\");\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/test-helpers/MessageBusReceiver.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.15;\n\nimport \"./interfaces/IBridge.sol\";\nimport \"./interfaces/IOriginalTokenVault.sol\";\nimport \"./interfaces/IOriginalTokenVaultV2.sol\";\nimport \"./interfaces/IPeggedTokenBridge.sol\";\nimport \"./interfaces/IPeggedTokenBridgeV2.sol\";\nimport \"./interfaces/IMessageReceiverApp.sol\";\nimport \"./Ownable.sol\";\n\ncontract MessageBusReceiver is Ownable {\n    enum TransferType {\n        Null,\n        LqSend, // send through liquidity bridge\n        LqWithdraw, // withdraw from liquidity bridge\n        PegMint, // mint through pegged token bridge\n        PegWithdraw, // withdraw from original token vault\n        PegMintV2, // mint through pegged token bridge v2\n        PegWithdrawV2 // withdraw from original token vault v2\n    }\n\n    struct TransferInfo {\n        TransferType t;\n        address sender;\n        address receiver;\n        address token;\n        uint256 amount;\n        uint64 seqnum; // only needed for LqWithdraw\n        uint64 srcChainId;\n        bytes32 refId;\n    }\n\n    struct RouteInfo {\n        address sender;\n        address receiver;\n        uint64 srcChainId;\n    }\n\n    enum TxStatus {\n        Null,\n        Success,\n        Fail,\n        Fallback,\n        Pending\n    }\n    mapping(bytes32 => TxStatus) public executedMessages;\n\n    address public liquidityBridge; // liquidity bridge address\n    address public pegBridge; // peg bridge address\n    address public pegVault; // peg original vault address\n    address public pegBridgeV2; // peg bridge address\n    address public pegVaultV2; // peg original vault address\n\n    enum MsgType {\n        MessageWithTransfer,\n        MessageOnly\n    }\n    event Executed(MsgType msgType, bytes32 id, TxStatus status);\n    event LiquidityBridgeUpdated(address liquidityBridge);\n    event PegBridgeUpdated(address pegBridge);\n    event PegVaultUpdated(address pegVault);\n    event PegBridgeV2Updated(address pegBridgeV2);\n    event PegVaultV2Updated(address pegVaultV2);\n\n    constructor(\n        address _liquidityBridge,\n        address _pegBridge,\n        address _pegVault,\n        address _pegBridgeV2,\n        address _pegVaultV2\n    ) {\n        liquidityBridge = _liquidityBridge;\n        pegBridge = _pegBridge;\n        pegVault = _pegVault;\n        pegBridgeV2 = _pegBridgeV2;\n        pegVaultV2 = _pegVaultV2;\n    }\n\n    function initReceiver(\n        address _liquidityBridge,\n        address _pegBridge,\n        address _pegVault,\n        address _pegBridgeV2,\n        address _pegVaultV2\n    ) internal {\n        require(liquidityBridge == address(0), \"liquidityBridge already set\");\n        liquidityBridge = _liquidityBridge;\n        pegBridge = _pegBridge;\n        pegVault = _pegVault;\n        pegBridgeV2 = _pegBridgeV2;\n        pegVaultV2 = _pegVaultV2;\n    }\n\n    // ============== functions called by executor ==============\n\n    /**\n     * @notice Execute a message with a successful transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _transfer The transfer info.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessageWithTransfer(\n        bytes calldata _message,\n        TransferInfo calldata _transfer,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable {\n        // For message with token transfer, message Id is computed through transfer info\n        // in order to guarantee that each transfer can only be used once.\n        // This also indicates that different transfers can carry the exact same messages.\n        bytes32 messageId = verifyTransfer(_transfer);\n        require(executedMessages[messageId] == TxStatus.Null, \"transfer already executed\");\n        executedMessages[messageId] = TxStatus.Pending;\n\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"MessageWithTransfer\"));\n        IBridge(liquidityBridge).verifySigs(abi.encodePacked(domain, messageId, _message), _sigs, _signers, _powers);\n        TxStatus status;\n        bool success = executeMessageWithTransfer(_transfer, _message);\n        if (success) {\n            status = TxStatus.Success;\n        } else {\n            success = executeMessageWithTransferFallback(_transfer, _message);\n            if (success) {\n                status = TxStatus.Fallback;\n            } else {\n                status = TxStatus.Fail;\n            }\n        }\n        executedMessages[messageId] = status;\n        emit Executed(MsgType.MessageWithTransfer, messageId, status);\n    }\n\n    /**\n     * @notice Execute a message with a refunded transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _transfer The transfer info.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessageWithTransferRefund(\n        bytes calldata _message, // the same message associated with the original transfer\n        TransferInfo calldata _transfer,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable {\n        // similar to executeMessageWithTransfer\n        bytes32 messageId = verifyTransfer(_transfer);\n        require(executedMessages[messageId] == TxStatus.Null, \"transfer already executed\");\n        executedMessages[messageId] = TxStatus.Pending;\n\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"MessageWithTransferRefund\"));\n        IBridge(liquidityBridge).verifySigs(abi.encodePacked(domain, messageId, _message), _sigs, _signers, _powers);\n        TxStatus status;\n        bool success = executeMessageWithTransferRefund(_transfer, _message);\n        if (success) {\n            status = TxStatus.Success;\n        } else {\n            status = TxStatus.Fail;\n        }\n        executedMessages[messageId] = status;\n        emit Executed(MsgType.MessageWithTransfer, messageId, status);\n    }\n\n    /**\n     * @notice Execute a message not associated with a transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessage(\n        bytes calldata _message,\n        RouteInfo calldata _route,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable {\n        // For message without associated token transfer, message Id is computed through message info,\n        // in order to guarantee that each message can only be applied once\n        bytes32 messageId = computeMessageOnlyId(_route, _message);\n        require(executedMessages[messageId] == TxStatus.Null, \"message already executed\");\n        executedMessages[messageId] = TxStatus.Pending;\n\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"Message\"));\n        IBridge(liquidityBridge).verifySigs(abi.encodePacked(domain, messageId), _sigs, _signers, _powers);\n        TxStatus status;\n        bool success = executeMessage(_route, _message);\n        if (success) {\n            status = TxStatus.Success;\n        } else {\n            status = TxStatus.Fail;\n        }\n        executedMessages[messageId] = status;\n        emit Executed(MsgType.MessageOnly, messageId, status);\n    }\n\n    // ================= utils (to avoid stack too deep) =================\n\n    function executeMessageWithTransfer(TransferInfo calldata _transfer, bytes calldata _message)\n        private\n        returns (bool)\n    {\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\n            abi.encodeWithSelector(\n                IMessageReceiverApp.executeMessageWithTransfer.selector,\n                _transfer.sender,\n                _transfer.token,\n                _transfer.amount,\n                _transfer.srcChainId,\n                _message\n            )\n        );\n        if (ok) {\n            bool success = abi.decode((res), (bool));\n            return success;\n        }\n        return false;\n    }\n\n    function executeMessageWithTransferFallback(TransferInfo calldata _transfer, bytes calldata _message)\n        private\n        returns (bool)\n    {\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\n            abi.encodeWithSelector(\n                IMessageReceiverApp.executeMessageWithTransferFallback.selector,\n                _transfer.sender,\n                _transfer.token,\n                _transfer.amount,\n                _transfer.srcChainId,\n                _message\n            )\n        );\n        if (ok) {\n            bool success = abi.decode((res), (bool));\n            return success;\n        }\n        return false;\n    }\n\n    function executeMessageWithTransferRefund(TransferInfo calldata _transfer, bytes calldata _message)\n        private\n        returns (bool)\n    {\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\n            abi.encodeWithSelector(\n                IMessageReceiverApp.executeMessageWithTransferRefund.selector,\n                _transfer.token,\n                _transfer.amount,\n                _message\n            )\n        );\n        if (ok) {\n            bool success = abi.decode((res), (bool));\n            return success;\n        }\n        return false;\n    }\n\n    function verifyTransfer(TransferInfo calldata _transfer) private view returns (bytes32) {\n        bytes32 transferId;\n        address bridgeAddr;\n        if (_transfer.t == TransferType.LqSend) {\n            transferId = keccak256(\n                abi.encodePacked(\n                    _transfer.sender,\n                    _transfer.receiver,\n                    _transfer.token,\n                    _transfer.amount,\n                    _transfer.srcChainId,\n                    uint64(block.chainid),\n                    _transfer.refId\n                )\n            );\n            bridgeAddr = liquidityBridge;\n            require(IBridge(bridgeAddr).transfers(transferId) == true, \"bridge relay not exist\");\n        } else if (_transfer.t == TransferType.LqWithdraw) {\n            transferId = keccak256(\n                abi.encodePacked(\n                    uint64(block.chainid),\n                    _transfer.seqnum,\n                    _transfer.receiver,\n                    _transfer.token,\n                    _transfer.amount\n                )\n            );\n            bridgeAddr = liquidityBridge;\n            require(IBridge(bridgeAddr).withdraws(transferId) == true, \"bridge withdraw not exist\");\n        } else if (_transfer.t == TransferType.PegMint || _transfer.t == TransferType.PegWithdraw) {\n            transferId = keccak256(\n                abi.encodePacked(\n                    _transfer.receiver,\n                    _transfer.token,\n                    _transfer.amount,\n                    _transfer.sender,\n                    _transfer.srcChainId,\n                    _transfer.refId\n                )\n            );\n            if (_transfer.t == TransferType.PegMint) {\n                bridgeAddr = pegBridge;\n                require(IPeggedTokenBridge(bridgeAddr).records(transferId) == true, \"mint record not exist\");\n            } else {\n                // _transfer.t == TransferType.PegWithdraw\n                bridgeAddr = pegVault;\n                require(IOriginalTokenVault(bridgeAddr).records(transferId) == true, \"withdraw record not exist\");\n            }\n        } else if (_transfer.t == TransferType.PegMintV2 || _transfer.t == TransferType.PegWithdrawV2) {\n            if (_transfer.t == TransferType.PegMintV2) {\n                bridgeAddr = pegBridgeV2;\n            } else {\n                // TransferType.PegWithdrawV2\n                bridgeAddr = pegVaultV2;\n            }\n            transferId = keccak256(\n                abi.encodePacked(\n                    _transfer.receiver,\n                    _transfer.token,\n                    _transfer.amount,\n                    _transfer.sender,\n                    _transfer.srcChainId,\n                    _transfer.refId,\n                    bridgeAddr\n                )\n            );\n            if (_transfer.t == TransferType.PegMintV2) {\n                require(IPeggedTokenBridgeV2(bridgeAddr).records(transferId) == true, \"mint record not exist\");\n            } else {\n                // TransferType.PegWithdrawV2\n                require(IOriginalTokenVaultV2(bridgeAddr).records(transferId) == true, \"withdraw record not exist\");\n            }\n        }\n        return keccak256(abi.encodePacked(MsgType.MessageWithTransfer, bridgeAddr, transferId));\n    }\n\n    function computeMessageOnlyId(RouteInfo calldata _route, bytes calldata _message) private pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(MsgType.MessageOnly, _route.sender, _route.receiver, _route.srcChainId, _message)\n            );\n    }\n\n    function executeMessage(RouteInfo calldata _route, bytes calldata _message) private returns (bool) {\n        (bool ok, bytes memory res) = address(_route.receiver).call{value: msg.value}(\n            abi.encodeWithSelector(\n                IMessageReceiverApp.executeMessage.selector,\n                _route.sender,\n                _route.srcChainId,\n                _message\n            )\n        );\n        if (ok) {\n            bool success = abi.decode((res), (bool));\n            return success;\n        }\n        return false;\n    }\n\n    // ================= contract addr config =================\n\n    function setLiquidityBridge(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        liquidityBridge = _addr;\n        emit LiquidityBridgeUpdated(liquidityBridge);\n    }\n\n    function setPegBridge(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        pegBridge = _addr;\n        emit PegBridgeUpdated(pegBridge);\n    }\n\n    function setPegVault(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        pegVault = _addr;\n        emit PegVaultUpdated(pegVault);\n    }\n\n    function setPegBridgeV2(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        pegBridgeV2 = _addr;\n        emit PegBridgeV2Updated(pegBridgeV2);\n    }\n\n    function setPegVaultV2(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        pegVaultV2 = _addr;\n        emit PegVaultV2Updated(pegVaultV2);\n    }\n}\n"
    },
    "contracts/test-helpers/interfaces/IBridge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IBridge {\n    function send(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage\n    ) external;\n\n    function relay(\n        bytes calldata _relayRequest,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    function transfers(bytes32 transferId) external view returns (bool);\n\n    function withdraws(bytes32 withdrawId) external view returns (bool);\n\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers.\n     * @param _msg signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external view;\n}\n"
    },
    "contracts/test-helpers/interfaces/IOriginalTokenVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IOriginalTokenVault {\n    /**\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\n     * @param _token local token address\n     * @param _amount locked token amount\n     * @param _mintChainId destination chainId to mint tokens\n     * @param _mintAccount destination account to receive minted tokens\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function deposit(\n        address _token,\n        uint256 _amount,\n        uint64 _mintChainId,\n        address _mintAccount,\n        uint64 _nonce\n    ) external;\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"
    },
    "contracts/test-helpers/interfaces/IOriginalTokenVaultV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IOriginalTokenVaultV2 {\n    /**\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\n     * @param _token local token address\n     * @param _amount locked token amount\n     * @param _mintChainId destination chainId to mint tokens\n     * @param _mintAccount destination account to receive minted tokens\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function deposit(\n        address _token,\n        uint256 _amount,\n        uint64 _mintChainId,\n        address _mintAccount,\n        uint64 _nonce\n    ) external returns (bytes32);\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"
    },
    "contracts/test-helpers/interfaces/IPeggedTokenBridge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IPeggedTokenBridge {\n    /**\n     * @notice Burn tokens to trigger withdrawal at a remote chain's OriginalTokenVault\n     * @param _token local token address\n     * @param _amount locked token amount\n     * @param _withdrawAccount account who withdraw original tokens on the remote chain\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function burn(\n        address _token,\n        uint256 _amount,\n        address _withdrawAccount,\n        uint64 _nonce\n    ) external;\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"
    },
    "contracts/test-helpers/interfaces/IPeggedTokenBridgeV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IPeggedTokenBridgeV2 {\n    /**\n     * @notice Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's\n     * OriginalTokenVault, or mint at another remote chain\n     * @param _token The pegged token address.\n     * @param _amount The amount to burn.\n     * @param _toChainId If zero, withdraw from original vault; otherwise, the remote chain to mint tokens.\n     * @param _toAccount The account to receive tokens on the remote chain\n     * @param _nonce A number to guarantee unique depositId. Can be timestamp in practice.\n     */\n    function burn(\n        address _token,\n        uint256 _amount,\n        uint64 _toChainId,\n        address _toAccount,\n        uint64 _nonce\n    ) external returns (bytes32);\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"
    },
    "contracts/test-helpers/interfaces/IMessageReceiverApp.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IMessageReceiverApp {\n    /**\n     * @notice Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s\n     *         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\n     * @param _sender The address of the source app contract\n     * @param _token The address of the token that comes out of the bridge\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\n     *        function is called.\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     */\n    function executeMessageWithTransfer(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes calldata _message\n    ) external payable returns (bool);\n\n    /**\n     * @notice Only called by MessageBus (MessageBusReceiver) if\n     *         1. executeMessageWithTransfer reverts, or\n     *         2. executeMessageWithTransfer returns false\n     * @param _sender The address of the source app contract\n     * @param _token The address of the token that comes out of the bridge\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\n     *        function is called.\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     */\n    function executeMessageWithTransferFallback(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes calldata _message\n    ) external payable returns (bool);\n\n    /**\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\n     * @param _token The token address of the original transfer\n     * @param _amount The amount of the original transfer\n     * @param _message The same message associated with the original transfer\n     */\n    function executeMessageWithTransferRefund(\n        address _token,\n        uint256 _amount,\n        bytes calldata _message\n    ) external payable returns (bool);\n\n    /**\n     * @notice Called by MessageBus (MessageBusReceiver)\n     * @param _sender The address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     */\n    function executeMessage(\n        address _sender,\n        uint64 _srcChainId,\n        bytes calldata _message\n    ) external payable returns (bool);\n}\n"
    },
    "contracts/test-helpers/MessageBus.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.15;\n\nimport \"./MessageBusSender.sol\";\nimport \"./MessageBusReceiver.sol\";\n\ncontract MessageBus is MessageBusSender, MessageBusReceiver {\n    constructor(\n        ISigsVerifier _sigsVerifier,\n        address _liquidityBridge,\n        address _pegBridge,\n        address _pegVault,\n        address _pegBridgeV2,\n        address _pegVaultV2\n    )\n        MessageBusSender(_sigsVerifier)\n        MessageBusReceiver(_liquidityBridge, _pegBridge, _pegVault, _pegBridgeV2, _pegVaultV2)\n    {}\n\n    // this is only to be called by Proxy via delegateCall as initOwner will require _owner is 0.\n    // so calling init on this contract directly will guarantee to fail\n    function init(\n        address _liquidityBridge,\n        address _pegBridge,\n        address _pegVault,\n        address _pegBridgeV2,\n        address _pegVaultV2\n    ) external {\n        // MUST manually call ownable init and must only call once\n        initOwner();\n        // we don't need sender init as _sigsVerifier is immutable so already in the deployed code\n        initReceiver(_liquidityBridge, _pegBridge, _pegVault, _pegBridgeV2, _pegVaultV2);\n    }\n}\n"
    },
    "contracts/SigVerifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nimport \"./lib/Ownable.sol\";\n\n/**\n * @title Allows owner to set signer, and verifies signatures\n * @author Padoriku\n */\ncontract SigVerifier is Ownable, Initializable {\n    using ECDSA for bytes32;\n\n    address public signer;\n\n    event SignerUpdated(address from, address to);\n\n    function initSigVerifier(address _signer) internal onlyInitializing {\n        _setSigner(_signer);\n    }\n\n    function setSigner(address _signer) public onlyOwner {\n        _setSigner(_signer);\n    }\n\n    function _setSigner(address _signer) private {\n        address oldSigner = signer;\n        signer = _signer;\n        emit SignerUpdated(oldSigner, _signer);\n    }\n\n    function verifySig(bytes32 _hash, bytes memory _feeSig) internal view {\n        address _signer = _hash.recover(_feeSig);\n        require(_signer == signer, \"invalid signer\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "contracts/registries/FeeVaultRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nimport \"../lib/Ownable.sol\";\n\n/**\n * @title Allows the owner to set fee account\n * @author Padoriku\n */\nabstract contract FeeVaultRegistry is Ownable, Initializable {\n    address public feeVault;\n\n    event FeeVaultUpdated(address from, address to);\n\n    function initFeeVaultRegistry(address _vault) internal onlyInitializing {\n        _setFeeVault(_vault);\n    }\n\n    function setFeeVault(address _vault) external onlyOwner {\n        _setFeeVault(_vault);\n    }\n\n    function _setFeeVault(address _vault) private {\n        address oldFeeCollector = feeVault;\n        feeVault = _vault;\n        emit FeeVaultUpdated(oldFeeCollector, _vault);\n    }\n}\n"
    },
    "contracts/ExecutionNode.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nimport \"./lib/Types.sol\";\nimport \"./lib/MessageReceiver.sol\";\nimport \"./lib/Pauser.sol\";\nimport \"./lib/NativeWrap.sol\";\nimport \"./lib/Bytes.sol\";\n\nimport \"./interfaces/IBridgeAdapter.sol\";\nimport \"./interfaces/ICodec.sol\";\nimport \"./interfaces/IExecutionNodeEvents.sol\";\nimport \"./interfaces/IWETH.sol\";\nimport \"./interfaces/IMessageBus.sol\";\n\nimport \"./registries/BridgeRegistry.sol\";\nimport \"./registries/DexRegistry.sol\";\nimport \"./registries/RemoteExecutionNodeRegistry.sol\";\nimport \"./registries/FeeVaultRegistry.sol\";\nimport \"./SigVerifier.sol\";\nimport \"./Pocket.sol\";\n\n/**\n * @author Chainhop Dex Team\n * @author Padoriku\n * @title a route execution contract\n * @notice\n * a few key concepts about how the chain of execution works:\n * - a \"swap-bridge execution combo\" (Types.ExecutionInfo) is a node in the execution chain\n * - a node be swap-only, bridge-only, or swap-bridge\n * - a message is an edge in the execution chain, it carries the remaining swap-bridge combos to the next node\n * - execute() executes a swap-bridge combo and determines if the current node is the final one by looking at Types.DestinationInfo\n * - executeMessage() is called on the intermediate nodes by chainhop's executor. it simply calls execute() to advance the execution chain\n * - a \"pocket\" is a counterfactual contract of which the address is determined at quote-time by chainhop's pathfinder server with using\n * the id as salt. the actual pocket contract deployment is done at execution time by the the ExecutionNode on that chain\n */\ncontract ExecutionNode is\n    IExecutionNodeEvents,\n    MessageReceiver,\n    DexRegistry,\n    BridgeRegistry,\n    SigVerifier,\n    FeeVaultRegistry,\n    NativeWrap,\n    ReentrancyGuard,\n    Pauser,\n    RemoteExecutionNodeRegistry\n{\n    using SafeERC20 for IERC20;\n    using ECDSA for bytes32;\n    using Bytes for bytes;\n\n    constructor(\n        bool _testMode,\n        address _messageBus,\n        address _nativeWrap\n    ) MessageReceiver(_testMode, _messageBus) NativeWrap(_nativeWrap) {\n        _disableInitializers();\n    }\n\n    // init() can only be called once during the first deployment of the proxy contract.\n    // any subsequent changes to the proxy contract's state must be done through their respective set methods via owner key.\n    function init(\n        bool _testMode,\n        address _messageBus,\n        address _nativeWrap,\n        address _signer,\n        address _feeVault,\n        address[] memory _dexList,\n        string[] memory _funcs,\n        address[] memory _codecs,\n        string[] memory _bridgeProviders,\n        address[] memory _bridgeAdapters\n    ) external initializer {\n        initOwner();\n        initMessageReceiver(_testMode, _messageBus);\n        initDexRegistry(_dexList, _funcs, _codecs);\n        initBridgeRegistry(_bridgeProviders, _bridgeAdapters);\n        initFeeVaultRegistry(_feeVault);\n        initSigVerifier(_signer);\n        initNativeWrap(_nativeWrap);\n    }\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Core\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n    /**\n     * @notice executes a swap-bridge combo and relays the next swap-bridge combo to the next chain (if any)\n     * @param _execs contains info that tells this contract how to collect a part of the bridge token\n     * received as fee and how to swap can be omitted on the source chain if there is no swaps to execute\n     * @param _src info that is processed on the source chain. only required on the source chain and should not be populated on subsequent hops\n     * @param _dst the receiving info of the entire operation\n     */\n    function srcExecute(\n        Types.ExecutionInfo[] memory _execs,\n        Types.SourceInfo memory _src,\n        Types.DestinationInfo memory _dst\n    ) external payable whenNotPaused nonReentrant {\n        require(_execs.length > 0, \"nop\");\n        bytes32 id = _computeId(msg.sender, _dst.receiver, _src.nonce);\n        Types.ExecutionInfo memory exec = _execs[0];\n        if (_execs.length > 1) {\n            _verify(_execs, _src);\n        }\n        (uint256 amountIn, address tokenIn) = _pullFundFromSender(_src);\n        require(amountIn > 0, \"amount must > 0\");\n        // process swap if any\n        uint256 nextAmount = amountIn;\n        address nextToken = tokenIn;\n        if (exec.swap.dex != address(0)) {\n            bool success = true;\n            (success, nextAmount, nextToken) = _executeSwap(exec.swap, amountIn, tokenIn);\n            require(success, \"swap fail\");\n        }\n        _processNextStep(id, _execs, _dst, nextToken, nextAmount);\n    }\n\n    /**\n     * @notice called by cBridge MessageBus. processes the execution info and carry on the executions\n     * @param _message the message that contains the remaining swap-bridge combos to be executed\n     * @return executionStatus always success if no reverts to let the MessageBus know that the message is processed\n     */\n    function executeMessage(\n        address _sender,\n        uint64 _srcChainId,\n        bytes memory _message,\n        address // _executor\n    )\n        external\n        payable\n        override\n        onlyMessageBus\n        onlyRemoteExecutionNode(_srcChainId, _sender)\n        whenNotPaused\n        nonReentrant\n        returns (ExecutionStatus)\n    {\n        Types.Message memory m = abi.decode((_message), (Types.Message));\n        require(m.execs.length > 0, \"nop\");\n        uint256 remainingValue = msg.value;\n        Types.ExecutionInfo memory exec = m.execs[0];\n        (uint256 amountIn, address tokenIn) = _pullFundFromPocket(m.id, exec);\n        // if amountIn is 0 after deducting fee, this contract keeps all amountIn as fee and\n        // ends the execution\n        if (amountIn == 0) {\n            emit StepExecuted(m.id, 0, tokenIn);\n            return _refundValueAndDone(remainingValue);\n        }\n        // refund immediately if receives bridge out fallback token\n        if (tokenIn == exec.bridgeOutFallbackToken) {\n            _sendToken(tokenIn, amountIn, m.dst.receiver, false);\n            emit StepExecuted(m.id, amountIn, tokenIn);\n            return _refundValueAndDone(remainingValue);\n        }\n        // process swap if any\n        uint256 nextAmount = amountIn;\n        address nextToken = tokenIn;\n        if (exec.swap.dex != address(0)) {\n            bool success = true;\n            (success, nextAmount, nextToken) = _executeSwap(exec.swap, amountIn, tokenIn);\n            // refund immediately if swap fails\n            if (!success) {\n                _sendToken(tokenIn, amountIn, m.dst.receiver, false);\n                emit StepExecuted(m.id, amountIn, tokenIn);\n                return _refundValueAndDone(remainingValue);\n            }\n        }\n        uint256 consumedValue = _processNextStep(m.id, m.execs, m.dst, nextToken, nextAmount);\n        remainingValue -= consumedValue;\n        return _refundValueAndDone(remainingValue);\n    }\n\n    // the receiver of a swap is entitled to all the funds in the pocket. as long as someone can prove\n    // that they are the receiver of a swap, they can always recreate the pocket contract and claim the\n    // funds inside.\n    function claimPocketFund(\n        address _srcSender,\n        address _dstReceiver,\n        uint64 _nonce,\n        address _token\n    ) external whenNotPaused nonReentrant {\n        require(msg.sender == _dstReceiver, \"only receiver can claim\");\n        // id ensures that only the designated receiver of a swap can claim funds from the designated pocket of a swap\n        bytes32 id = _computeId(_srcSender, _dstReceiver, _nonce);\n        Pocket pocket = new Pocket{salt: id}();\n        uint256 erc20Amount = IERC20(_token).balanceOf(address(pocket));\n        uint256 nativeAmount = address(pocket).balance;\n        require(erc20Amount > 0 || nativeAmount > 0, \"pocket is empty\");\n        // this claims both _token and native\n        _claimPocketERC20(pocket, _token, erc20Amount);\n        if (erc20Amount > 0) {\n            IERC20(_token).safeTransfer(_dstReceiver, erc20Amount);\n        }\n        if (nativeAmount > 0) {\n            (bool ok, ) = _dstReceiver.call{value: nativeAmount, gas: 50000}(\"\");\n            require(ok, \"failed to send native\");\n        }\n        emit PocketFundClaimed(_dstReceiver, erc20Amount, _token, nativeAmount);\n    }\n\n    /**\n     * @notice allows the owner to extract stuck funds from this contract and sent to _receiver\n     * @dev since bridged funds are sent to the pocket contract, and fees are sent to the fee vault,\n     * normally there should be no residue funds in this contract. but in case someone mistakenly\n     * send tokens directly to this contract, this function can be used to access these funds.\n     * @param _token the token to extract, use address(0) for native token\n     */\n    function resecueFund(address _token) external onlyOwner {\n        if (_token == address(0)) {\n            (bool ok, ) = owner().call{value: address(this).balance}(\"\");\n            require(ok, \"send native failed\");\n        } else {\n            IERC20(_token).safeTransfer(owner(), IERC20(_token).balanceOf(address(this)));\n        }\n    }\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Misc\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n    // encoding src sender into the id prevents the scenario where different senders can send funds to the the same receiver\n    // causing the swap behavior to be non-deterministic. e.g. if src sender is not in id generation, an attacker can send\n    // send a modified swap data as soon as they see the victim executes on the src chain. since the processing of messages\n    // is asynchronous, the hacker's message can be executed first, accessing the fund inside the victim's pocket and\n    // swapping it in some unfavorable ways.\n    //\n    // note that if the original tx sender is a contract, the integrator MUST ensure that they maintain a unique nonce so\n    // that the same sender/receiver/nonce combo cannot be used twice. otherwise, the above attack is possible via the\n    // integrator's contract. TODO: maybe add the nonce maintenance in this contract.\n    function _computeId(\n        address _srcSender,\n        address _dstReceiver,\n        uint64 _nonce\n    ) private pure returns (bytes32) {\n        // the main purpose of this id is to uniquely identify a user-swap.\n        return keccak256(abi.encodePacked(_srcSender, _dstReceiver, _nonce));\n    }\n\n    function _processNextStep(\n        bytes32 _id,\n        Types.ExecutionInfo[] memory _execs,\n        Types.DestinationInfo memory _dst,\n        address _nextToken,\n        uint256 _nextAmount\n    ) private returns (uint256 consumedValue) {\n        Types.ExecutionInfo memory exec = _execs[0];\n        _execs = _removeFirst(_execs);\n        // pay receiver if there is no more swaps or bridges\n        if (_execs.length == 0 && exec.bridge.toChainId == 0) {\n            _sendToken(_nextToken, _nextAmount, _dst.receiver, _dst.nativeOut);\n            emit StepExecuted(_id, _nextAmount, _nextToken);\n            return 0;\n        }\n        // funds are bridged directly to the receiver if there are no subsequent executions on the destination chain.\n        // otherwise, it's sent to a \"pocket\" contract addr to temporarily hold the fund before it is used for swapping.\n        address bridgeOutReceiver = _dst.receiver;\n        // if there are more execution steps left, pack them and send to the next chain\n        if (_execs.length > 0) {\n            address remote = remotes[exec.bridge.toChainId];\n            require(remote != address(0), \"remote not found\");\n            bridgeOutReceiver = _getPocketAddr(_id, remote);\n\n            bytes memory message = abi.encode(Types.Message({id: _id, execs: _execs, dst: _dst}));\n            uint256 msgFee = IMessageBus(messageBus).calcFee(message);\n            IMessageBus(messageBus).sendMessage{value: msgFee}(remote, exec.bridge.toChainId, message);\n            consumedValue += msgFee;\n        }\n        _bridgeSend(exec.bridge, bridgeOutReceiver, _nextToken, _nextAmount);\n        consumedValue += exec.bridge.nativeFee;\n        emit StepExecuted(_id, _nextAmount, _nextToken);\n    }\n\n    function _refundValueAndDone(uint256 _remainingValue) private returns (ExecutionStatus status) {\n        // chainhop executor would always send a set amount of native token when calling messagebus's executeMessage().\n        // these tokens cover the fee introduced by chaining another message when there are more bridging.\n        // refunding the unspent native tokens back to the executor\n        if (_remainingValue > 0) {\n            (bool ok, ) = tx.origin.call{value: _remainingValue, gas: 50000}(\"\");\n            require(ok, \"failed to refund remaining native token\");\n        }\n        return ExecutionStatus.Success;\n    }\n\n    function _pullFundFromSender(Types.SourceInfo memory _src) private returns (uint256 amount, address token) {\n        if (_src.nativeIn) {\n            require(_src.tokenIn == nativeWrap, \"tokenIn not nativeWrap\");\n            require(msg.value >= _src.amountIn, \"insufficient native amount\");\n            IWETH(nativeWrap).deposit{value: _src.amountIn}();\n        } else {\n            IERC20(_src.tokenIn).safeTransferFrom(msg.sender, address(this), _src.amountIn);\n        }\n        return (_src.amountIn, _src.tokenIn);\n    }\n\n    function _pullFundFromPocket(bytes32 _id, Types.ExecutionInfo memory _exec)\n        private\n        returns (uint256 amount, address token)\n    {\n        Pocket pocket = new Pocket{salt: _id}();\n\n        uint256 fallbackAmount;\n        if (_exec.bridgeOutFallbackToken != address(0)) {\n            fallbackAmount = IERC20(_exec.bridgeOutFallbackToken).balanceOf(address(pocket)); // e.g. hToken/anyToken\n        }\n        uint256 erc20Amount = IERC20(_exec.bridgeOutToken).balanceOf(address(pocket));\n        uint256 nativeAmount = address(pocket).balance;\n\n        // if the pocket does not have bridgeOutMin, we consider the transfer not arrived yet. in\n        // this case we tell the msgbus to revert the outter tx using the MSG::ABORT: prefix and\n        // our executor will retry sending this tx later.\n        //\n        // this bridgeOutMin is also a counter-measure to a DoS attack vector. if we assume the bridge\n        // funds have arrived once we see a balance in the pocket, an attacker can deposit a small\n        // amount of fund into the pocket and confuse this contract that the bridged fund has arrived.\n        // this triggers the refund logic branch and thus denying the dst swap for the victim.\n        // bridgeOutMin is determined by the server before sending out the transfer.\n        // bridgeOutMin = R * bridgeAmountIn where R is an arbitrary ratio that we feel effective in\n        // raising the attacker's attack cost.\n        if (fallbackAmount > _exec.bridgeOutFallbackMin) {\n            _claimPocketERC20(pocket, _exec.bridgeOutFallbackToken, fallbackAmount);\n            amount = _deductFee(fallbackAmount, _exec.feeInBridgeOutFallbackToken, _exec.bridgeOutFallbackToken);\n            token = _exec.bridgeOutFallbackToken;\n        } else if (erc20Amount > _exec.bridgeOutMin) {\n            _claimPocketERC20(pocket, _exec.bridgeOutToken, erc20Amount);\n            amount = _deductFee(erc20Amount, _exec.feeInBridgeOutToken, _exec.bridgeOutToken);\n            token = _exec.bridgeOutToken;\n        } else if (nativeAmount > _exec.bridgeOutMin) {\n            // no need to check before/after balance here since selfdestruct is guaranteed to\n            // send all native tokens from the pocket to this contract.\n            pocket.claim(address(0), 0);\n            require(_exec.bridgeOutToken == nativeWrap, \"bridgeOutToken not nativeWrap\");\n            amount = _deductFee(nativeAmount, _exec.feeInBridgeOutToken, _exec.bridgeOutToken);\n            IWETH(_exec.bridgeOutToken).deposit{value: amount}();\n            token = _exec.bridgeOutToken;\n        } else {\n            revert(\"MSG::ABORT:pocket is empty\");\n        }\n    }\n\n    // since the call result of the transfer function in the pocket contract is not checked, we check\n    // the before and after balance of this contract to ensure that the amount is indeed received.\n    function _claimPocketERC20(\n        Pocket _pocket,\n        address _token,\n        uint256 _amount\n    ) private {\n        uint256 balBefore = IERC20(_token).balanceOf(address(this));\n        _pocket.claim(_token, _amount);\n        uint256 balAfter = IERC20(_token).balanceOf(address(this));\n        require(balAfter - balBefore >= _amount, \"insufficient fund claimed\");\n    }\n\n    function _getPocketAddr(bytes32 _salt, address _deployer) private pure returns (address) {\n        // how to predict a create2 address:\n        // https://docs.soliditylang.org/en/v0.8.17/control-structures.html?highlight=create2#salted-contract-creations-create2\n        bytes32 hash = keccak256(\n            abi.encodePacked(bytes1(0xff), _deployer, _salt, keccak256(type(Pocket).creationCode))\n        );\n        return address(uint160(uint256(hash)));\n    }\n\n    function _deductFee(\n        uint256 _amount,\n        uint256 _fee,\n        address _token\n    ) private returns (uint256 amount) {\n        uint256 fee;\n        // handle the case where amount received is not enough to pay fee\n        if (_amount > _fee) {\n            amount = _amount - _fee;\n            fee = _fee;\n        } else {\n            fee = _amount;\n        }\n        if (_token == nativeWrap) {\n            (bool ok, ) = feeVault.call{value: fee}(\"\");\n            require(ok, \"send native failed\");\n        } else {\n            IERC20(_token).safeTransfer(feeVault, fee);\n        }\n    }\n\n    function _bridgeSend(\n        Types.BridgeInfo memory _bridge,\n        address _receiver,\n        address _token,\n        uint256 _amount\n    ) private {\n        IBridgeAdapter bridge = bridges[keccak256(bytes(_bridge.bridgeProvider))];\n        IERC20(_token).safeIncreaseAllowance(address(bridge), _amount);\n        bridge.bridge{value: _bridge.nativeFee}(_bridge.toChainId, _receiver, _amount, _token, _bridge.bridgeParams);\n    }\n\n    function _executeSwap(\n        ICodec.SwapDescription memory _swap,\n        uint256 _amountIn,\n        address _tokenIn\n    )\n        private\n        returns (\n            bool ok,\n            uint256 amountOut,\n            address tokenOut\n        )\n    {\n        if (_swap.dex == address(0)) {\n            // nop swap\n            return (true, _amountIn, _tokenIn);\n        }\n        bytes4 selector = bytes4(_swap.data);\n        ICodec codec = getCodec(_swap.dex, selector);\n        address tokenIn;\n        (, tokenIn, tokenOut) = codec.decodeCalldata(_swap);\n        require(tokenIn == _tokenIn, \"swap info mismatch\");\n\n        bytes memory data = codec.encodeCalldataWithOverride(_swap.data, _amountIn, address(this));\n        IERC20(tokenIn).safeIncreaseAllowance(_swap.dex, _amountIn);\n        uint256 balBefore = IERC20(tokenOut).balanceOf(address(this));\n        (bool success, ) = _swap.dex.call(data);\n        if (!success) {\n            return (false, 0, tokenOut);\n        }\n        uint256 balAfter = IERC20(tokenOut).balanceOf(address(this));\n        return (true, balAfter - balBefore, tokenOut);\n    }\n\n    function _sendToken(\n        address _token,\n        uint256 _amount,\n        address _receiver,\n        bool _nativeOut\n    ) private {\n        if (_nativeOut) {\n            require(_token == nativeWrap, \"token is not nativeWrap\");\n            IWETH(nativeWrap).withdraw(_amount);\n            (bool sent, ) = _receiver.call{value: _amount, gas: 50000}(\"\");\n            require(sent, \"send fail\");\n        } else {\n            IERC20(_token).safeTransfer(_receiver, _amount);\n        }\n    }\n\n    function _removeFirst(Types.ExecutionInfo[] memory _execs)\n        private\n        pure\n        returns (Types.ExecutionInfo[] memory rest)\n    {\n        require(_execs.length > 0, \"empty execs\");\n        rest = new Types.ExecutionInfo[](_execs.length - 1);\n        for (uint256 i = 1; i < _execs.length; i++) {\n            rest[i - 1] = _execs[i];\n        }\n    }\n\n    function _verify(Types.ExecutionInfo[] memory _execs, Types.SourceInfo memory _src) private view {\n        require(_src.deadline > block.timestamp, \"deadline exceeded\");\n        bytes memory data = abi.encodePacked(\n            \"chainhop quote\",\n            uint64(block.chainid),\n            _src.amountIn,\n            _src.tokenIn,\n            _src.deadline\n        );\n        for (uint256 i = 1; i < _execs.length; i++) {\n            Types.ExecutionInfo memory e = _execs[i];\n            Types.BridgeInfo memory prevBridge = _execs[i - 1].bridge;\n            // bridged tokens and the chain id of the execution are encoded in the sig data so that\n            // no malicious user can temper the fee they have to pay on any execution steps\n            bytes memory execData = abi.encodePacked(\n                prevBridge.toChainId,\n                e.feeInBridgeOutToken,\n                e.bridgeOutToken,\n                e.feeInBridgeOutFallbackToken,\n                e.bridgeOutFallbackToken,\n                // native fee also needs to be agreed upon by chainhop for any subsequent bridge\n                // since the fee is provided by chainhop's executor\n                e.bridge.nativeFee\n            );\n            data = data.concat(execData);\n        }\n        bytes32 signHash = keccak256(data).toEthSignedMessageHash();\n        verifySig(signHash, _src.quoteSig);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/lib/Types.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.15;\n\nimport \"./MsgDataTypes.sol\";\nimport \"../interfaces/ICodec.sol\";\n\nlibrary Types {\n    struct SourceInfo {\n        // A number unique enough to be used in request ID generation.\n        uint64 nonce;\n        // the unix timestamp before which the fee is valid\n        uint64 deadline;\n        // sig of sha3(\"executor fee\", srcChainId, amountIn, tokenIn, deadline, toChainId, feeInBridgeOutToken, bridgeOutToken, feeInBridgeOutFallbackToken, bridgeOutFallbackToken[, toChainId, feeInBridgeOutToken, bridgeOutToken, feeInBridgeOutFallbackToken, bridgeOutFallbackToken]...)\n        // see _verifyQuote()\n        bytes quoteSig;\n        uint256 amountIn;\n        address tokenIn;\n        bool nativeIn;\n    }\n\n    function emptySourceInfo() internal pure returns (SourceInfo memory) {\n        return SourceInfo(0, 0, \"\", 0, address(0), false);\n    }\n\n    struct DestinationInfo {\n        // The receiving party (the user) of the final output token\n        // note that if an organization user's private key is breached, and if their original receiver is a contract\n        // address, the hacker could deploy a malicious contract with the same address on the different chain and hence\n        // get access to the user's pocket funds on that chain.\n        // WARNING users should make sure their own deployer key's safety or that the receiver is\n        // 1. not a reproducable address on any of the chains that chainhop supports\n        // 2. a contract that they already deployed on all the chains that chainhop supports\n        // 3. an EOA\n        address receiver;\n        bool nativeOut;\n    }\n\n    struct ExecutionInfo {\n        ICodec.SwapDescription swap;\n        BridgeInfo bridge;\n        address bridgeOutToken;\n        // some bridges utilize a intermediary token (e.g. hToken for Hop and anyToken for Multichain)\n        // in cases where there isn't enough underlying token liquidity on the dst chain, the user/pocket\n        // could receive this token as a fallback. remote ExecutionNode needs to know what this token is\n        // in order to check whether a fallback has happened and refund the user.\n        address bridgeOutFallbackToken;\n        // the minimum that remote ExecutionNode needs to receive in order to allow the swap message\n        // to execute. note that this differs from a normal slippages controlling variable and is\n        // purely used to deter DoS attacks (detailed in ExecutionNode).\n        uint256 bridgeOutMin;\n        uint256 bridgeOutFallbackMin;\n        // executor fee\n        uint256 feeInBridgeOutToken;\n        // in case the bridging result in in fallback tokens, this is the amount of the fee that\n        // chainhop charges\n        uint256 feeInBridgeOutFallbackToken;\n    }\n\n    struct BridgeInfo {\n        uint64 toChainId;\n        // bridge provider identifier\n        string bridgeProvider;\n        // Bridge transfers quoted and abi encoded by chainhop backend server.\n        // Bridge adapter implementations need to decode this themselves.\n        bytes bridgeParams;\n        // the native fee required by the bridge provider\n        uint256 nativeFee;\n    }\n\n    struct Message {\n        bytes32 id;\n        Types.ExecutionInfo[] execs;\n        Types.DestinationInfo dst;\n    }\n}\n"
    },
    "contracts/lib/MessageReceiver.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.15;\n\nimport \"./Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nimport \"../interfaces/IMessageReceiver.sol\";\n\nabstract contract MessageReceiver is IMessageReceiver, Ownable, Initializable {\n    event MessageBusUpdated(address messageBus);\n\n    // testMode is used for the ease of testing functions with the \"onlyMessageBus\" modifier.\n    // WARNING: when testMode is true, ANYONE can call executeMessage functions\n    // this variable can only be set during contract construction and is always not set on mainnets\n    bool public testMode;\n\n    address public messageBus;\n\n    constructor(bool _testMode, address _messageBus) {\n        testMode = _testMode;\n        messageBus = _messageBus;\n    }\n\n    function initMessageReceiver(bool _testMode, address _msgbus) internal onlyInitializing {\n        require(!_testMode || block.chainid == 31337); // only allow testMode on hardhat local network\n        testMode = _testMode;\n        messageBus = _msgbus;\n        emit MessageBusUpdated(messageBus);\n    }\n\n    function setMessageBus(address _msgbus) public onlyOwner {\n        messageBus = _msgbus;\n        emit MessageBusUpdated(messageBus);\n    }\n\n    modifier onlyMessageBus() {\n        requireMessageBus();\n        _;\n    }\n\n    function requireMessageBus() internal view {\n        if (!testMode) {\n            require(msg.sender == messageBus, \"caller is not message bus\");\n        }\n    }\n\n    /**\n     * @notice Called by MessageBus (MessageBusReceiver)\n     * @param _sender The address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        address _sender,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable virtual returns (ExecutionStatus) {}\n\n    /**\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\n     * @param _token The token address of the original transfer\n     * @param _amount The amount of the original transfer\n     * @param _message The same message associated with the original transfer\n     */\n    function executeMessageWithTransferRefund(\n        address _token,\n        uint256 _amount,\n        bytes calldata _message\n    ) external payable virtual returns (bool) {}\n}\n"
    },
    "contracts/lib/Pauser.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"./Pausable.sol\";\nimport \"./Ownable.sol\";\n\nabstract contract Pauser is Ownable, Pausable {\n    mapping(address => bool) public pausers;\n\n    event PauserAdded(address account);\n    event PauserRemoved(address account);\n\n    constructor() {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender), \"Caller is not pauser\");\n        _;\n    }\n\n    function pause() public onlyPauser {\n        _pause();\n    }\n\n    function unpause() public onlyPauser {\n        _unpause();\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return pausers[account];\n    }\n\n    function addPauser(address account) public onlyOwner {\n        _addPauser(account);\n    }\n\n    function removePauser(address account) public onlyOwner {\n        _removePauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) private {\n        require(!isPauser(account), \"Account is already pauser\");\n        pausers[account] = true;\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) private {\n        require(isPauser(account), \"Account is not pauser\");\n        pausers[account] = false;\n        emit PauserRemoved(account);\n    }\n}\n"
    },
    "contracts/lib/NativeWrap.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"./Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nabstract contract NativeWrap is Ownable, Initializable {\n    address public nativeWrap;\n\n    event NativeWrapUpdated(address nativeWrap);\n\n    constructor(address _nativeWrap) {\n        nativeWrap = _nativeWrap;\n    }\n\n    function initNativeWrap(address _nativeWrap) internal onlyInitializing {\n        _setNativeWrap(_nativeWrap);\n    }\n\n    function setNativeWrap(address _nativeWrap) external onlyOwner {\n        _setNativeWrap(_nativeWrap);\n    }\n\n    function _setNativeWrap(address _nativeWrap) private {\n        nativeWrap = _nativeWrap;\n        emit NativeWrapUpdated(_nativeWrap);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/lib/Bytes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nlibrary Bytes {\n    uint256 internal constant WORD_SIZE = 32;\n\n    function concat(bytes memory self, bytes memory other) internal pure returns (bytes memory) {\n        bytes memory ret = new bytes(self.length + other.length);\n        (uint256 src, uint256 srcLen) = fromBytes(self);\n        (uint256 src2, uint256 src2Len) = fromBytes(other);\n        (uint256 dest, ) = fromBytes(ret);\n        uint256 dest2 = dest + srcLen;\n        copy(src, dest, srcLen);\n        copy(src2, dest2, src2Len);\n        return ret;\n    }\n\n    function fromBytes(bytes memory bts) internal pure returns (uint256 addr, uint256 len) {\n        len = bts.length;\n        assembly {\n            addr := add(bts, 32)\n        }\n    }\n\n    function copy(\n        uint256 src,\n        uint256 dest,\n        uint256 len\n    ) internal pure {\n        // Copy word-length chunks while possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += WORD_SIZE;\n            src += WORD_SIZE;\n        }\n\n        if (len == 0) return;\n\n        // Copy remaining bytes\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ICodec.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface ICodec {\n    struct SwapDescription {\n        address dex; // the DEX to use for the swap, zero address implies no swap needed\n        bytes data; // the data to call the dex with\n    }\n\n    function decodeCalldata(SwapDescription calldata swap)\n        external\n        view\n        returns (\n            uint256 amountIn,\n            address tokenIn,\n            address tokenOut\n        );\n\n    function encodeCalldataWithOverride(\n        bytes calldata data,\n        uint256 amountInOverride,\n        address receiverOverride\n    ) external pure returns (bytes memory swapCalldata);\n}\n"
    },
    "contracts/interfaces/IExecutionNodeEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.15;\n\nimport \"../lib/Types.sol\";\n\ninterface IExecutionNodeEvents {\n    /**\n     * @notice Emitted when operations on dst chain is done.\n     * @param id see _computeId()\n     * @param amountOut the amount of tokenOut from this step\n     * @param tokenOut the token that is outputted from this step\n     */\n    event StepExecuted(bytes32 id, uint256 amountOut, address tokenOut);\n\n    event PocketFundClaimed(address receiver, uint256 erc20Amount, address token, uint256 nativeAmount);\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/interfaces/IMessageBus.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport \"../lib/MsgDataTypes.sol\";\n\ninterface IMessageBus {\n    event Executed(\n        MsgDataTypes.MsgType msgType,\n        bytes32 msgId,\n        MsgDataTypes.TxStatus status,\n        address indexed receiver,\n        uint64 srcChainId,\n        bytes32 srcTxHash\n    );\n\n    function liquidityBridge() external view returns (address);\n\n    function pegBridge() external view returns (address);\n\n    function pegBridgeV2() external view returns (address);\n\n    function pegVault() external view returns (address);\n\n    function pegVaultV2() external view returns (address);\n\n    function feeBase() external view returns (uint256);\n\n    function feePerByte() external view returns (uint256);\n\n    /**\n     * @notice Calculates the required fee for the message.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     @ @return The required fee.\n     */\n    function calcFee(bytes calldata _message) external view returns (uint256);\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\n     * A fee is charged in the native gas token.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     */\n    function sendMessage(\n        address _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message\n    ) external payable;\n\n    /**\n     * @notice Sends a message associated with a transfer to an app on another chain via MessageBus without an associated transfer.\n     * A fee is charged in the native token.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _srcBridge The bridge contract to send the transfer with.\n     * @param _srcTransferId The transfer ID.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     */\n    function sendMessageWithTransfer(\n        address _receiver,\n        uint256 _dstChainId,\n        address _srcBridge,\n        bytes32 _srcTransferId,\n        bytes calldata _message\n    ) external payable;\n\n    /**\n     * @notice Withdraws message fee in the form of native gas token.\n     * @param _account The address receiving the fee.\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function withdrawFee(\n        address _account,\n        uint256 _cumulativeFee,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    /**\n     * @notice Execute a message with a successful transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _transfer The transfer info.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessageWithTransfer(\n        bytes calldata _message,\n        MsgDataTypes.TransferInfo calldata _transfer,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable;\n\n    /**\n     * @notice Execute a message with a refunded transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _transfer The transfer info.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessageWithTransferRefund(\n        bytes calldata _message, // the same message associated with the original transfer\n        MsgDataTypes.TransferInfo calldata _transfer,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable;\n\n    /**\n     * @notice Execute a message not associated with a transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessage(\n        bytes calldata _message,\n        MsgDataTypes.RouteInfo calldata _route,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable;\n}\n"
    },
    "contracts/registries/BridgeRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nimport \"../interfaces/IBridgeAdapter.sol\";\n\nimport \"../lib/Ownable.sol\";\n\n/**\n * @title Manages a list of supported bridges\n * @author lionelhoho\n * @author Padoriku\n */\nabstract contract BridgeRegistry is Ownable, Initializable {\n    event SupportedBridgesUpdated(string[] providers, address[] adapters);\n\n    mapping(bytes32 => IBridgeAdapter) public bridges;\n\n    function initBridgeRegistry(string[] memory _providers, address[] memory _adapters) internal onlyInitializing {\n        _setSupportedbridges(_providers, _adapters);\n    }\n\n    // to disable a bridge, set the bridge addr of the corresponding provider to address(0)\n    function setSupportedBridges(string[] memory _providers, address[] memory _adapters) external onlyOwner {\n        _setSupportedbridges(_providers, _adapters);\n    }\n\n    function _setSupportedbridges(string[] memory _providers, address[] memory _adapters) private {\n        require(_providers.length == _adapters.length, \"params size mismatch\");\n        for (uint256 i = 0; i < _providers.length; i++) {\n            bridges[keccak256(bytes(_providers[i]))] = IBridgeAdapter(_adapters[i]);\n        }\n        emit SupportedBridgesUpdated(_providers, _adapters);\n    }\n}\n"
    },
    "contracts/registries/DexRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nimport \"../interfaces/ICodec.sol\";\n\nimport \"../lib/Ownable.sol\";\n\n/**\n * @title Manages a list supported dex\n * @author Padoriku\n */\nabstract contract DexRegistry is Ownable, Initializable {\n    event DexCodecUpdated(address dex, bytes4 selector, address codec);\n\n    // supported swap functions\n    // 0x3df02124 exchange(int128,int128,uint256,uint256)\n    // 0xa6417ed6 exchange_underlying(int128,int128,uint256,uint256)\n    // 0x44ee1986 exchange_underlying(int128,int128,uint256,uint256,address)\n    // 0x38ed1739 swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\n    // 0xc04b8d59 exactInput((bytes,address,uint256,uint256,uint256))\n    // 0xb0431182 clipperSwap(address,address,uint256,uint256)\n    // 0xe449022e uniswapV3Swap(uint256,uint256,uint256[])\n    // 0x2e95b6c8 unoswap(address,uint256,uint256,bytes32[])\n    // 0x7c025200 swap(address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes)\n    // 0xd0a3b665 fillOrderRFQ((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256)\n    mapping(address => mapping(bytes4 => address)) public dexFunc2Codec;\n\n    function initDexRegistry(\n        address[] memory _dexList,\n        string[] memory _funcs,\n        address[] memory _codecs\n    ) internal onlyInitializing {\n        _setDexCodecs(_dexList, _funcs, _codecs);\n    }\n\n    function setDexCodecs(\n        address[] memory _dexList,\n        string[] memory _funcs,\n        address[] memory _codecs\n    ) external onlyOwner {\n        _setDexCodecs(_dexList, _funcs, _codecs);\n    }\n\n    function _setDexCodecs(\n        address[] memory _dexList,\n        string[] memory _funcs,\n        address[] memory _codecs\n    ) private {\n        require(_dexList.length == _funcs.length && _dexList.length == _codecs.length, \"codec lengths mismatch\");\n        for (uint256 i = 0; i < _dexList.length; i++) {\n            bytes4 selector = bytes4(keccak256(bytes(_funcs[i])));\n            _setDexCodec(_dexList[i], selector, _codecs[i]);\n        }\n    }\n\n    function _setDexCodec(\n        address _dex,\n        bytes4 _selector,\n        address _codec\n    ) private {\n        address codec = dexFunc2Codec[_dex][_selector];\n        require(codec != _codec, \"nop\");\n        dexFunc2Codec[_dex][_selector] = _codec;\n        emit DexCodecUpdated(_dex, _selector, _codec);\n    }\n\n    function getCodec(address _dex, bytes4 _selector) internal view returns (ICodec) {\n        require(dexFunc2Codec[_dex][_selector] != address(0), \"unsupported dex\");\n        return ICodec(dexFunc2Codec[_dex][_selector]);\n    }\n}\n"
    },
    "contracts/registries/RemoteExecutionNodeRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nimport \"../lib/Ownable.sol\";\n\n/**\n * @title Allows the owner to whitelist remote ExecutionNode addresses\n * @author Padoriku\n */\nabstract contract RemoteExecutionNodeRegistry is Ownable, Initializable {\n    // chainId => address mapping\n    mapping(uint64 => address) public remotes;\n\n    event RemotesUpdated(uint64[] chainIds, address[] remotes);\n\n    function setRemotes(uint64[] memory _chainIds, address[] memory _remotes) external onlyOwner {\n        _setRemotes(_chainIds, _remotes);\n    }\n\n    function _setRemotes(uint64[] memory _chainIds, address[] memory _remotes) private {\n        require(_chainIds.length == _remotes.length, \"remotes length mismatch\");\n        for (uint256 i = 0; i < _chainIds.length; i++) {\n            remotes[_chainIds[i]] = _remotes[i];\n        }\n        emit RemotesUpdated(_chainIds, _remotes);\n    }\n\n    modifier onlyRemoteExecutionNode(uint64 _chainId, address _remote) {\n        requireRemoteExecutionNode(_chainId, _remote);\n        _;\n    }\n\n    function requireRemoteExecutionNode(uint64 _chainId, address _remote) internal view {\n        require(remotes[_chainId] == _remote, \"unknown remote\");\n    }\n}\n"
    },
    "contracts/Pocket.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity 0.8.15;\n\n// the pocket is a contract that is to be created conterfactually on the dst chain in the scenario where\n// there is a dst swap. the main problem the pocket tries to solve is to gain the ability to know when and\n// by how much the bridged tokens are received.\n// when chainhop backend builds a cross-chain swap, it calculates a swap id (see _computeSwapId in\n// ExecutionNode) and the id is used as the salt in generating a pocket address on the dst chain.\n// this address is then assigned as the receiver of the bridge out tokens on the dst chain to temporarily\n// hold the funds until the actual pocket contract is deployed at the exact address during the message execution.\ncontract Pocket {\n    function claim(address _token, uint256 _amt) external {\n        address sender = msg.sender;\n        _token.call(abi.encodeWithSelector(0xa9059cbb, sender, _amt));\n        assembly {\n            // selfdestruct sends all native balance to sender\n            selfdestruct(sender)\n        }\n    }\n}\n"
    },
    "contracts/lib/MsgDataTypes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.15;\n\nlibrary MsgDataTypes {\n    // bridge operation type at the sender side (src chain)\n    enum BridgeSendType {\n        Null,\n        Liquidity,\n        PegDeposit,\n        PegBurn,\n        PegV2Deposit,\n        PegV2Burn,\n        PegV2BurnFrom\n    }\n\n    // bridge operation type at the receiver side (dst chain)\n    enum TransferType {\n        Null,\n        LqRelay, // relay through liquidity bridge\n        LqWithdraw, // withdraw from liquidity bridge\n        PegMint, // mint through pegged token bridge\n        PegWithdraw, // withdraw from original token vault\n        PegV2Mint, // mint through pegged token bridge v2\n        PegV2Withdraw // withdraw from original token vault v2\n    }\n\n    enum MsgType {\n        MessageWithTransfer,\n        MessageOnly\n    }\n\n    enum TxStatus {\n        Null,\n        Success,\n        Fail,\n        Fallback,\n        Pending // transient state within a transaction\n    }\n\n    struct TransferInfo {\n        TransferType t;\n        address sender;\n        address receiver;\n        address token;\n        uint256 amount;\n        uint64 wdseq; // only needed for LqWithdraw (refund)\n        uint64 srcChainId;\n        bytes32 refId;\n        bytes32 srcTxHash; // src chain msg tx hash\n    }\n\n    struct RouteInfo {\n        address sender;\n        address receiver;\n        uint64 srcChainId;\n        bytes32 srcTxHash; // src chain msg tx hash\n    }\n\n    struct MsgWithTransferExecutionParams {\n        bytes message;\n        TransferInfo transfer;\n        bytes[] sigs;\n        address[] signers;\n        uint256[] powers;\n    }\n\n    struct BridgeTransferParams {\n        bytes request;\n        bytes[] sigs;\n        address[] signers;\n        uint256[] powers;\n    }\n}\n"
    },
    "contracts/interfaces/IMessageReceiver.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IMessageReceiver {\n    enum ExecutionStatus {\n        Fail, // execution failed, finalized\n        Success, // execution succeeded, finalized\n        Retry // execution rejected, can retry later\n    }\n\n    /**\n     * @notice Called by MessageBus (MessageBusReceiver)\n     * @param _sender The address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        address _sender,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable returns (ExecutionStatus);\n\n    /**\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\n     * @param _token The token address of the original transfer\n     * @param _amount The amount of the original transfer\n     * @param _message The same message associated with the original transfer\n     */\n    function executeMessageWithTransferRefund(\n        address _token,\n        uint256 _amount,\n        bytes calldata _message\n    ) external payable returns (bool);\n}\n"
    },
    "contracts/lib/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev modified version of OZ's Pausable to support Celer IM's message ABORT op code.\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"MSG::ABORT:paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"MSG::ABORT:not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/codecs/UniswapV3ExactInputCodec.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"../interfaces/ICodec.sol\";\nimport \"../interfaces/ISwapRouter.sol\";\n\ncontract UniswapV3ExactInputCodec is ICodec {\n    function decodeCalldata(ICodec.SwapDescription calldata _swap)\n        external\n        pure\n        returns (\n            uint256 amountIn,\n            address tokenIn,\n            address tokenOut\n        )\n    {\n        ISwapRouter.ExactInputParams memory data = abi.decode((_swap.data[4:]), (ISwapRouter.ExactInputParams));\n        // path is in the format of abi.encodedPacked(address tokenIn, [uint24 fee, address token[, uint24 fee, address token]...])\n        require((data.path.length - 20) % 23 == 0, \"malformed path\");\n        // first 20 bytes is tokenIn\n        tokenIn = address(bytes20(copySubBytes(data.path, 0, 20)));\n        // last 20 bytes is tokenOut\n        tokenOut = address(bytes20(copySubBytes(data.path, data.path.length - 20, data.path.length)));\n        amountIn = data.amountIn;\n    }\n\n    function encodeCalldataWithOverride(\n        bytes calldata _data,\n        uint256 _amountInOverride,\n        address _receiverOverride\n    ) external pure returns (bytes memory swapCalldata) {\n        bytes4 selector = bytes4(_data);\n        ISwapRouter.ExactInputParams memory data = abi.decode((_data[4:]), (ISwapRouter.ExactInputParams));\n        data.amountIn = _amountInOverride;\n        data.recipient = _receiverOverride;\n        return abi.encodeWithSelector(selector, data);\n    }\n\n    // basically a bytes' version of byteN[from:to] execpt it copies\n    function copySubBytes(\n        bytes memory data,\n        uint256 from,\n        uint256 to\n    ) private pure returns (bytes memory ret) {\n        require(to <= data.length, \"index overflow\");\n        uint256 len = to - from;\n        ret = new bytes(len);\n        for (uint256 i = 0; i < len; i++) {\n            ret[i] = data[i + from];\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.15;\npragma abicoder v2;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "contracts/codecs/UniswapV2SwapExactTokensForTokensCodec.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"../interfaces/ICodec.sol\";\n\ncontract UniswapV2SwapExactTokensForTokensCodec is ICodec {\n    function decodeCalldata(ICodec.SwapDescription calldata _swap)\n        external\n        pure\n        returns (\n            uint256 amountIn,\n            address tokenIn,\n            address tokenOut\n        )\n    {\n        (uint256 _amountIn, , address[] memory path, , ) = abi.decode(\n            (_swap.data[4:]),\n            (uint256, uint256, address[], address, uint256)\n        );\n        return (_amountIn, path[0], path[path.length - 1]);\n    }\n\n    function encodeCalldataWithOverride(\n        bytes calldata _data,\n        uint256 _amountInOverride,\n        address _receiverOverride\n    ) external pure returns (bytes memory swapCalldata) {\n        bytes4 selector = bytes4(_data);\n        (, uint256 amountOutMin, address[] memory path, , uint256 ddl) = abi.decode(\n            (_data[4:]),\n            (uint256, uint256, address[], address, uint256)\n        );\n        return abi.encodeWithSelector(selector, _amountInOverride, amountOutMin, path, _receiverOverride, ddl);\n    }\n}\n"
    },
    "contracts/codecs/PlatypusRouter01Codec.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"../interfaces/ICodec.sol\";\n\ncontract PlatypusRouter01Codec is ICodec {\n    function decodeCalldata(ICodec.SwapDescription calldata _swap)\n        external\n        pure\n        returns (\n            uint256 amountIn,\n            address tokenIn,\n            address tokenOut\n        )\n    {\n        (address[] memory tokenPath, , uint256 fromAmount, , , ) = abi.decode(\n            (_swap.data[4:]),\n            (address[], address[], uint256, uint256, address, uint256)\n        );\n        require(tokenPath.length > 1, \"len tk path\");\n        return (fromAmount, tokenPath[0], tokenPath[tokenPath.length - 1]);\n    }\n\n    function encodeCalldataWithOverride(\n        bytes calldata _data,\n        uint256 _amountInOverride,\n        address _receiverOverride\n    ) external pure returns (bytes memory swapCalldata) {\n        bytes4 selector = bytes4(_data);\n        (address[] memory tokenPath, address[] memory poolPath, , uint256 min, , uint256 ddl) = abi.decode(\n            (_data[4:]),\n            (address[], address[], uint256, uint256, address, uint256)\n        );\n        return abi.encodeWithSelector(selector, tokenPath, poolPath, _amountInOverride, min, _receiverOverride, ddl);\n    }\n}\n"
    },
    "contracts/codecs/OneInchCodec.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/ICodec.sol\";\nimport \"../interfaces/IUniswapV3Pool.sol\";\nimport \"../interfaces/IUniswapV2Pair.sol\";\n\ncontract OneInchCodec is ICodec {\n    uint256 private constant _ONE_FOR_ZERO_MASK = 1 << 255;\n    uint256 private constant _REVERSE_MASK = 0x8000000000000000000000000000000000000000000000000000000000000000;\n\n    struct OrderRFQ {\n        // lowest 64 bits is the order id, next 64 bits is the expiration timestamp\n        // highest bit is unwrap WETH flag which is set on taker's side\n        // [unwrap eth(1 bit) | unused (127 bits) | expiration timestamp(64 bits) | orderId (64 bits)]\n        uint256 info;\n        IERC20 makerAsset;\n        IERC20 takerAsset;\n        address maker;\n        address allowedSender; // equals to Zero address on public orders\n        uint256 makingAmount;\n        uint256 takingAmount;\n    }\n\n    struct SwapDesc {\n        IERC20 srcToken;\n        IERC20 dstToken;\n        address payable srcReceiver;\n        address payable dstReceiver;\n        uint256 amount;\n        uint256 minReturnAmount;\n        uint256 flags;\n        bytes permit;\n    }\n\n    function decodeCalldata(ICodec.SwapDescription calldata _swap)\n        external\n    view\n    returns (\n        uint256 amountIn,\n        address tokenIn,\n        address tokenOut\n    )\n    {\n        bytes4 selector = bytes4(_swap.data);\n        if (selector == 0xb0431182) {\n            // \"b0431182\": \"clipperSwap(address srcToken, address dstToken, uint256 amount, uint256 minReturn)\",\n            (address srcToken, address dstToken, uint256 amount,) = abi.decode(\n                (_swap.data[4 :]),\n                (address, address, uint256, uint256)\n            );\n            return (amount, srcToken, dstToken);\n        } else if (selector == 0xd0a3b665) {\n            // \"d0a3b665\": \"fillOrderRFQ((uint256 info, address makerAsset, address takerAsset, address maker, address allowedSender, uint256 makingAmount, uint256 takingAmount) order, bytes signature, uint256 makingAmount, uint256 takingAmount)\",\n            (OrderRFQ memory order, , ,) = abi.decode((_swap.data[4 :]), (OrderRFQ, bytes, uint256, uint256));\n            return (order.takingAmount, address(order.takerAsset), address(order.makerAsset));\n        } else if (selector == 0x7c025200) {\n            // \"7c025200\": \"swap(address caller,(address srcToken, address dstToken, address srcReceiver, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 flags, bytes permit) desc, bytes data)\",\n            (, SwapDesc memory desc,) = abi.decode((_swap.data[4 :]), (address, SwapDesc, bytes));\n            return (desc.amount, address(desc.srcToken), address(desc.dstToken));\n        } else if (selector == 0xe449022e) {\n            // \"e449022e\": \"uniswapV3Swap(uint256 amount,uint256 minReturn,uint256[] pools)\",\n            (uint256 amount, , uint256[] memory pools) = abi.decode((_swap.data[4 :]), (uint256, uint256, uint256[]));\n            (address srcToken,) = decodeV3Pool(pools[0]);\n            (, address dstToken) = decodeV3Pool(pools[pools.length - 1]);\n            return (amount, srcToken, dstToken);\n        } else if (selector == 0x2e95b6c8) {\n            // \"2e95b6c8\": \"unoswap(address srcToken, uint256 amount, uint256 minReturn, bytes32[] pools)\"\n            (address srcToken, uint256 amount, , bytes32[] memory pools) = abi.decode(\n                (_swap.data[4:]),\n                (address, uint256, uint256, bytes32[])\n            );\n            (, address dstToken) = decodeV2Pool(uint256(pools[pools.length - 1]));\n            return (amount, srcToken, dstToken);\n        } else {\n            // error, unknown selector\n            revert(\"unknown selector\");\n        }\n    }\n\n    function encodeCalldataWithOverride(\n        bytes calldata _data,\n        uint256 _amountInOverride,\n        address _receiverOverride\n    ) external pure returns (bytes memory swapCalldata) {\n        bytes4 selector = bytes4(_data);\n        if (selector == 0xb0431182) {\n            // \"b0431182\": \"clipperSwap(address srcToken, address dstToken, uint256 amount, uint256 minReturn)\",\n            (address srcToken, address dstToken, , uint256 minReturn) = abi.decode(\n                (_data[4 :]),\n                (address, address, uint256, uint256)\n            );\n            return abi.encodeWithSelector(selector, srcToken, dstToken, _amountInOverride, minReturn);\n        } else if (selector == 0xd0a3b665) {\n            // \"d0a3b665\": \"fillOrderRFQ((uint256 info, address makerAsset, address takerAsset, address maker, address allowedSender, uint256 makingAmount, uint256 takingAmount) order, bytes signature, uint256 makingAmount, uint256 takingAmount)\",\n            (OrderRFQ memory order, bytes memory signature, uint256 makingAmount,) = abi.decode(\n                (_data[4 :]),\n                (OrderRFQ, bytes, uint256, uint256)\n            );\n            order.takingAmount = _amountInOverride;\n            return abi.encodeWithSelector(selector, order, signature, makingAmount, _amountInOverride);\n        } else if (selector == 0x7c025200) {\n            // \"7c025200\": \"swap(address caller,(address srcToken, address dstToken, address srcReceiver, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 flags, bytes permit) desc, bytes data)\",\n            (address caller, SwapDesc memory desc, bytes memory data) = abi.decode(\n                (_data[4 :]),\n                (address, SwapDesc, bytes)\n            );\n            desc.dstReceiver = payable(_receiverOverride);\n            desc.amount = _amountInOverride;\n            return abi.encodeWithSelector(selector, caller, desc, data);\n        } else if (selector == 0xe449022e) {\n            // \"e449022e\": \"uniswapV3Swap(uint256 amount,uint256 minReturn,uint256[] pools)\",\n            (, uint256 minReturn, uint256[] memory pools) = abi.decode((_data[4 :]), (uint256, uint256, uint256[]));\n            return abi.encodeWithSelector(selector, _amountInOverride, minReturn, pools);\n        } else if (selector == 0x2e95b6c8) {\n            // \"2e95b6c8\": \"unoswap(address srcToken, uint256 amount, uint256 minReturn, bytes32[] pools)\"\n            (address srcToken, , uint256 minReturn, bytes32[] memory pools) = abi.decode(\n                (_data[4 :]),\n                (address, uint256, uint256, bytes32[])\n            );\n            return abi.encodeWithSelector(selector, srcToken, _amountInOverride, minReturn, pools);\n        } else {\n            // error, unknown selector\n            revert(\"unknown selector\");\n        }\n    }\n\n    function decodeV3Pool(uint256 pool) private view returns (address srcToken, address dstToken) {\n        bool zeroForOne = pool & _ONE_FOR_ZERO_MASK == 0;\n        address poolAddr = address(uint160(pool));\n        if (zeroForOne) {\n            return (IUniswapV3Pool(poolAddr).token0(), IUniswapV3Pool(poolAddr).token1());\n        } else {\n            return (IUniswapV3Pool(poolAddr).token1(), IUniswapV3Pool(poolAddr).token0());\n        }\n    }\n\n    function decodeV2Pool(uint256 pool) private view returns (address srcToken, address dstToken) {\n        bool zeroForOne = pool & _REVERSE_MASK == 0;\n        address poolAddr = address(uint160(pool));\n        if (zeroForOne) {\n            return (IUniswapV2Pair(poolAddr).token0(), IUniswapV2Pair(poolAddr).token1());\n        } else {\n            return (IUniswapV2Pair(poolAddr).token1(), IUniswapV2Pair(poolAddr).token0());\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\ninterface IUniswapV3Pool {\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n}\n"
    },
    "contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\ninterface IUniswapV2Pair {\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n\n}\n"
    },
    "contracts/codecs/CurveSpecialMetaPoolCodec.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"../lib/Ownable.sol\";\nimport \"../interfaces/ICodec.sol\";\nimport \"../interfaces/ICurvePool.sol\";\nimport \"./CurveTokenAddresses.sol\";\n\n/**\n * @title a special codec for pools that implement exchange_underlying() slightly differently than others.\n * e.g. \"sUSD\" pool on Ethereum and \"aave\" on Polygon\n * @author padoriku\n * @notice encode/decode calldata\n */\ncontract CurveSpecialMetaPoolCodec is ICodec, CurveTokenAddresses {\n    struct SwapCalldata {\n        int128 i;\n        int128 j;\n        uint256 dx;\n        uint256 min_dy;\n    }\n\n    constructor(address[] memory _pools, address[][] memory _poolTokens) CurveTokenAddresses(_pools, _poolTokens) {}\n\n    function decodeCalldata(ICodec.SwapDescription calldata _swap)\n        external\n        view\n        returns (\n            uint256 amountIn,\n            address tokenIn,\n            address tokenOut\n        )\n    {\n        SwapCalldata memory data = abi.decode((_swap.data[4:]), (SwapCalldata));\n        amountIn = data.dx;\n        uint256 i = uint256(uint128(data.i));\n        uint256 j = uint256(uint128(data.j));\n\n        address[] memory tokens = poolToTokens[_swap.dex];\n        if (tokens.length > 0) {\n            // some pool(sUSD)'s implementation of underlying_coins takes uint128 instead of uint256 as input\n            // register these pool's token addresses manually to workaround this.\n            tokenIn = tokens[i];\n            tokenOut = tokens[j];\n        } else {\n            tokenIn = ICurvePool(_swap.dex).underlying_coins(i);\n            tokenOut = ICurvePool(_swap.dex).underlying_coins(j);\n        }\n    }\n\n    function encodeCalldataWithOverride(\n        bytes calldata _data,\n        uint256 _amountInOverride,\n        address // _receiverOverride\n    ) external pure returns (bytes memory swapCalldata) {\n        bytes4 selector = bytes4(_data);\n        SwapCalldata memory data = abi.decode((_data[4:]), (SwapCalldata));\n        data.dx = _amountInOverride;\n        return abi.encodeWithSelector(selector, data);\n    }\n}\n"
    },
    "contracts/codecs/CurveTokenAddresses.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"../lib/Ownable.sol\";\n\ncontract CurveTokenAddresses is Ownable {\n    event PoolTokensSet(address[] pools, address[][] poolTokens);\n\n    // Pool address to *underlying* token addresses. position sensitive.\n    // This is needed because some of the metapools fail to implement curve's underlying_coins() spec,\n    // therefore no consistant way to query token addresses by their indices.\n    mapping(address => address[]) public poolToTokens;\n\n    constructor(address[] memory _pools, address[][] memory _poolTokens) {\n        _setPoolTokens(_pools, _poolTokens);\n    }\n\n    function setPoolTokens(address[] calldata _pools, address[][] calldata _poolTokens) external onlyOwner {\n        _setPoolTokens(_pools, _poolTokens);\n    }\n\n    function _setPoolTokens(address[] memory _pools, address[][] memory _poolTokens) private {\n        require(_pools.length == _poolTokens.length, \"len mm\");\n        for (uint256 i = 0; i < _pools.length; i++) {\n            poolToTokens[_pools[i]] = _poolTokens[i];\n        }\n        emit PoolTokensSet(_pools, _poolTokens);\n    }\n}\n"
    },
    "contracts/codecs/CurveMetaPoolCodec.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"../lib/Ownable.sol\";\nimport \"../interfaces/ICodec.sol\";\nimport \"../interfaces/ICurvePool.sol\";\nimport \"./CurveTokenAddresses.sol\";\n\ncontract CurveMetaPoolCodec is ICodec, CurveTokenAddresses {\n    struct SwapCalldata {\n        int128 i;\n        int128 j;\n        uint256 dx;\n        uint256 min_dy;\n        address _receiver;\n    }\n\n    constructor(address[] memory _pools, address[][] memory _poolTokens) CurveTokenAddresses(_pools, _poolTokens) {}\n\n    function decodeCalldata(ICodec.SwapDescription calldata _swap)\n        external\n        view\n        returns (\n            uint256 amountIn,\n            address tokenIn,\n            address tokenOut\n        )\n    {\n        SwapCalldata memory data = abi.decode((_swap.data[4:]), (SwapCalldata));\n        amountIn = data.dx;\n        uint256 i = uint256(int256(data.i));\n        uint256 j = uint256(int256(data.j));\n        address[] memory tokens = poolToTokens[_swap.dex];\n        tokenIn = tokens[i];\n        tokenOut = tokens[j];\n    }\n\n    function encodeCalldataWithOverride(\n        bytes calldata _data,\n        uint256 _amountInOverride,\n        address _receiverOverride\n    ) external pure returns (bytes memory swapCalldata) {\n        bytes4 selector = bytes4(_data);\n        SwapCalldata memory data = abi.decode((_data[4:]), (SwapCalldata));\n        data.dx = _amountInOverride;\n        data._receiver = _receiverOverride;\n        return abi.encodeWithSelector(selector, data);\n    }\n}\n"
    },
    "contracts/codecs/CurvePoolCodec.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"../interfaces/ICodec.sol\";\nimport \"../interfaces/ICurvePool.sol\";\n\ncontract CurvePoolCodec is ICodec {\n    struct SwapCalldata {\n        int128 i;\n        int128 j;\n        uint256 dx;\n        uint256 min_dy;\n    }\n\n    function decodeCalldata(ICodec.SwapDescription calldata _swap)\n        external\n        view\n        returns (\n            uint256 amountIn,\n            address tokenIn,\n            address tokenOut\n        )\n    {\n        SwapCalldata memory data = abi.decode((_swap.data[4:]), (SwapCalldata));\n        amountIn = data.dx;\n        tokenIn = ICurvePool(_swap.dex).coins(uint256(int256(data.i)));\n        tokenOut = ICurvePool(_swap.dex).coins(uint256(int256(data.j)));\n    }\n\n    function encodeCalldataWithOverride(\n        bytes calldata _data,\n        uint256 _amountInOverride,\n        address // receiverOverride\n    ) external pure returns (bytes memory swapCalldata) {\n        bytes4 selector = bytes4(_data);\n        SwapCalldata memory data = abi.decode((_data[4:]), (SwapCalldata));\n        data.dx = _amountInOverride;\n        return abi.encodeWithSelector(selector, data);\n    }\n}\n"
    },
    "contracts/lib/MessageSenderLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/IBridgeCeler.sol\";\nimport \"../interfaces/IOriginalTokenVault.sol\";\nimport \"../interfaces/IOriginalTokenVaultV2.sol\";\nimport \"../interfaces/IPeggedTokenBridge.sol\";\nimport \"../interfaces/IPeggedTokenBridgeV2.sol\";\nimport \"../interfaces/IMessageBus.sol\";\nimport \"./MsgDataTypes.sol\";\n\nlibrary MessageSenderLib {\n    using SafeERC20 for IERC20;\n\n    // ============== Internal library functions called by apps ==============\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus with an associated transfer.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\n     * transfer can be refunded. Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\n     * @param _messageBus The address of the MessageBus on this chain.\n     * @param _fee The fee amount to pay to MessageBus.\n     * @return The transfer ID.\n     */\n    function sendMessageWithTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        bytes memory _message,\n        MsgDataTypes.BridgeSendType _bridgeSendType,\n        address _messageBus,\n        uint256 _fee\n    ) internal returns (bytes32) {\n        (bytes32 transferId, address bridge) = sendTokenTransfer(\n            _receiver,\n            _token,\n            _amount,\n            _dstChainId,\n            _nonce,\n            _maxSlippage,\n            _bridgeSendType,\n            _messageBus\n        );\n        if (_message.length > 0) {\n            IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\n                _receiver,\n                _dstChainId,\n                bridge,\n                transferId,\n                _message\n            );\n        }\n        return transferId;\n    }\n\n    /**\n     * @notice Sends a token transfer via a bridge.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\n     * transfer can be refunded.\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\n     */\n    function sendTokenTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        MsgDataTypes.BridgeSendType _bridgeSendType,\n        address _messageBus\n    ) internal returns (bytes32 transferId, address bridge) {\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\n            bridge = IMessageBus(_messageBus).liquidityBridge();\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\n            IBridgeCeler(bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\n            transferId = computeLiqBridgeTransferId(_receiver, _token, _amount, _dstChainId, _nonce);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\n            bridge = IMessageBus(_messageBus).pegVault();\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\n            IOriginalTokenVault(bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\n            transferId = computePegV1DepositId(_receiver, _token, _amount, _dstChainId, _nonce);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\n            bridge = IMessageBus(_messageBus).pegBridge();\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\n            IPeggedTokenBridge(bridge).burn(_token, _amount, _receiver, _nonce);\n            // handle cases where certain tokens do not spend allowance for role-based burn\n            IERC20(_token).safeApprove(bridge, 0);\n            transferId = computePegV1BurnId(_receiver, _token, _amount, _nonce);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit) {\n            bridge = IMessageBus(_messageBus).pegVaultV2();\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\n            transferId = IOriginalTokenVaultV2(bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn) {\n            bridge = IMessageBus(_messageBus).pegBridgeV2();\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\n            transferId = IPeggedTokenBridgeV2(bridge).burn(_token, _amount, _dstChainId, _receiver, _nonce);\n            // handle cases where certain tokens do not spend allowance for role-based burn\n            IERC20(_token).safeApprove(bridge, 0);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2BurnFrom) {\n            bridge = IMessageBus(_messageBus).pegBridgeV2();\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\n            transferId = IPeggedTokenBridgeV2(bridge).burnFrom(_token, _amount, _dstChainId, _receiver, _nonce);\n            // handle cases where certain tokens do not spend allowance for role-based burn\n            IERC20(_token).safeApprove(bridge, 0);\n        } else {\n            revert(\"bridge type not supported\");\n        }\n    }\n\n    function computeLiqBridgeTransferId(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce\n    ) internal view returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(address(this), _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\n            );\n    }\n\n    function computePegV1DepositId(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce\n    ) internal view returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(address(this), _token, _amount, _dstChainId, _receiver, _nonce, uint64(block.chainid))\n            );\n    }\n\n    function computePegV1BurnId(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _nonce\n    ) internal view returns (bytes32) {\n        return keccak256(abi.encodePacked(address(this), _token, _amount, _receiver, _nonce, uint64(block.chainid)));\n    }\n}\n"
    },
    "contracts/interfaces/IBridgeCeler.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\ninterface IBridgeCeler {\n    event Send(\n        bytes32 transferId,\n        address sender,\n        address receiver,\n        address token,\n        uint256 amount,\n        uint64 dstChainId,\n        uint64 nonce,\n        uint32 maxSlippage\n    );\n\n    // common\n    function delayThresholds(address token) external view returns (uint256);\n\n    function delayPeriod() external view returns (uint256);\n\n    function epochVolumes(address token) external view returns (uint256);\n\n    function epochVolumeCaps(address token) external view returns (uint256);\n\n    // liquidity bridge\n    function minSend(address token) external view returns (uint256);\n\n    function maxSend(address token) external view returns (uint256);\n\n    // peg vault v0/v2\n    function minDeposit(address token) external view returns (uint256);\n\n    function maxDeposit(address token) external view returns (uint256);\n\n    // peg bridge v0/v2\n    function minBurn(address token) external view returns (uint256);\n\n    function maxBurn(address token) external view returns (uint256);\n\n    function nativeWrap() external view returns (address);\n\n    function send(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage\n    ) external;\n\n    function relay(\n        bytes calldata _relayRequest,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    function transfers(bytes32 transferId) external view returns (bool);\n\n    function withdraws(bytes32 withdrawId) external view returns (bool);\n\n    function withdraw(\n        bytes calldata _wdmsg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers.\n     * @param _msg signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external view;\n}\n"
    },
    "contracts/interfaces/IOriginalTokenVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IOriginalTokenVault {\n    /**\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\n     * @param _token local token address\n     * @param _amount locked token amount\n     * @param _mintChainId destination chainId to mint tokens\n     * @param _mintAccount destination account to receive minted tokens\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function deposit(\n        address _token,\n        uint256 _amount,\n        uint64 _mintChainId,\n        address _mintAccount,\n        uint64 _nonce\n    ) external;\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IOriginalTokenVaultV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IOriginalTokenVaultV2 {\n    /**\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\n     * @param _token local token address\n     * @param _amount locked token amount\n     * @param _mintChainId destination chainId to mint tokens\n     * @param _mintAccount destination account to receive minted tokens\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function deposit(\n        address _token,\n        uint256 _amount,\n        uint64 _mintChainId,\n        address _mintAccount,\n        uint64 _nonce\n    ) external returns (bytes32);\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IPeggedTokenBridge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IPeggedTokenBridge {\n    /**\n     * @notice Burn tokens to trigger withdrawal at a remote chain's OriginalTokenVault\n     * @param _token local token address\n     * @param _amount locked token amount\n     * @param _withdrawAccount account who withdraw original tokens on the remote chain\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function burn(\n        address _token,\n        uint256 _amount,\n        address _withdrawAccount,\n        uint64 _nonce\n    ) external;\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IPeggedTokenBridgeV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IPeggedTokenBridgeV2 {\n    /**\n     * @notice Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's\n     * OriginalTokenVault, or mint at another remote chain\n     * @param _token The pegged token address.\n     * @param _amount The amount to burn.\n     * @param _toChainId If zero, withdraw from original vault; otherwise, the remote chain to mint tokens.\n     * @param _toAccount The account to receive tokens on the remote chain\n     * @param _nonce A number to guarantee unique depositId. Can be timestamp in practice.\n     */\n    function burn(\n        address _token,\n        uint256 _amount,\n        uint64 _toChainId,\n        address _toAccount,\n        uint64 _nonce\n    ) external returns (bytes32);\n\n    // same with `burn` above, use openzeppelin ERC20Burnable interface\n    function burnFrom(\n        address _token,\n        uint256 _amount,\n        uint64 _toChainId,\n        address _toAccount,\n        uint64 _nonce\n    ) external returns (bytes32);\n\n    /**\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\n     * @param _request The serialized Mint protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function mint(\n        bytes calldata _request,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external returns (bytes32);\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"
    },
    "contracts/bridges/CBridgeAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../lib/Ownable.sol\";\nimport \"../lib/Pauser.sol\";\nimport \"../lib/MessageSenderLib.sol\";\nimport \"../lib/MessageReceiver.sol\";\nimport \"../lib/NativeWrap.sol\";\nimport \"../lib/Types.sol\";\nimport \"../interfaces/IBridgeAdapter.sol\";\nimport \"../interfaces/IIntermediaryOriginalToken.sol\";\nimport \"../interfaces/IWETH.sol\";\n\ncontract CBridgeAdapter is MessageReceiver, IBridgeAdapter, NativeWrap, Pauser {\n    using SafeERC20 for IERC20;\n\n    constructor(address _nativeWrap, address _messageBus) NativeWrap(_nativeWrap) MessageReceiver(false, _messageBus) {}\n\n    event CBridgeRefunded(uint256 amount, address token, address receiver);\n\n    struct CBridgeParams {\n        // type of the bridge in cBridge to use (i.e. liquidity bridge, pegged token bridge, etc.)\n        MsgDataTypes.BridgeSendType bridgeType;\n        // user defined maximum allowed slippage (pip) at bridge\n        uint32 maxSlippage;\n        // if this field is set, this contract attempts to wrap the input OR src bridge out token\n        // (as specified in the tokenIn field OR the output token in src SwapDescription[]) before\n        // sending to the bridge. This field is determined by the backend when searching for routes\n        address wrappedBridgeToken;\n        // a unique identifier that cBridge uses to dedup transfers\n        // this value is the a timestamp sent from frontend, but in theory can be any unique number\n        uint64 nonce;\n        // because of the unique mechanism of cbridge that it refunds on src chain if bridge fails,\n        // we need to record a refund receiver, typically the end user's address.\n        address refundReceiver;\n    }\n\n    function bridge(\n        uint64 _dstChainId,\n        address _receiver,\n        uint256 _amount,\n        address _token,\n        bytes memory _bridgeParams\n    ) external payable returns (bytes memory bridgeResp) {\n        CBridgeParams memory params = abi.decode((_bridgeParams), (CBridgeParams));\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        if (params.wrappedBridgeToken != address(0)) {\n            address canonical = IIntermediaryOriginalToken(params.wrappedBridgeToken).canonical();\n            require(canonical == _token, \"canonical != _token\");\n            // non-standard implementation: actual token wrapping is done inside the token contract's\n            // transferFrom(). Approving the wrapper token contract to pull the token we intend to\n            // send so that when bridge contract calls wrapper.transferFrom() it automatically pulls\n            // the original token from this contract, wraps it, then transfer the wrapper token from\n            // this contract to bridge.\n            IERC20(_token).safeApprove(params.wrappedBridgeToken, _amount);\n            _token = params.wrappedBridgeToken;\n        }\n\n        // the message sent here is purely used in the face of transfer refund. only the\n        // receiver's address is saved in the message.\n        bytes32 transferId = MessageSenderLib.sendMessageWithTransfer(\n            _receiver,\n            _token,\n            _amount,\n            _dstChainId,\n            params.nonce,\n            params.maxSlippage,\n            abi.encode(params.refundReceiver), // used for refund only\n            params.bridgeType,\n            messageBus,\n            msg.value\n        );\n        if (params.wrappedBridgeToken != address(0)) {\n            IERC20(IIntermediaryOriginalToken(params.wrappedBridgeToken).canonical()).safeApprove(\n                params.wrappedBridgeToken,\n                0\n            );\n        }\n        return abi.encode(transferId);\n    }\n\n    /**\n     * @notice Used to trigger refund when bridging fails due to large slippage\n     * @dev only MessageBus can call this function, this requires the user to get sigs of the message from SGN\n     * @dev Bridge contract *always* sends native token to its receiver (this contract) even though\n     * the _token field is always an ERC20 token\n     * @param _token the token received by this contract\n     * @param _amount the amount of token received by this contract\n     * @return ExecutionStatus a status indicates whether the processing is successful\n     */\n    function executeMessageWithTransferRefund(\n        address _token,\n        uint256 _amount,\n        bytes calldata _message,\n        address // _executor\n    ) external payable onlyMessageBus returns (ExecutionStatus) {\n        require(!paused(), \"MSG::ABORT:paused\"); // revert outter tx\n        address receiver = abi.decode((_message), (address));\n        _wrapBridgeOutToken(_token, _amount);\n        _sendToken(_token, _amount, receiver, false);\n        emit CBridgeRefunded(_amount, _token, receiver);\n        return ExecutionStatus.Success;\n    }\n\n    function _wrapBridgeOutToken(address _token, uint256 _amount) private {\n        if (_token == nativeWrap) {\n            // If the bridge out token is a native wrap, we need to check whether the actual received\n            // token is native token.\n            // Note Assumption: only the liquidity bridge is capable of sending a native wrap\n            address liqBridge = IMessageBus(messageBus).liquidityBridge();\n            // If bridge's nativeWrap is set, then bridge automatically unwraps the token and send\n            // it to this contract. Otherwise the received token in this contract is ERC20\n            if (IBridgeCeler(liqBridge).nativeWrap() == nativeWrap) {\n                IWETH(nativeWrap).deposit{value: _amount}();\n            }\n        }\n    }\n\n    function _sendToken(\n        address _token,\n        uint256 _amount,\n        address _receiver,\n        bool _nativeOut\n    ) private {\n        if (_nativeOut) {\n            require(_token == nativeWrap, \"tk no native\");\n            IWETH(nativeWrap).withdraw(_amount);\n            (bool sent, ) = _receiver.call{value: _amount, gas: 50000}(\"\");\n            require(sent, \"send fail\");\n        } else {\n            IERC20(_token).safeTransfer(_receiver, _amount);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IIntermediaryOriginalToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\ninterface IIntermediaryOriginalToken {\n    function canonical() external view returns (address);\n}\n"
    },
    "contracts/test-helpers/Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../interfaces/IWETH.sol\";\nimport \"./PbPool.sol\";\nimport \"./Pauser.sol\";\nimport \"./VolumeControl.sol\";\nimport \"./DelayedTransfer.sol\";\nimport \"./Signers.sol\";\n\n// add liquidity and withdraw\n// withdraw can be used by user or liquidity provider\n\ncontract Pool is Signers, ReentrancyGuard, Pauser, VolumeControl, DelayedTransfer {\n    using SafeERC20 for IERC20;\n\n    uint64 public addseq; // ensure unique LiquidityAdded event, start from 1\n    mapping(address => uint256) public minAdd; // add _amount must > minAdd\n\n    // map of successful withdraws, if true means already withdrew money or added to delayedTransfers\n    mapping(bytes32 => bool) public withdraws;\n\n    // erc20 wrap of gas token of this chain, eg. WETH, when relay ie. pay out,\n    // if request.token equals this, will withdraw and send native token to receiver\n    // note we don't check whether it's zero address. when this isn't set, and request.token\n    // is all 0 address, guarantee fail\n    address public nativeWrap;\n\n    // liquidity events\n    event LiquidityAdded(\n        uint64 seqnum,\n        address provider,\n        address token,\n        uint256 amount // how many tokens were added\n    );\n    event WithdrawDone(\n        bytes32 withdrawId,\n        uint64 seqnum,\n        address receiver,\n        address token,\n        uint256 amount,\n        bytes32 refid\n    );\n    event MinAddUpdated(address token, uint256 amount);\n\n    /**\n     * @notice Add liquidity to the pool-based bridge.\n     * NOTE: This function DOES NOT SUPPORT fee-on-transfer / rebasing tokens.\n     * NOTE: ONLY call this from an EOA. DO NOT call from a contract address.\n     * @param _token The address of the token.\n     * @param _amount The amount to add.\n     */\n    function addLiquidity(address _token, uint256 _amount) external nonReentrant whenNotPaused {\n        require(_amount > minAdd[_token], \"amount too small\");\n        addseq += 1;\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        emit LiquidityAdded(addseq, msg.sender, _token, _amount);\n    }\n\n    /**\n     * @notice Add native token liquidity to the pool-based bridge.\n     * NOTE: ONLY call this from an EOA. DO NOT call from a contract address.\n     * @param _amount The amount to add.\n     */\n    function addNativeLiquidity(uint256 _amount) external payable nonReentrant whenNotPaused {\n        require(msg.value == _amount, \"Amount mismatch\");\n        require(nativeWrap != address(0), \"Native wrap not set\");\n        require(_amount > minAdd[nativeWrap], \"amount too small\");\n        addseq += 1;\n        IWETH(nativeWrap).deposit{value: _amount}();\n        emit LiquidityAdded(addseq, msg.sender, nativeWrap, _amount);\n    }\n\n    /**\n     * @notice Withdraw funds from the bridge pool.\n     * @param _wdmsg The serialized Withdraw protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\n     * signed-off by +2/3 of the bridge's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function withdraw(\n        bytes calldata _wdmsg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external whenNotPaused {\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"WithdrawMsg\"));\n        verifySigs(abi.encodePacked(domain, _wdmsg), _sigs, _signers, _powers);\n        // decode and check wdmsg\n        PbPool.WithdrawMsg memory wdmsg = PbPool.decWithdrawMsg(_wdmsg);\n        // len = 8 + 8 + 20 + 20 + 32 = 88\n        bytes32 wdId = keccak256(\n            abi.encodePacked(wdmsg.chainid, wdmsg.seqnum, wdmsg.receiver, wdmsg.token, wdmsg.amount)\n        );\n        require(withdraws[wdId] == false, \"withdraw already succeeded\");\n        withdraws[wdId] = true;\n        _updateVolume(wdmsg.token, wdmsg.amount);\n        uint256 delayThreshold = delayThresholds[wdmsg.token];\n        if (delayThreshold > 0 && wdmsg.amount > delayThreshold) {\n            _addDelayedTransfer(wdId, wdmsg.receiver, wdmsg.token, wdmsg.amount);\n        } else {\n            _sendToken(wdmsg.receiver, wdmsg.token, wdmsg.amount);\n        }\n        emit WithdrawDone(wdId, wdmsg.seqnum, wdmsg.receiver, wdmsg.token, wdmsg.amount, wdmsg.refid);\n    }\n\n    function executeDelayedTransfer(bytes32 id) external whenNotPaused {\n        delayedTransfer memory transfer = _executeDelayedTransfer(id);\n        _sendToken(transfer.receiver, transfer.token, transfer.amount);\n    }\n\n    function setMinAdd(address[] calldata _tokens, uint256[] calldata _amounts) external onlyGovernor {\n        require(_tokens.length == _amounts.length, \"length mismatch\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            minAdd[_tokens[i]] = _amounts[i];\n            emit MinAddUpdated(_tokens[i], _amounts[i]);\n        }\n    }\n\n    function _sendToken(\n        address _receiver,\n        address _token,\n        uint256 _amount\n    ) internal {\n        if (_token == nativeWrap) {\n            // withdraw then transfer native to receiver\n            IWETH(nativeWrap).withdraw(_amount);\n            (bool sent, ) = _receiver.call{value: _amount, gas: 50000}(\"\");\n            require(sent, \"failed to send native token\");\n        } else {\n            IERC20(_token).safeTransfer(_receiver, _amount);\n        }\n    }\n\n    // set nativeWrap, for relay requests, if token == nativeWrap, will withdraw first then transfer native to receiver\n    function setWrap(address _weth) external onlyOwner {\n        nativeWrap = _weth;\n    }\n}\n"
    },
    "contracts/test-helpers/PbPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\n// Code generated by protoc-gen-sol. DO NOT EDIT.\n// source: contracts/libraries/proto/pool.proto\npragma solidity 0.8.15;\nimport \"./Pb.sol\";\n\nlibrary PbPool {\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\n\n    struct WithdrawMsg {\n        uint64 chainid; // tag: 1\n        uint64 seqnum; // tag: 2\n        address receiver; // tag: 3\n        address token; // tag: 4\n        uint256 amount; // tag: 5\n        bytes32 refid; // tag: 6\n    } // end struct WithdrawMsg\n\n    function decWithdrawMsg(bytes memory raw) internal pure returns (WithdrawMsg memory m) {\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\n\n        uint256 tag;\n        Pb.WireType wire;\n        while (buf.hasMore()) {\n            (tag, wire) = buf.decKey();\n            if (false) {}\n            // solidity has no switch/case\n            else if (tag == 1) {\n                m.chainid = uint64(buf.decVarint());\n            } else if (tag == 2) {\n                m.seqnum = uint64(buf.decVarint());\n            } else if (tag == 3) {\n                m.receiver = Pb._address(buf.decBytes());\n            } else if (tag == 4) {\n                m.token = Pb._address(buf.decBytes());\n            } else if (tag == 5) {\n                m.amount = Pb._uint256(buf.decBytes());\n            } else if (tag == 6) {\n                m.refid = Pb._bytes32(buf.decBytes());\n            } else {\n                buf.skipValue(wire);\n            } // skip value of unknown tag\n        }\n    } // end decoder WithdrawMsg\n}\n"
    },
    "contracts/test-helpers/Pauser.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\nabstract contract Pauser is Ownable, Pausable {\n    mapping(address => bool) public pausers;\n\n    event PauserAdded(address account);\n    event PauserRemoved(address account);\n\n    constructor() {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender), \"Caller is not pauser\");\n        _;\n    }\n\n    function pause() public onlyPauser {\n        _pause();\n    }\n\n    function unpause() public onlyPauser {\n        _unpause();\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return pausers[account];\n    }\n\n    function addPauser(address account) public onlyOwner {\n        _addPauser(account);\n    }\n\n    function removePauser(address account) public onlyOwner {\n        _removePauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) private {\n        require(!isPauser(account), \"Account is already pauser\");\n        pausers[account] = true;\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) private {\n        require(isPauser(account), \"Account is not pauser\");\n        pausers[account] = false;\n        emit PauserRemoved(account);\n    }\n}\n"
    },
    "contracts/test-helpers/VolumeControl.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.15;\n\nimport \"./Governor.sol\";\n\nabstract contract VolumeControl is Governor {\n    uint256 public epochLength; // seconds\n    mapping(address => uint256) public epochVolumes; // key is token\n    mapping(address => uint256) public epochVolumeCaps; // key is token\n    mapping(address => uint256) public lastOpTimestamps; // key is token\n\n    event EpochLengthUpdated(uint256 length);\n    event EpochVolumeUpdated(address token, uint256 cap);\n\n    function setEpochLength(uint256 _length) external onlyGovernor {\n        epochLength = _length;\n        emit EpochLengthUpdated(_length);\n    }\n\n    function setEpochVolumeCaps(address[] calldata _tokens, uint256[] calldata _caps) external onlyGovernor {\n        require(_tokens.length == _caps.length, \"length mismatch\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            epochVolumeCaps[_tokens[i]] = _caps[i];\n            emit EpochVolumeUpdated(_tokens[i], _caps[i]);\n        }\n    }\n\n    function _updateVolume(address _token, uint256 _amount) internal {\n        if (epochLength == 0) {\n            return;\n        }\n        uint256 cap = epochVolumeCaps[_token];\n        if (cap == 0) {\n            return;\n        }\n        uint256 volume = epochVolumes[_token];\n        uint256 timestamp = block.timestamp;\n        uint256 epochStartTime = (timestamp / epochLength) * epochLength;\n        if (lastOpTimestamps[_token] < epochStartTime) {\n            volume = _amount;\n        } else {\n            volume += _amount;\n        }\n        require(volume <= cap, \"volume exceeds cap\");\n        epochVolumes[_token] = volume;\n        lastOpTimestamps[_token] = timestamp;\n    }\n}\n"
    },
    "contracts/test-helpers/DelayedTransfer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.15;\n\nimport \"./Governor.sol\";\n\nabstract contract DelayedTransfer is Governor {\n    struct delayedTransfer {\n        address receiver;\n        address token;\n        uint256 amount;\n        uint256 timestamp;\n    }\n    mapping(bytes32 => delayedTransfer) public delayedTransfers;\n    mapping(address => uint256) public delayThresholds;\n    uint256 public delayPeriod; // in seconds\n\n    event DelayedTransferAdded(bytes32 id);\n    event DelayedTransferExecuted(bytes32 id, address receiver, address token, uint256 amount);\n\n    event DelayPeriodUpdated(uint256 period);\n    event DelayThresholdUpdated(address token, uint256 threshold);\n\n    function setDelayThresholds(address[] calldata _tokens, uint256[] calldata _thresholds) external onlyGovernor {\n        require(_tokens.length == _thresholds.length, \"length mismatch\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            delayThresholds[_tokens[i]] = _thresholds[i];\n            emit DelayThresholdUpdated(_tokens[i], _thresholds[i]);\n        }\n    }\n\n    function setDelayPeriod(uint256 _period) external onlyGovernor {\n        delayPeriod = _period;\n        emit DelayPeriodUpdated(_period);\n    }\n\n    function _addDelayedTransfer(\n        bytes32 id,\n        address receiver,\n        address token,\n        uint256 amount\n    ) internal {\n        require(delayedTransfers[id].timestamp == 0, \"delayed transfer already exists\");\n        delayedTransfers[id] = delayedTransfer({\n            receiver: receiver,\n            token: token,\n            amount: amount,\n            timestamp: block.timestamp\n        });\n        emit DelayedTransferAdded(id);\n    }\n\n    // caller needs to do the actual token transfer\n    function _executeDelayedTransfer(bytes32 id) internal returns (delayedTransfer memory) {\n        delayedTransfer memory transfer = delayedTransfers[id];\n        require(transfer.timestamp > 0, \"delayed transfer not exist\");\n        require(block.timestamp > transfer.timestamp + delayPeriod, \"delayed transfer still locked\");\n        delete delayedTransfers[id];\n        emit DelayedTransferExecuted(id, transfer.receiver, transfer.token, transfer.amount);\n        return transfer;\n    }\n}\n"
    },
    "contracts/test-helpers/Pb.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.15;\n\n// runtime proto sol library\nlibrary Pb {\n    enum WireType {\n        Varint,\n        Fixed64,\n        LengthDelim,\n        StartGroup,\n        EndGroup,\n        Fixed32\n    }\n\n    struct Buffer {\n        uint256 idx; // the start index of next read. when idx=b.length, we're done\n        bytes b; // hold serialized proto msg, readonly\n    }\n\n    // create a new in-memory Buffer object from raw msg bytes\n    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\n        buf.b = raw;\n        buf.idx = 0;\n    }\n\n    // whether there are unread bytes\n    function hasMore(Buffer memory buf) internal pure returns (bool) {\n        return buf.idx < buf.b.length;\n    }\n\n    // decode current field number and wiretype\n    function decKey(Buffer memory buf) internal pure returns (uint256 tag, WireType wiretype) {\n        uint256 v = decVarint(buf);\n        tag = v / 8;\n        wiretype = WireType(v & 7);\n    }\n\n    // count tag occurrences, return an array due to no memory map support\n    // have to create array for (maxtag+1) size. cnts[tag] = occurrences\n    // should keep buf.idx unchanged because this is only a count function\n    function cntTags(Buffer memory buf, uint256 maxtag) internal pure returns (uint256[] memory cnts) {\n        uint256 originalIdx = buf.idx;\n        cnts = new uint256[](maxtag + 1); // protobuf's tags are from 1 rather than 0\n        uint256 tag;\n        WireType wire;\n        while (hasMore(buf)) {\n            (tag, wire) = decKey(buf);\n            cnts[tag] += 1;\n            skipValue(buf, wire);\n        }\n        buf.idx = originalIdx;\n    }\n\n    // read varint from current buf idx, move buf.idx to next read, return the int value\n    function decVarint(Buffer memory buf) internal pure returns (uint256 v) {\n        bytes10 tmp; // proto int is at most 10 bytes (7 bits can be used per byte)\n        bytes memory bb = buf.b; // get buf.b mem addr to use in assembly\n        v = buf.idx; // use v to save one additional uint variable\n        assembly {\n            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\n        }\n        uint256 b; // store current byte content\n        v = 0; // reset to 0 for return value\n        for (uint256 i = 0; i < 10; i++) {\n            assembly {\n                b := byte(i, tmp) // don't use tmp[i] because it does bound check and costs extra\n            }\n            v |= (b & 0x7F) << (i * 7);\n            if (b & 0x80 == 0) {\n                buf.idx += i + 1;\n                return v;\n            }\n        }\n        revert(); // i=10, invalid varint stream\n    }\n\n    // read length delimited field and return bytes\n    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\n        uint256 len = decVarint(buf);\n        uint256 end = buf.idx + len;\n        require(end <= buf.b.length); // avoid overflow\n        b = new bytes(len);\n        bytes memory bufB = buf.b; // get buf.b mem addr to use in assembly\n        uint256 bStart;\n        uint256 bufBStart = buf.idx;\n        assembly {\n            bStart := add(b, 32)\n            bufBStart := add(add(bufB, 32), bufBStart)\n        }\n        for (uint256 i = 0; i < len; i += 32) {\n            assembly {\n                mstore(add(bStart, i), mload(add(bufBStart, i)))\n            }\n        }\n        buf.idx = end;\n    }\n\n    // return packed ints\n    function decPacked(Buffer memory buf) internal pure returns (uint256[] memory t) {\n        uint256 len = decVarint(buf);\n        uint256 end = buf.idx + len;\n        require(end <= buf.b.length); // avoid overflow\n        // array in memory must be init w/ known length\n        // so we have to create a tmp array w/ max possible len first\n        uint256[] memory tmp = new uint256[](len);\n        uint256 i = 0; // count how many ints are there\n        while (buf.idx < end) {\n            tmp[i] = decVarint(buf);\n            i++;\n        }\n        t = new uint256[](i); // init t with correct length\n        for (uint256 j = 0; j < i; j++) {\n            t[j] = tmp[j];\n        }\n        return t;\n    }\n\n    // move idx pass current value field, to beginning of next tag or msg end\n    function skipValue(Buffer memory buf, WireType wire) internal pure {\n        if (wire == WireType.Varint) {\n            decVarint(buf);\n        } else if (wire == WireType.LengthDelim) {\n            uint256 len = decVarint(buf);\n            buf.idx += len; // skip len bytes value data\n            require(buf.idx <= buf.b.length); // avoid overflow\n        } else {\n            revert();\n        } // unsupported wiretype\n    }\n\n    // type conversion help utils\n    function _bool(uint256 x) internal pure returns (bool v) {\n        return x != 0;\n    }\n\n    function _uint256(bytes memory b) internal pure returns (uint256 v) {\n        require(b.length <= 32); // b's length must be smaller than or equal to 32\n        assembly {\n            v := mload(add(b, 32))\n        } // load all 32bytes to v\n        v = v >> (8 * (32 - b.length)); // only first b.length is valid\n    }\n\n    function _address(bytes memory b) internal pure returns (address v) {\n        v = _addressPayable(b);\n    }\n\n    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\n        require(b.length == 20);\n        //load 32bytes then shift right 12 bytes\n        assembly {\n            v := div(mload(add(b, 32)), 0x1000000000000000000000000)\n        }\n    }\n\n    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\n        require(b.length == 32);\n        assembly {\n            v := mload(add(b, 32))\n        }\n    }\n\n    // uint[] to uint8[]\n    function uint8s(uint256[] memory arr) internal pure returns (uint8[] memory t) {\n        t = new uint8[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = uint8(arr[i]);\n        }\n    }\n\n    function uint32s(uint256[] memory arr) internal pure returns (uint32[] memory t) {\n        t = new uint32[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = uint32(arr[i]);\n        }\n    }\n\n    function uint64s(uint256[] memory arr) internal pure returns (uint64[] memory t) {\n        t = new uint64[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = uint64(arr[i]);\n        }\n    }\n\n    function bools(uint256[] memory arr) internal pure returns (bool[] memory t) {\n        t = new bool[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = arr[i] != 0;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/test-helpers/Governor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nabstract contract Governor is Ownable {\n    mapping(address => bool) public governors;\n\n    event GovernorAdded(address account);\n    event GovernorRemoved(address account);\n\n    modifier onlyGovernor() {\n        require(isGovernor(msg.sender), \"Caller is not governor\");\n        _;\n    }\n\n    constructor() {\n        _addGovernor(msg.sender);\n    }\n\n    function isGovernor(address _account) public view returns (bool) {\n        return governors[_account];\n    }\n\n    function addGovernor(address _account) public onlyOwner {\n        _addGovernor(_account);\n    }\n\n    function removeGovernor(address _account) public onlyOwner {\n        _removeGovernor(_account);\n    }\n\n    function renounceGovernor() public {\n        _removeGovernor(msg.sender);\n    }\n\n    function _addGovernor(address _account) private {\n        require(!isGovernor(_account), \"Account is already governor\");\n        governors[_account] = true;\n        emit GovernorAdded(_account);\n    }\n\n    function _removeGovernor(address _account) private {\n        require(isGovernor(_account), \"Account is not governor\");\n        governors[_account] = false;\n        emit GovernorRemoved(_account);\n    }\n}\n"
    },
    "contracts/test-helpers/PbBridge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\n// Code generated by protoc-gen-sol. DO NOT EDIT.\n// source: bridge.proto\npragma solidity 0.8.15;\nimport \"./Pb.sol\";\n\nlibrary PbBridge {\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\n\n    struct Relay {\n        address sender; // tag: 1\n        address receiver; // tag: 2\n        address token; // tag: 3\n        uint256 amount; // tag: 4\n        uint64 srcChainId; // tag: 5\n        uint64 dstChainId; // tag: 6\n        bytes32 srcTransferId; // tag: 7\n    } // end struct Relay\n\n    function decRelay(bytes memory raw) internal pure returns (Relay memory m) {\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\n\n        uint256 tag;\n        Pb.WireType wire;\n        while (buf.hasMore()) {\n            (tag, wire) = buf.decKey();\n            if (false) {}\n            // solidity has no switch/case\n            else if (tag == 1) {\n                m.sender = Pb._address(buf.decBytes());\n            } else if (tag == 2) {\n                m.receiver = Pb._address(buf.decBytes());\n            } else if (tag == 3) {\n                m.token = Pb._address(buf.decBytes());\n            } else if (tag == 4) {\n                m.amount = Pb._uint256(buf.decBytes());\n            } else if (tag == 5) {\n                m.srcChainId = uint64(buf.decVarint());\n            } else if (tag == 6) {\n                m.dstChainId = uint64(buf.decVarint());\n            } else if (tag == 7) {\n                m.srcTransferId = Pb._bytes32(buf.decBytes());\n            } else {\n                buf.skipValue(wire);\n            } // skip value of unknown tag\n        }\n    } // end decoder Relay\n}\n"
    },
    "contracts/test-helpers/Bridge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./PbBridge.sol\";\nimport \"./Pool.sol\";\n\ncontract Bridge is Pool {\n    using SafeERC20 for IERC20;\n\n    // liquidity events\n    event Send(\n        bytes32 transferId,\n        address sender,\n        address receiver,\n        address token,\n        uint256 amount,\n        uint64 dstChainId,\n        uint64 nonce,\n        uint32 maxSlippage\n    );\n    event Relay(\n        bytes32 transferId,\n        address sender,\n        address receiver,\n        address token,\n        uint256 amount,\n        uint64 srcChainId,\n        bytes32 srcTransferId\n    );\n    // gov events\n    event MinSendUpdated(address token, uint256 amount);\n    event MaxSendUpdated(address token, uint256 amount);\n\n    mapping(bytes32 => bool) public transfers;\n    mapping(address => uint256) public minSend; // send _amount must > minSend\n    mapping(address => uint256) public maxSend;\n\n    // min allowed max slippage uint32 value is slippage * 1M, eg. 0.5% -> 5000\n    uint32 public minimalMaxSlippage;\n\n    /**\n     * @notice Send a cross-chain transfer via the liquidity pool-based bridge.\n     * NOTE: This function DOES NOT SUPPORT fee-on-transfer / rebasing tokens.\n     * @param _receiver The address of the receiver.\n     * @param _token The address of the token.\n     * @param _amount The amount of the transfer.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\n     * transfer can be refunded.\n     */\n    function send(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage // slippage * 1M, eg. 0.5% -> 5000\n    ) external nonReentrant whenNotPaused {\n        bytes32 transferId = _send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        emit Send(transferId, msg.sender, _receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\n    }\n\n    /**\n     * @notice Send a cross-chain transfer via the liquidity pool-based bridge using the native token.\n     * @param _receiver The address of the receiver.\n     * @param _amount The amount of the transfer.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A unique number. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\n     * transfer can be refunded.\n     */\n    function sendNative(\n        address _receiver,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage\n    ) external payable nonReentrant whenNotPaused {\n        require(msg.value == _amount, \"Amount mismatch\");\n        require(nativeWrap != address(0), \"Native wrap not set\");\n        bytes32 transferId = _send(_receiver, nativeWrap, _amount, _dstChainId, _nonce, _maxSlippage);\n        IWETH(nativeWrap).deposit{value: _amount}();\n        emit Send(transferId, msg.sender, _receiver, nativeWrap, _amount, _dstChainId, _nonce, _maxSlippage);\n    }\n\n    function _send(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage\n    ) private returns (bytes32) {\n        require(_amount > minSend[_token], \"amount too small\");\n        require(maxSend[_token] == 0 || _amount <= maxSend[_token], \"amount too large\");\n        require(_maxSlippage > minimalMaxSlippage, \"max slippage too small\");\n        bytes32 transferId = keccak256(\n            // uint64(block.chainid) for consistency as entire system uses uint64 for chain id\n            // len = 20 + 20 + 20 + 32 + 8 + 8 + 8 = 116\n            abi.encodePacked(msg.sender, _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\n        );\n        require(transfers[transferId] == false, \"transfer exists\");\n        transfers[transferId] = true;\n        return transferId;\n    }\n\n    /**\n     * @notice Relay a cross-chain transfer sent from a liquidity pool-based bridge on another chain.\n     * @param _relayRequest The serialized Relay protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the bridge's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function relay(\n        bytes calldata _relayRequest,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external whenNotPaused {\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"Relay\"));\n        verifySigs(abi.encodePacked(domain, _relayRequest), _sigs, _signers, _powers);\n        PbBridge.Relay memory request = PbBridge.decRelay(_relayRequest);\n        // len = 20 + 20 + 20 + 32 + 8 + 8 + 32 = 140\n        bytes32 transferId = keccak256(\n            abi.encodePacked(\n                request.sender,\n                request.receiver,\n                request.token,\n                request.amount,\n                request.srcChainId,\n                request.dstChainId,\n                request.srcTransferId\n            )\n        );\n        require(transfers[transferId] == false, \"transfer exists\");\n        transfers[transferId] = true;\n        _updateVolume(request.token, request.amount);\n        uint256 delayThreshold = delayThresholds[request.token];\n        if (delayThreshold > 0 && request.amount > delayThreshold) {\n            _addDelayedTransfer(transferId, request.receiver, request.token, request.amount);\n        } else {\n            _sendToken(request.receiver, request.token, request.amount);\n        }\n\n        emit Relay(\n            transferId,\n            request.sender,\n            request.receiver,\n            request.token,\n            request.amount,\n            request.srcChainId,\n            request.srcTransferId\n        );\n    }\n\n    function setMinSend(address[] calldata _tokens, uint256[] calldata _amounts) external onlyGovernor {\n        require(_tokens.length == _amounts.length, \"length mismatch\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            minSend[_tokens[i]] = _amounts[i];\n            emit MinSendUpdated(_tokens[i], _amounts[i]);\n        }\n    }\n\n    function setMaxSend(address[] calldata _tokens, uint256[] calldata _amounts) external onlyGovernor {\n        require(_tokens.length == _amounts.length, \"length mismatch\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            maxSend[_tokens[i]] = _amounts[i];\n            emit MaxSendUpdated(_tokens[i], _amounts[i]);\n        }\n    }\n\n    function setMinimalMaxSlippage(uint32 _minimalMaxSlippage) external onlyGovernor {\n        minimalMaxSlippage = _minimalMaxSlippage;\n    }\n\n    // This is needed to receive ETH when calling `IWETH.withdraw`\n    receive() external payable {}\n}\n"
    },
    "contracts/bridges/StargateAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../interfaces/IBridgeAdapter.sol\";\nimport \"../interfaces/IBridgeStargate.sol\";\nimport \"../interfaces/IWETH.sol\";\n\nimport \"../lib/NativeWrap.sol\";\nimport \"../lib/Ownable.sol\";\n\ncontract StargateAdapter is IBridgeAdapter, NativeWrap {\n    using SafeERC20 for IERC20;\n\n    mapping(address => bool) public supportedRouters;\n    mapping(bytes32 => bool) public transfers;\n\n    event SupportedRouterUpdated(address router, bool enabled);\n\n    constructor(address _nativeWrap, address[] memory _routers) NativeWrap(_nativeWrap) {\n        for (uint256 i = 0; i < _routers.length; i++) {\n            require(_routers[i] != address(0), \"nop\");\n            supportedRouters[_routers[i]] = true;\n        }\n    }\n\n    struct StargateParams {\n        // a unique identifier that is uses to dedup transfers\n        // this value is the a timestamp sent from frontend, but in theory can be any unique number\n        uint64 nonce;\n        uint256 srcPoolId;\n        uint256 dstPoolId;\n        uint256 minReceivedAmt; // defines the slippage, the min qty you would accept on the destination\n        uint16 stargateDstChainId; // stargate defines chain id in its way\n        address router; // the target router, should be in the <ref>supportedRouters</ref>\n    }\n\n    function bridge(\n        uint64 _dstChainId,\n        address _receiver,\n        uint256 _amount,\n        address _token,\n        bytes memory _bridgeParams\n    ) external payable returns (bytes memory bridgeResp) {\n        StargateParams memory params = abi.decode((_bridgeParams), (StargateParams));\n        require(supportedRouters[params.router], \"illegal router\");\n\n        bytes32 transferId = keccak256(\n            abi.encodePacked(_receiver, _token, _amount, _dstChainId, params.nonce, uint64(block.chainid))\n        );\n        require(transfers[transferId] == false, \"transfer exists\");\n        transfers[transferId] = true;\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        uint64 outboundNonce = swap(_token, _receiver, _amount, params);\n        return abi.encodePacked(outboundNonce);\n    }\n\n    function swap(\n        address _token,\n        address _receiver,\n        uint256 _amount,\n        StargateParams memory params\n    ) private returns (uint64 outboundNonce) {\n        IBridgeStargate router = IBridgeStargate(params.router);\n        if (_token == nativeWrap) {\n            IWETH(_token).withdraw(_amount);\n            router.swapETH{value: msg.value + _amount}(\n                params.stargateDstChainId,\n                payable(_receiver),\n                abi.encodePacked(_receiver),\n                _amount,\n                params.minReceivedAmt\n            );\n        } else {\n            IERC20(_token).safeApprove(params.router, _amount);\n            router.swap{value: msg.value}(\n                params.stargateDstChainId,\n                params.srcPoolId,\n                params.dstPoolId,\n                payable(_receiver),\n                _amount,\n                params.minReceivedAmt,\n                IBridgeStargate.lzTxObj(0, 0, \"0x\"),\n                abi.encodePacked(_receiver),\n                bytes(\"\") // not supported additional msg in this version\n            );\n            IERC20(_token).safeApprove(params.router, 0);\n        }\n\n        // query current nonce\n        address stargateInternalBridge;\n        if (_token == nativeWrap) {\n            stargateInternalBridge = IBridgeStargate(router.stargateRouter()).bridge();\n        } else {\n            stargateInternalBridge = router.bridge();\n        }\n        address layerZeroEndpoint = IStargateInternalBridge(stargateInternalBridge).layerZeroEndpoint();\n        outboundNonce = ILayerZeroEndpoint(layerZeroEndpoint).getOutboundNonce(\n            params.stargateDstChainId,\n            stargateInternalBridge\n        );\n    }\n\n    function setSupportedRouter(address _router, bool _enabled) external onlyOwner {\n        bool enabled = supportedRouters[_router];\n        require(enabled != _enabled, \"nop\");\n        supportedRouters[_router] = _enabled;\n        emit SupportedRouterUpdated(_router, _enabled);\n    }\n}\n"
    },
    "contracts/interfaces/IBridgeStargate.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\ninterface IBridgeStargate {\n    struct lzTxObj {\n        uint256 dstGasForCall;\n        uint256 dstNativeAmount;\n        bytes dstNativeAddr;\n    }\n\n    // only in non RouterETH\n    function swap(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        lzTxObj memory _lzTxParams,\n        bytes calldata _to,\n        bytes calldata _payload\n    ) external payable;\n\n    // only in non RouterETH\n    function bridge() external pure returns (address);\n\n    // only in RouterETH\n    function swapETH(\n        uint16 _dstChainId, // destination Stargate chainId\n        address payable _refundAddress, // refund additional messageFee to this address\n        bytes calldata _toAddress, // the receiver of the destination ETH\n        uint256 _amountLD, // the amount, in Local Decimals, to be swapped\n        uint256 _minAmountLD // the minimum amount accepted out on destination\n    ) external payable;\n\n    // only in RouterETH\n    function stargateRouter() external pure returns (address);\n}\n\ninterface IStargateInternalBridge {\n    event SendMsg(uint8 msgType, uint64 nonce);\n\n    function layerZeroEndpoint() external pure returns (address);\n}\n\ninterface ILayerZeroEndpoint {\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\n}\n"
    },
    "contracts/bridges/HyphenAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../interfaces/IBridgeAdapter.sol\";\nimport \"../interfaces/IHyphenLiquidityPool.sol\";\nimport \"../interfaces/IWETH.sol\";\n\nimport \"../lib/NativeWrap.sol\";\nimport \"../lib/Ownable.sol\";\n\ncontract HyphenAdapter is IBridgeAdapter, NativeWrap {\n    using SafeERC20 for IERC20;\n\n    address public pool;\n\n    event PoolUpdated(address pool);\n\n    constructor(address _pool, address _nativeWrap) NativeWrap(_nativeWrap) {\n        require(_pool != address(0), \"zero address\");\n        pool = _pool;\n    }\n\n    function bridge(\n        uint64 _dstChainId,\n        address _receiver,\n        uint256 _amount,\n        address _token,\n        bytes memory // _bridgeParams\n    ) external payable returns (bytes memory bridgeResp) {\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        if (_token == nativeWrap) {\n            // depositErc20 doesn't work for WETH, so we have to convert it back to native first\n            IWETH(nativeWrap).withdraw(_amount);\n            IHyphenLiquidityPool(pool).depositNative{value: _amount}(_receiver, _dstChainId, \"chainhop\");\n        } else {\n            IERC20(_token).safeIncreaseAllowance(pool, _amount);\n            IHyphenLiquidityPool(pool).depositErc20(_dstChainId, _token, _receiver, _amount, \"chainhop\");\n        }\n        // hyphen uses src tx hash to track history so bridgeResp is not needed. returning empty\n        return bridgeResp;\n    }\n\n    function setPool(address _pool) external onlyOwner {\n        pool = _pool;\n        emit PoolUpdated(_pool);\n    }\n}\n"
    },
    "contracts/interfaces/IHyphenLiquidityPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface IHyphenLiquidityPool {\n    function depositErc20(\n        uint256 toChainId,\n        address tokenAddress,\n        address receiver,\n        uint256 amount,\n        string calldata tag\n    ) external;\n\n    function depositNative(\n        address receiver,\n        uint256 toChainId,\n        string calldata tag\n    ) external payable;\n}\n"
    },
    "contracts/bridges/HopAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../interfaces/IBridgeAdapter.sol\";\nimport \"../interfaces/IWETH.sol\";\nimport \"../interfaces/IHopBridge.sol\";\n\nimport \"../lib/NativeWrap.sol\";\nimport \"../lib/Ownable.sol\";\n\ncontract HopAdapter is IBridgeAdapter, NativeWrap {\n    using SafeERC20 for IERC20;\n\n    bool public immutable isL1;\n\n    mapping(address => address) public bridges;\n\n    event BridgeUpdated(address[] tokens, address[] bridges);\n\n    constructor(\n        address[] memory _tokens,\n        address[] memory _bridges,\n        bool _isL1,\n        address _nativeWrap\n    ) NativeWrap(_nativeWrap) {\n        isL1 = _isL1;\n        _setBridges(_tokens, _bridges);\n    }\n\n    struct BridgeParams {\n        uint256 amountOutMin;\n        uint256 deadline;\n        uint256 bonderFee;\n    }\n\n    function bridge(\n        uint64 _dstChainId,\n        address _receiver,\n        uint256 _amount,\n        address _token,\n        bytes memory _bridgeParams\n    ) external payable returns (bytes memory bridgeResp) {\n        BridgeParams memory p = abi.decode(_bridgeParams, (BridgeParams));\n        address _bridge = bridges[_token];\n        require(_bridge != address(0), \"bridge not found\");\n\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n\n        if (isL1) {\n            uint256 value;\n            if (_token == nativeWrap) {\n                IWETH(_token).withdraw(_amount);\n                value = _amount;\n            } else {\n                IERC20(_token).safeIncreaseAllowance(_bridge, _amount);\n            }\n            IHopBridge(_bridge).sendToL2{value: value}(\n                _dstChainId,\n                _receiver,\n                _amount,\n                p.amountOutMin,\n                p.deadline,\n                address(0),\n                0\n            );\n        } else {\n            uint256 value;\n            if (_token == nativeWrap && IHopBridge(_bridge).l2CanonicalTokenIsEth()) {\n                IWETH(_token).withdraw(_amount);\n                value = _amount;\n            } else {\n                IERC20(_token).safeIncreaseAllowance(_bridge, _amount);\n            }\n            IHopBridge(_bridge).swapAndSend{value: value}(\n                _dstChainId,\n                _receiver,\n                _amount,\n                p.bonderFee,\n                p.amountOutMin,\n                p.deadline,\n                p.amountOutMin,\n                p.deadline\n            );\n        }\n        return bridgeResp;\n    }\n\n    function setBridges(address[] calldata _tokens, address[] calldata _bridges) external onlyOwner {\n        _setBridges(_tokens, _bridges);\n    }\n\n    function _setBridges(address[] memory _tokens, address[] memory _bridges) private {\n        require(_tokens.length == _bridges.length, \"len mismatch\");\n        for (uint8 i = 0; i < _tokens.length; i++) {\n            bridges[_tokens[i]] = _bridges[i];\n        }\n        emit BridgeUpdated(_tokens, _bridges);\n    }\n}\n"
    },
    "contracts/interfaces/IHopBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ninterface IHopBridge {\n    // functions in Hop's L1Bridge\n    function sendToL2(\n        uint256 chainId,\n        address recipient,\n        uint256 amount,\n        uint256 amountOutMin,\n        uint256 deadline,\n        address relayer,\n        uint256 relayerFee\n    ) external payable;\n\n    // functions in Hop's AMM wrapper\n    function l2CanonicalTokenIsEth() external view returns (bool);\n\n    function swapAndSend(\n        uint256 chainId,\n        address recipient,\n        uint256 amount,\n        uint256 bonderFee,\n        uint256 amountOutMin,\n        uint256 deadline,\n        uint256 destinationAmountOutMin,\n        uint256 destinationDeadline\n    ) external payable;\n}\n"
    },
    "contracts/bridges/AnyswapAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../interfaces/IBridgeAdapter.sol\";\nimport \"../interfaces/IBridgeAnyswap.sol\";\n\nimport \"../lib/Ownable.sol\";\n\ncontract AnyswapAdapter is IBridgeAdapter, Ownable {\n    using SafeERC20 for IERC20;\n\n    mapping(address => bool) public supportedRouters;\n    mapping(bytes32 => bool) public transfers;\n\n    event SupportedRouterUpdated(address router, bool enabled);\n\n    constructor(address[] memory _anyswapRouters) {\n        for (uint256 i = 0; i < _anyswapRouters.length; i++) {\n            require(_anyswapRouters[i] != address(0), \"nop\");\n            supportedRouters[_anyswapRouters[i]] = true;\n        }\n    }\n\n    struct AnyswapParams {\n        // a unique identifier that is uses to dedup transfers\n        // this value is the a timestamp sent from frontend, but in theory can be any unique number\n        uint64 nonce;\n        // the wrapped any token of the native\n        address anyToken;\n        // the target anyswap Router, should be in the <ref>supportedRouters</ref>\n        address router;\n    }\n\n    function bridge(\n        uint64 _dstChainId,\n        address _receiver,\n        uint256 _amount,\n        address _token, // Note, here uses the address of the native\n        bytes memory _bridgeParams\n    ) external payable returns (bytes memory bridgeResp) {\n        AnyswapParams memory params = abi.decode((_bridgeParams), (AnyswapParams));\n        require(supportedRouters[params.router], \"illegal router\");\n\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        IERC20(_token).safeApprove(params.router, _amount);\n        if (IUnderlying(params.anyToken).underlying() != address(0)) {\n            IBridgeAnyswap(params.router).anySwapOutUnderlying(params.anyToken, _receiver, _amount, _dstChainId);\n        } else {\n            IBridgeAnyswap(params.router).anySwapOut(params.anyToken, _receiver, _amount, _dstChainId);\n        }\n        IERC20(_token).safeApprove(params.router, 0);\n        return bridgeResp;\n    }\n\n    function setSupportedRouter(address _router, bool _enabled) external onlyOwner {\n        bool enabled = supportedRouters[_router];\n        require(enabled != _enabled, \"nop\");\n        supportedRouters[_router] = _enabled;\n        emit SupportedRouterUpdated(_router, _enabled);\n    }\n}\n"
    },
    "contracts/interfaces/IBridgeAnyswap.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\ninterface IBridgeAnyswap {\n\n    // Swaps `amount` `token` from this chain to `toChainID` chain with recipient `to`\n    function anySwapOut(address token, address to, uint amount, uint toChainID) external;\n\n    // Swaps `amount` `token` from this chain to `toChainID` chain with recipient `to` by minting with `underlying`\n    function anySwapOutUnderlying(address token, address to, uint amount, uint toChainID) external;\n}\n\ninterface IUnderlying {\n    function underlying() external view returns (address);\n}"
    },
    "contracts/test-helpers/Mock1inch.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract Mock1inch {\n    using SafeERC20 for IERC20;\n\n    function swap(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address to,\n        address srcToken,\n        address dstToken\n    )\n    external\n    payable\n    {\n        // fake dex\n        IERC20(srcToken).safeTransferFrom(msg.sender, address(this), amountIn);\n        IERC20(dstToken).safeTransfer(to, amountOutMin);\n        return;\n    }\n}"
    },
    "contracts/test-helpers/MinimalUniswapV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract MinimalUniswapV2 {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256,\n        address[] calldata path,\n        address to,\n        uint256\n    ) external returns (uint256[] memory amounts) {\n        amounts = new uint256[](2);\n        amounts[0] = amountIn;\n        amounts[1] = amountIn;\n        IERC20(path[path.length - 1]).transfer(to, amountIn);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}