{
  "address": "0xF762C3fC745948fF49a3dA00CCdC6b755e44305e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nativeWrap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "_funcSigs",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "_codecs",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_supportedDexList",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "_supportedDexFuncs",
          "type": "string[]"
        },
        {
          "internalType": "bool",
          "name": "_testMode",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "codec",
          "type": "address"
        }
      ],
      "name": "CodecUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "DirectSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "messageBus",
          "type": "address"
        }
      ],
      "name": "MessageBusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nativeWrap",
          "type": "address"
        }
      ],
      "name": "NativeWrapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dstAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "refundToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeCollected",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Types.RequestStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "forwardResp",
          "type": "bytes"
        }
      ],
      "name": "RequestDone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "bridgeResp",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "dstChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "srcAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "srcToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dstToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridgeOutReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridgeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bridgeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "bridgeProvider",
          "type": "string"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "SignerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "_bridgeProviders",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_bridgeAdapters",
          "type": "address[]"
        }
      ],
      "name": "SupportedBridgesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dex",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SupportedDexUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CBRIDGE_PROVIDER_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "bridges",
      "outputs": [
        {
          "internalType": "contract IBridgeAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "codecs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "collectFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "dexRegistry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "executeMessage",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransfer",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransferFallback",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransferRefund",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransferRefundFromAdapter",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageBus",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeWrap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "selector2codec",
      "outputs": [
        {
          "internalType": "contract ICodec",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_funcSig",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_codec",
          "type": "address"
        }
      ],
      "name": "setCodec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "setFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        }
      ],
      "name": "setMessageBus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nativeWrap",
          "type": "address"
        }
      ],
      "name": "setNativeWrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_bridgeProviders",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "_bridgeAdapters",
          "type": "address[]"
        }
      ],
      "name": "setSupportedBridges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dex",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_selector",
          "type": "bytes4"
        },
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "setSupportedDex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "dstChainId",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "dstTransferSwapper",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "string",
              "name": "bridgeProvider",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "bridgeParams",
              "type": "bytes"
            },
            {
              "internalType": "bool",
              "name": "nativeIn",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "nativeOut",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeDeadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "feeSig",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dstTokenOut",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "allowPartialFill",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "forward",
              "type": "bytes"
            }
          ],
          "internalType": "struct Types.TransferDescription",
          "name": "_desc",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "dex",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICodec.SwapDescription[]",
          "name": "_srcSwaps",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "dex",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICodec.SwapDescription[]",
          "name": "_dstSwaps",
          "type": "tuple[]"
        }
      ],
      "name": "transferWithSwap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb2d7b14c52d0f04248a5126aa7be7316e3fb72891e93b48bc3e3789e2acf2c41",
  "receipt": {
    "to": null,
    "from": "0x8b5F94a2c2e23eE8cC0Ff56872aF973243eF7628",
    "contractAddress": "0xF762C3fC745948fF49a3dA00CCdC6b755e44305e",
    "transactionIndex": 0,
    "gasUsed": "5405218",
    "logsBloom": "0x
    "blockHash": "0x4db923bd33494bc10d51092e41b751bc03aa9d251d8d3f2da950fdc92bae091f",
    "transactionHash": "0xb2d7b14c52d0f04248a5126aa7be7316e3fb72891e93b48bc3e3789e2acf2c41",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 30038418,
        "transactionHash": "0xb2d7b14c52d0f04248a5126aa7be7316e3fb72891e93b48bc3e3789e2acf2c41",
        "address": "0xF762C3fC745948fF49a3dA00CCdC6b755e44305e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b5f94a2c2e23ee8cc0ff56872af973243ef7628"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4db923bd33494bc10d51092e41b751bc03aa9d251d8d3f2da950fdc92bae091f"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 30038418,
        "transactionHash": "0xb2d7b14c52d0f04248a5126aa7be7316e3fb72891e93b48bc3e3789e2acf2c41",
        "address": "0xF762C3fC745948fF49a3dA00CCdC6b755e44305e",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8"
        ],
        "data": "0x0000000000000000000000008b5f94a2c2e23ee8cc0ff56872af973243ef7628",
        "logIndex": 1,
        "blockHash": "0x4db923bd33494bc10d51092e41b751bc03aa9d251d8d3f2da950fdc92bae091f"
      }
    ],
    "blockNumber": 30038418,
    "cumulativeGasUsed": "5405218",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0D71D18126E03646eb09FEc929e2ae87b7CAE69d",
    "0x4200000000000000000000000000000000000006",
    "0x26e6eAf3D3C5d4B8290AA7dd896140f383dFf043",
    "0xf0761BB438CeFca39A8fd1F27d75ccC7F6Df92d8",
    [
      "exactInput((bytes,address,uint256,uint256,uint256))",
      "clipperSwap(address,address,uint256,uint256)",
      "unoswap(address,uint256,uint256,bytes32[])",
      "uniswapV3Swap(uint256,uint256,uint256[])",
      "fillOrderRFQ((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256)"
    ],
    [
      "0x9780F24a4696c59FE935f33Dd307884B1F05A56d",
      "0xf26055894aeaAe23d136dEfAa355A041a43D7DFd",
      "0xf26055894aeaAe23d136dEfAa355A041a43D7DFd",
      "0xf26055894aeaAe23d136dEfAa355A041a43D7DFd",
      "0xf26055894aeaAe23d136dEfAa355A041a43D7DFd"
    ],
    [
      "0xE592427A0AEce92De3Edee1F18E0157C05861564",
      "0x1111111254760f7ab3f16433eea9304126dcd199",
      "0x1111111254760f7ab3f16433eea9304126dcd199",
      "0x1111111254760f7ab3f16433eea9304126dcd199",
      "0x1111111254760f7ab3f16433eea9304126dcd199",
      "0x1111111254760f7ab3f16433eea9304126dcd199"
    ],
    [
      "exactInput((bytes,address,uint256,uint256,uint256))",
      "swap(address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes)",
      "clipperSwap(address,address,uint256,uint256)",
      "unoswap(address,uint256,uint256,bytes32[])",
      "uniswapV3Swap(uint256,uint256,uint256[])",
      "fillOrderRFQ((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256)"
    ],
    false
  ],
  "numDeployments": 4,
  "solcInputHash": "a75841212acef808aea6466c645556ea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeWrap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_funcSigs\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_codecs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_supportedDexList\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_supportedDexFuncs\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"_testMode\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"codec\",\"type\":\"address\"}],\"name\":\"CodecUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"DirectSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messageBus\",\"type\":\"address\"}],\"name\":\"MessageBusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nativeWrap\",\"type\":\"address\"}],\"name\":\"NativeWrapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refundToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeCollected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Types.RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"forwardResp\",\"type\":\"bytes\"}],\"name\":\"RequestDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bridgeResp\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeOutReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"bridgeProvider\",\"type\":\"string\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SignerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_bridgeProviders\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_bridgeAdapters\",\"type\":\"address[]\"}],\"name\":\"SupportedBridgesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SupportedDexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CBRIDGE_PROVIDER_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bridges\",\"outputs\":[{\"internalType\":\"contract IBridgeAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"codecs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"dexRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransfer\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransferFallback\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransferRefund\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransferRefundFromAdapter\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeWrap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"selector2codec\",\"outputs\":[{\"internalType\":\"contract ICodec\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_funcSig\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_codec\",\"type\":\"address\"}],\"name\":\"setCodec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"name\":\"setMessageBus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nativeWrap\",\"type\":\"address\"}],\"name\":\"setNativeWrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_bridgeProviders\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_bridgeAdapters\",\"type\":\"address[]\"}],\"name\":\"setSupportedBridges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dex\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSupportedDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"dstTransferSwapper\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"bridgeProvider\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"bridgeParams\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"nativeIn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nativeOut\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"feeSig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstTokenOut\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowPartialFill\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"forward\",\"type\":\"bytes\"}],\"internalType\":\"struct Types.TransferDescription\",\"name\":\"_desc\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICodec.SwapDescription[]\",\"name\":\"_srcSwaps\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICodec.SwapDescription[]\",\"name\":\"_dstSwaps\",\"type\":\"tuple[]\"}],\"name\":\"transferWithSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Chainhop Dex TeamPadoriku\",\"events\":{\"DirectSwap(bytes32,uint256,address,uint256,address)\":{\"params\":{\"amountIn\":\"the input amount approved by the sender\",\"amountOut\":\"the output amount gained after swapping using the input tokens\",\"id\":\"see _computeId()\",\"tokenIn\":\"the input token approved by the sender\",\"tokenOut\":\"the output token gained after swapping using the input tokens\"}},\"RequestDone(bytes32,uint256,uint256,address,uint256,uint8,bytes)\":{\"details\":\"refundAmount may be fill by either a complete refund or when allowPartialFill is on and some swaps fails in the swap routes\",\"params\":{\"dstAmount\":\"the final output token (after bridging and swapping) desired by the sender\",\"feeCollected\":\"the fee chainhop deducts from bridge out token\",\"id\":\"see _computeId()\",\"refundAmount\":\"the amount refunded to the receiver in bridge token\",\"refundToken\":\"bridge out token\",\"status\":\"see RequestStatus\"}},\"RequestSent(bytes32,bytes,uint64,uint256,address,address,address,address,uint256,string)\":{\"params\":{\"bridgeAmount\":\"the amount of the bridgeToken to bridge\",\"bridgeOutReceiver\":\"the receiver (user or dst TransferSwapper) of the bridge token\",\"bridgeProvider\":\"the bridge provider\",\"bridgeResp\":\"arbitrary response data returned by bridge\",\"bridgeToken\":\"the token used for bridging\",\"dstChainId\":\"destination chain id\",\"dstToken\":\"the final output token (after bridging and swapping) desired by the sender\",\"id\":\"see _computeId()\",\"srcAmount\":\"input amount approved by the sender\",\"srcToken\":\"the input token approved by the sender\"}}},\"kind\":\"dev\",\"methods\":{\"executeMessage(address,uint64,bytes,address)\":{\"params\":{\"_executor\":\"Address who called the MessageBus execution function\",\"_message\":\"Arbitrary message bytes originated from and encoded by the source app contract\",\"_sender\":\"The address of the source app contract\",\"_srcChainId\":\"The source chain ID where the transfer is originated from\"}},\"executeMessageWithTransfer(address,address,uint256,uint64,bytes,address)\":{\"details\":\"If allowPartialFill is off, this function reverts as soon as one swap in swap routes failsThis function is called and is only callable by MessageBus. The transaction of such call is triggered by executor.Bridge contract *always* sends native token to its receiver (this contract) even though the _token field is always an ERC20 token\",\"params\":{\"_amount\":\"the amount of token received by this contract\",\"_token\":\"the token received by this contract\"},\"returns\":{\"_0\":\"ok whether the processing is successful\"}},\"executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)\":{\"details\":\"Only called if executeMessageWithTransfer revertsBridge contract *always* sends native token to its receiver (this contract) even though the _token field is always an ERC20 token\",\"params\":{\"_amount\":\"the amount of token received by this contract\",\"_token\":\"the token received by this contract\"},\"returns\":{\"_0\":\"ok whether the processing is successful\"}},\"executeMessageWithTransferRefund(address,uint256,bytes,address)\":{\"params\":{\"_amount\":\"The amount of the original transfer\",\"_executor\":\"Address who called the MessageBus execution function\",\"_message\":\"The same message associated with the original transfer\",\"_token\":\"The token address of the original transfer\"}},\"executeMessageWithTransferRefundFromAdapter(address,uint256,bytes,address)\":{\"details\":\"only MessageBus can call this function, this requires the user to get sigs of the message from SGNBridge contract *always* sends native token to its receiver (this contract) even though the _token field is always an ERC20 token\",\"params\":{\"_amount\":\"the amount of token received by this contract\",\"_token\":\"the token received by this contract\"},\"returns\":{\"_0\":\"ok whether the processing is successful\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"An app that enables swapping on a chain, transferring to another chain and swapping another time on the destination chain before sending the result tokens to a user\",\"version\":1},\"userdoc\":{\"events\":{\"DirectSwap(bytes32,uint256,address,uint256,address)\":{\"notice\":\"Emitted when requested dstChainId == srcChainId, no bridging\"},\"RequestDone(bytes32,uint256,uint256,address,uint256,uint8,bytes)\":{\"notice\":\"Emitted when operations on dst chain is done.\"},\"RequestSent(bytes32,bytes,uint64,uint256,address,address,address,address,uint256,string)\":{\"notice\":\"Emitted when operations on src chain is done, the transfer is sent through the bridge\"}},\"kind\":\"user\",\"methods\":{\"executeMessage(address,uint64,bytes,address)\":{\"notice\":\"Called by MessageBus (MessageBusReceiver)\"},\"executeMessageWithTransfer(address,address,uint256,uint64,bytes,address)\":{\"notice\":\"Executes a swap if needed, then sends the output token to the receiver\"},\"executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)\":{\"notice\":\"Sends the received token to the receiver\"},\"executeMessageWithTransferRefund(address,uint256,bytes,address)\":{\"notice\":\"Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\"},\"executeMessageWithTransferRefundFromAdapter(address,uint256,bytes,address)\":{\"notice\":\"Used to trigger refund when bridging fails due to large slippage\"},\"nativeWrap()\":{\"notice\":\"erc20 wrap of the gas token of this chain, e.g. WETH\"},\"transferWithSwap((address,uint64,address,uint64,string,bytes,bool,bool,uint256,uint256,bytes,uint256,address,address,bool,bytes),(address,bytes)[],(address,bytes)[])\":{\"notice\":\"swaps if needed, then transfer the token to another chain along with an instruction on how to swap on that chain\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TransferSwapper.sol\":\"TransferSwapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/BridgeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"./interfaces/IBridgeAdapter.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title Manages a list of supported bridges\\n * @author lionelhoho\\n */\\nabstract contract BridgeRegistry is Ownable {\\n    event SupportedBridgesUpdated(string[] _bridgeProviders, address[] _bridgeAdapters);\\n\\n    mapping(bytes32 => IBridgeAdapter) public bridges;\\n\\n    // to disable a bridge, set the bridge addr of the corresponding provider to address(0)\\n    function setSupportedBridges(\\n        string[] calldata _bridgeProviders,\\n        address[] calldata _bridgeAdapters\\n    ) external onlyOwner {\\n        require(_bridgeProviders.length == _bridgeAdapters.length, \\\"params size mismatch\\\");\\n        for (uint256 i = 0; i < _bridgeProviders.length; i++) {\\n            bridges[keccak256(bytes(_bridgeProviders[i]))] = IBridgeAdapter(_bridgeAdapters[i]);\\n        }\\n        emit SupportedBridgesUpdated(_bridgeProviders, _bridgeAdapters);\\n    }\\n}\\n\",\"keccak256\":\"0x7d39a894e8552fddac5847cf8625df924cde2182329fe711e79a5a1766d79359\",\"license\":\"GPL-3.0-only\"},\"contracts/CodecRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ICodec.sol\\\";\\n\\n/**\\n * @title A codec registry that maps swap function selectors to corresponding codec addresses\\n * @author Padoriku\\n */\\nabstract contract CodecRegistry is Ownable {\\n    mapping(bytes4 => ICodec) public selector2codec;\\n\\n    // not used programmatically, but added for contract transparency\\n    address[] public codecs;\\n\\n    event CodecUpdated(bytes4 selector, address codec);\\n\\n    constructor(string[] memory _funcSigs, address[] memory _codecs) {\\n        require(_funcSigs.length == _codecs.length, \\\"len mm\\\");\\n        for (uint256 i = 0; i < _funcSigs.length; i++) {\\n            bytes4 selector = bytes4(keccak256(bytes(_funcSigs[i])));\\n            _setCodec(selector, _codecs[i]);\\n        }\\n    }\\n\\n    function setCodec(string calldata _funcSig, address _codec) public onlyOwner {\\n        bytes4 selector = bytes4(keccak256(bytes(_funcSig)));\\n        _setCodec(selector, _codec);\\n        emit CodecUpdated(selector, _codec);\\n    }\\n\\n    function _setCodec(bytes4 _selector, address _codec) private {\\n        selector2codec[_selector] = ICodec(_codec);\\n        codecs.push(_codec);\\n    }\\n\\n    function loadCodecs(ICodec.SwapDescription[] memory _swaps) internal view returns (ICodec[] memory) {\\n        ICodec[] memory _codecs = new ICodec[](_swaps.length);\\n        for (uint256 i = 0; i < _swaps.length; i++) {\\n            bytes4 selector = bytes4(_swaps[i].data);\\n            _codecs[i] = selector2codec[selector];\\n            require(address(_codecs[i]) != address(0), \\\"cdc no found\\\");\\n        }\\n        return (_codecs);\\n    }\\n\\n    function getCodec(\\n        bytes4[] memory _selectors,\\n        ICodec[] memory _codecs,\\n        bytes4 _selector\\n    ) internal pure returns (ICodec) {\\n        for (uint256 i = 0; i < _codecs.length; i++) {\\n            if (_selector == _selectors[i]) {\\n                return _codecs[i];\\n            }\\n        }\\n        revert(\\\"cdc no found\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xbebcfdf3cecf1ce949eafd320796f9abb84318c443ffb48c232974dc45008f45\",\"license\":\"GPL-3.0-only\"},\"contracts/DexRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title Manages a list supported dex\\n * @author Padoriku\\n */\\nabstract contract DexRegistry is Ownable {\\n    event SupportedDexUpdated(address dex, bytes4 selector, bool enabled);\\n\\n    // supported swap functions\\n    // 0x3df02124 exchange(int128,int128,uint256,uint256)\\n    // 0xa6417ed6 exchange_underlying(int128,int128,uint256,uint256)\\n    // 0x44ee1986 exchange_underlying(int128,int128,uint256,uint256,address)\\n    // 0x38ed1739 swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\\n    // 0xc04b8d59 exactInput((bytes,address,uint256,uint256,uint256))\\n    // 0xb0431182 clipperSwap(address,address,uint256,uint256)\\n    // 0xe449022e uniswapV3Swap(uint256,uint256,uint256[])\\n    // 0x2e95b6c8 unoswap(address,uint256,uint256,bytes32[])\\n    // 0x7c025200 swap(address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes)\\n    // 0xd0a3b665 fillOrderRFQ((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256)\\n    mapping(address => mapping(bytes4 => bool)) public dexRegistry;\\n\\n    constructor(address[] memory _supportedDexList, string[] memory _supportedFuncs) {\\n        for (uint256 i = 0; i < _supportedDexList.length; i++) {\\n            bytes4 selector = bytes4(keccak256(bytes(_supportedFuncs[i])));\\n            _setSupportedDex(_supportedDexList[i], selector, true);\\n        }\\n    }\\n\\n    function setSupportedDex(\\n        address _dex,\\n        bytes4 _selector,\\n        bool _enabled\\n    ) external onlyOwner {\\n        _setSupportedDex(_dex, _selector, _enabled);\\n        emit SupportedDexUpdated(_dex, _selector, _enabled);\\n    }\\n\\n    function _setSupportedDex(\\n        address _dex,\\n        bytes4 _selector,\\n        bool _enabled\\n    ) private {\\n        bool enabled = dexRegistry[_dex][_selector];\\n        require(enabled != _enabled, \\\"nop\\\");\\n        dexRegistry[_dex][_selector] = _enabled;\\n    }\\n}\\n\",\"keccak256\":\"0x37527cca72c64956584f60d23dd7a3962e3d48a74db583b2b76a4b64ed75a95c\",\"license\":\"GPL-3.0-only\"},\"contracts/FeeOperator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title Allows the owner to set fee collector and allows fee collectors to collect fees\\n * @author Padoriku\\n */\\nabstract contract FeeOperator is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    address public feeCollector;\\n\\n    event FeeCollectorUpdated(address from, address to);\\n\\n    modifier onlyFeeCollector() {\\n        require(msg.sender == feeCollector, \\\"not fee collector\\\");\\n        _;\\n    }\\n\\n    constructor(address _feeCollector) {\\n        feeCollector = _feeCollector;\\n    }\\n\\n    function collectFee(address[] calldata _tokens, address _to) external onlyFeeCollector {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            // use zero address to denote native token\\n            if (_tokens[i] == address(0)) {\\n                uint256 bal = address(this).balance;\\n                (bool sent, ) = _to.call{value: bal, gas: 50000}(\\\"\\\");\\n                require(sent, \\\"send native failed\\\");\\n            } else {\\n                uint256 balance = IERC20(_tokens[i]).balanceOf(address(this));\\n                IERC20(_tokens[i]).safeTransfer(_to, balance);\\n            }\\n        }\\n    }\\n\\n    function setFeeCollector(address _feeCollector) external onlyOwner {\\n        address oldFeeCollector = feeCollector;\\n        feeCollector = _feeCollector;\\n        emit FeeCollectorUpdated(oldFeeCollector, _feeCollector);\\n    }\\n}\\n\",\"keccak256\":\"0xe73180c580afed3b63db8c5eaedd30691c548e3b35c354e1a86ab26e7660f26f\",\"license\":\"GPL-3.0-only\"},\"contracts/SigVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title Allows owner to set signer, and verifies signatures\\n * @author Padoriku\\n */\\ncontract SigVerifier is Ownable {\\n    using ECDSA for bytes32;\\n\\n    address public signer;\\n\\n    event SignerUpdated(address from, address to);\\n\\n    constructor(address _signer) {\\n        signer = _signer;\\n    }\\n\\n    function setSigner(address _signer) public onlyOwner {\\n        address oldSigner = signer;\\n        signer = _signer;\\n        emit SignerUpdated(oldSigner, _signer);\\n    }\\n\\n    function verifySig(bytes32 _hash, bytes memory _feeSig) internal view {\\n        address _signer = _hash.recover(_feeSig);\\n        require(_signer == signer, \\\"invalid signer\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2d545b0e88da561512c5aa97abf1813bcf54a3c5f850d75c7a6c48da44954101\",\"license\":\"GPL-3.0-only\"},\"contracts/Swapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./CodecRegistry.sol\\\";\\nimport \\\"./interfaces/ICodec.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./DexRegistry.sol\\\";\\n\\n/**\\n * @title Loads codecs for the swaps and performs swap actions\\n * @author Padoriku\\n */\\ncontract Swapper is CodecRegistry, DexRegistry {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(\\n        string[] memory _funcSigs,\\n        address[] memory _codecs,\\n        address[] memory _supportedDexList,\\n        string[] memory _supportedDexFuncs\\n    ) DexRegistry(_supportedDexList, _supportedDexFuncs) CodecRegistry(_funcSigs, _codecs) {}\\n\\n    /**\\n     * @dev Checks the input swaps for that tokenIn and tokenOut for every swap should be the same\\n     * @param _swaps the swaps the check\\n     * @return sumAmtIn the sum of all amountIns in the swaps\\n     * @return tokenIn the input token of the swaps\\n     * @return tokenOut the desired output token of the swaps\\n     * @return codecs a list of codecs which each of them corresponds to a swap\\n     */\\n    function sanitizeSwaps(ICodec.SwapDescription[] memory _swaps)\\n        internal\\n        view\\n        returns (\\n            uint256 sumAmtIn,\\n            address tokenIn,\\n            address tokenOut,\\n            ICodec[] memory codecs // _codecs[i] is for _swaps[i]\\n        )\\n    {\\n        address prevTokenIn;\\n        address prevTokenOut;\\n        codecs = loadCodecs(_swaps);\\n\\n        for (uint256 i = 0; i < _swaps.length; i++) {\\n            require(dexRegistry[_swaps[i].dex][bytes4(_swaps[i].data)], \\\"unsupported dex\\\");\\n            (uint256 _amountIn, address _tokenIn, address _tokenOut) = codecs[i].decodeCalldata(_swaps[i]);\\n            require(prevTokenIn == address(0) || prevTokenIn == _tokenIn, \\\"tkin mismatch\\\");\\n            prevTokenIn = _tokenIn;\\n            require(prevTokenOut == address(0) || prevTokenOut == _tokenOut, \\\"tko mismatch\\\");\\n            prevTokenOut = _tokenOut;\\n\\n            sumAmtIn += _amountIn;\\n            tokenIn = _tokenIn;\\n            tokenOut = _tokenOut;\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes the swaps, decode their return values and sums the returned amount\\n     * @dev This function is intended to be used on src chain only\\n     * @dev This function immediately fails (return false) if any swaps fail. There is no \\\"partial fill\\\" on src chain\\n     * @param _swaps swaps. this function assumes that the swaps are already sanitized\\n     * @param _codecs the codecs for each swap\\n     * @return ok whether the operation is successful\\n     * @return sumAmtOut the sum of all amounts gained from swapping\\n     */\\n    function executeSwaps(\\n        ICodec.SwapDescription[] memory _swaps,\\n        ICodec[] memory _codecs // _codecs[i] is for _swaps[i]\\n    ) internal returns (bool ok, uint256 sumAmtOut) {\\n        for (uint256 i = 0; i < _swaps.length; i++) {\\n            (uint256 amountIn, address tokenIn, address tokenOut) = _codecs[i].decodeCalldata(_swaps[i]);\\n            bytes memory data = _codecs[i].encodeCalldataWithOverride(_swaps[i].data, amountIn, address(this));\\n            IERC20(tokenIn).safeIncreaseAllowance(_swaps[i].dex, amountIn);\\n            uint256 balBefore = IERC20(tokenOut).balanceOf(address(this));\\n            (ok, ) = _swaps[i].dex.call(data);\\n            if (!ok) {\\n                return (false, 0);\\n            }\\n            uint256 balAfter = IERC20(tokenOut).balanceOf(address(this));\\n            sumAmtOut += balAfter - balBefore;\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes the swaps with override, redistributes amountIns for each swap route,\\n     * decode their return values and sums the returned amount\\n     * @dev This function is intended to be used on dst chain only\\n     * @param _swaps swaps to execute. this function assumes that the swaps are already sanitized\\n     * @param _codecs the codecs for each swap\\n     * @param _amountInOverride the amountIn to substitute the amountIns in swaps for\\n     * @dev _amountInOverride serves the purpose of correcting the estimated amountIns to actual bridge outs\\n     * @dev _amountInOverride is also distributed according to the weight of each original amountIn\\n     * @return sumAmtOut the sum of all amounts gained from swapping\\n     * @return sumAmtFailed the sum of all amounts that fails to swap\\n     */\\n    function executeSwapsWithOverride(\\n        ICodec.SwapDescription[] memory _swaps,\\n        ICodec[] memory _codecs, // _codecs[i] is for _swaps[i]\\n        uint256 _amountInOverride,\\n        bool _allowPartialFill\\n    ) internal returns (uint256 sumAmtOut, uint256 sumAmtFailed) {\\n        (uint256[] memory amountIns, address tokenIn, address tokenOut) = _redistributeAmountIn(\\n            _swaps,\\n            _amountInOverride,\\n            _codecs\\n        );\\n        uint256 balBefore = IERC20(tokenOut).balanceOf(address(this));\\n        // execute the swaps with adjusted amountIns\\n        for (uint256 i = 0; i < _swaps.length; i++) {\\n            bytes memory swapCalldata = _codecs[i].encodeCalldataWithOverride(\\n                _swaps[i].data,\\n                amountIns[i],\\n                address(this)\\n            );\\n            IERC20(tokenIn).safeIncreaseAllowance(_swaps[i].dex, amountIns[i]);\\n            (bool ok, ) = _swaps[i].dex.call(swapCalldata);\\n            require(ok || _allowPartialFill, \\\"swap failed\\\");\\n            if (!ok) {\\n                sumAmtFailed += amountIns[i];\\n            }\\n        }\\n        uint256 balAfter = IERC20(tokenOut).balanceOf(address(this));\\n        sumAmtOut = balAfter - balBefore;\\n        require(sumAmtOut > 0, \\\"all swaps failed\\\");\\n    }\\n\\n    /// @notice distributes the _amountInOverride to the swaps base on how much each original amountIns weight\\n    function _redistributeAmountIn(\\n        ICodec.SwapDescription[] memory _swaps,\\n        uint256 _amountInOverride,\\n        ICodec[] memory _codecs\\n    )\\n        private\\n        view\\n        returns (\\n            uint256[] memory amountIns,\\n            address tokenIn,\\n            address tokenOut\\n        )\\n    {\\n        uint256 sumAmtIn;\\n        amountIns = new uint256[](_swaps.length);\\n\\n        // compute sumAmtIn and collect amountIns\\n        for (uint256 i = 0; i < _swaps.length; i++) {\\n            uint256 amountIn;\\n            (amountIn, tokenIn, tokenOut) = _codecs[i].decodeCalldata(_swaps[i]);\\n            sumAmtIn += amountIn;\\n            amountIns[i] = amountIn;\\n        }\\n\\n        // compute adjusted amountIns with regard to the weight of each amountIns in total amountIn\\n        for (uint256 i = 0; i < amountIns.length; i++) {\\n            amountIns[i] = (_amountInOverride * amountIns[i]) / sumAmtIn;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x742174b46b20cca8b426ae0c7845a7a94e51bbdcbcc077b3c678db9a80bac0a9\",\"license\":\"GPL-3.0-only\"},\"contracts/TransferSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./lib/Types.sol\\\";\\nimport \\\"./lib/MessageSenderLib.sol\\\";\\nimport \\\"./lib/MessageReceiverApp.sol\\\";\\nimport \\\"./lib/Pauser.sol\\\";\\nimport \\\"./BridgeRegistry.sol\\\";\\nimport \\\"./FeeOperator.sol\\\";\\nimport \\\"./SigVerifier.sol\\\";\\nimport \\\"./Swapper.sol\\\";\\nimport \\\"./interfaces/IBridgeAdapter.sol\\\";\\nimport \\\"./interfaces/ICodec.sol\\\";\\n\\n/**\\n * @author Chainhop Dex Team\\n * @author Padoriku\\n * @title An app that enables swapping on a chain, transferring to another chain and swapping\\n * another time on the destination chain before sending the result tokens to a user\\n */\\ncontract TransferSwapper is\\n    MessageReceiverApp,\\n    Swapper,\\n    SigVerifier,\\n    FeeOperator,\\n    ReentrancyGuard,\\n    BridgeRegistry,\\n    Pauser\\n{\\n    using SafeERC20 for IERC20;\\n    using ECDSA for bytes32;\\n\\n    bytes32 public immutable CBRIDGE_PROVIDER_HASH;\\n\\n    /// @notice erc20 wrap of the gas token of this chain, e.g. WETH\\n    address public nativeWrap;\\n\\n    constructor(\\n        address _messageBus,\\n        address _nativeWrap,\\n        address _signer,\\n        address _feeCollector,\\n        string[] memory _funcSigs,\\n        address[] memory _codecs,\\n        address[] memory _supportedDexList,\\n        string[] memory _supportedDexFuncs,\\n        bool _testMode\\n    )\\n        Swapper(_funcSigs, _codecs, _supportedDexList, _supportedDexFuncs)\\n        FeeOperator(_feeCollector)\\n        SigVerifier(_signer)\\n    {\\n        messageBus = _messageBus;\\n        nativeWrap = _nativeWrap;\\n        testMode = _testMode;\\n        CBRIDGE_PROVIDER_HASH = keccak256(bytes(\\\"cbridge\\\"));\\n    }\\n\\n    event NativeWrapUpdated(address nativeWrap);\\n\\n    /**\\n     * @notice Emitted when requested dstChainId == srcChainId, no bridging\\n     * @param id see _computeId()\\n     * @param amountIn the input amount approved by the sender\\n     * @param tokenIn the input token approved by the sender\\n     * @param amountOut the output amount gained after swapping using the input tokens\\n     * @param tokenOut the output token gained after swapping using the input tokens\\n     */\\n    event DirectSwap(bytes32 id, uint256 amountIn, address tokenIn, uint256 amountOut, address tokenOut);\\n\\n    /**\\n     * @notice Emitted when operations on src chain is done, the transfer is sent through the bridge\\n     * @param id see _computeId()\\n     * @param bridgeResp arbitrary response data returned by bridge\\n     * @param dstChainId destination chain id\\n     * @param srcAmount input amount approved by the sender\\n     * @param srcToken the input token approved by the sender\\n     * @param dstToken the final output token (after bridging and swapping) desired by the sender\\n     * @param bridgeOutReceiver the receiver (user or dst TransferSwapper) of the bridge token\\n     * @param bridgeToken the token used for bridging\\n     * @param bridgeAmount the amount of the bridgeToken to bridge\\n     * @param bridgeProvider the bridge provider\\n     */\\n    event RequestSent(\\n        bytes32 id,\\n        bytes bridgeResp,\\n        uint64 dstChainId,\\n        uint256 srcAmount,\\n        address srcToken,\\n        address dstToken,\\n        address bridgeOutReceiver,\\n        address bridgeToken,\\n        uint256 bridgeAmount,\\n        string bridgeProvider\\n    );\\n    // emitted when operations on dst chain is done.\\n    // dstAmount is denominated by dstToken, refundAmount is denominated by bridge out token.\\n    // if refundAmount is a non-zero number, it means the \\\"allow partial fill\\\" option is turned on.\\n\\n    /**\\n     * @notice Emitted when operations on dst chain is done.\\n     * @param id see _computeId()\\n     * @param dstAmount the final output token (after bridging and swapping) desired by the sender\\n     * @param refundAmount the amount refunded to the receiver in bridge token\\n     * @dev refundAmount may be fill by either a complete refund or when allowPartialFill is on and\\n     * some swaps fails in the swap routes\\n     * @param refundToken bridge out token\\n     * @param feeCollected the fee chainhop deducts from bridge out token\\n     * @param status see RequestStatus\\n     */\\n    event RequestDone(\\n        bytes32 id,\\n        uint256 dstAmount,\\n        uint256 refundAmount,\\n        address refundToken,\\n        uint256 feeCollected,\\n        Types.RequestStatus status,\\n        bytes forwardResp\\n    );\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     * Source chain functions\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n\\n    /**\\n     * @notice swaps if needed, then transfer the token to another chain along with an instruction on how to swap\\n     * on that chain\\n     */\\n    function transferWithSwap(\\n        Types.TransferDescription calldata _desc,\\n        ICodec.SwapDescription[] calldata _srcSwaps,\\n        ICodec.SwapDescription[] calldata _dstSwaps\\n    ) external payable nonReentrant whenNotPaused {\\n        // a request needs to incur a swap, a transfer, or both. otherwise it's a nop and we revert early to save gas\\n        require(_srcSwaps.length != 0 || _desc.dstChainId != uint64(block.chainid), \\\"nop\\\");\\n        require(_srcSwaps.length != 0 || (_desc.amountIn != 0 && _desc.tokenIn != address(0)), \\\"nop\\\");\\n        // swapping on the dst chain requires message passing. only integrated with cbridge for now\\n        bytes32 bridgeProviderHash = keccak256(bytes(_desc.bridgeProvider));\\n        require(\\n            (_dstSwaps.length == 0 && _desc.forward.length == 0) || bridgeProviderHash == CBRIDGE_PROVIDER_HASH,\\n            \\\"bridge does not support msg\\\"\\n        );\\n\\n        IBridgeAdapter bridge = bridges[bridgeProviderHash];\\n        // if not DirectSwap, the bridge provider should be a valid one\\n        require(_desc.dstChainId == uint64(block.chainid) || address(bridge) != address(0), \\\"unsupported bridge\\\");\\n\\n        uint256 amountIn = _desc.amountIn;\\n        ICodec[] memory codecs;\\n\\n        address srcToken = _desc.tokenIn;\\n        address bridgeToken = _desc.tokenIn;\\n        if (_srcSwaps.length != 0) {\\n            (amountIn, srcToken, bridgeToken, codecs) = sanitizeSwaps(_srcSwaps);\\n        }\\n        if (_desc.nativeIn) {\\n            require(srcToken == nativeWrap, \\\"tkin no nativeWrap\\\");\\n            require(msg.value >= amountIn, \\\"insfcnt amt\\\"); // insufficient amount\\n            IWETH(nativeWrap).deposit{value: amountIn}();\\n        } else {\\n            IERC20(srcToken).safeTransferFrom(msg.sender, address(this), amountIn);\\n        }\\n\\n        _swapAndSend(srcToken, bridgeToken, amountIn, _desc, _srcSwaps, _dstSwaps, codecs);\\n    }\\n\\n    function _swapAndSend(\\n        address srcToken,\\n        address bridgeToken,\\n        uint256 _amountIn,\\n        Types.TransferDescription memory _desc,\\n        ICodec.SwapDescription[] memory _srcSwaps,\\n        ICodec.SwapDescription[] memory _dstSwaps,\\n        ICodec[] memory _codecs\\n    ) private {\\n        // swap if needed\\n        uint256 amountOut = _amountIn;\\n        if (_srcSwaps.length != 0) {\\n            bool ok;\\n            (ok, amountOut) = executeSwaps(_srcSwaps, _codecs);\\n            require(ok, \\\"swap fail\\\");\\n        }\\n\\n        bytes32 id = _computeId(_desc.receiver, _desc.nonce);\\n        // direct send if needed\\n        if (_desc.dstChainId == uint64(block.chainid)) {\\n            emit DirectSwap(id, _amountIn, srcToken, amountOut, bridgeToken);\\n            _sendToken(bridgeToken, amountOut, _desc.receiver, _desc.nativeOut);\\n            return;\\n        }\\n\\n        _transfer(id, srcToken, bridgeToken, _desc, _dstSwaps, _amountIn, amountOut);\\n    }\\n\\n    function _transfer(\\n        bytes32 _id,\\n        address srcToken,\\n        address bridgeToken,\\n        Types.TransferDescription memory _desc,\\n        ICodec.SwapDescription[] memory _dstSwaps,\\n        uint256 _amountIn,\\n        uint256 _amountOut\\n    ) private {\\n        // fund is directly to user if there is no swaps needed on the destination chain\\n        address bridgeOutReceiver = (_dstSwaps.length > 0 || _desc.forward.length > 0)\\n            ? _desc.dstTransferSwapper\\n            : _desc.receiver;\\n        bytes memory bridgeResp;\\n        {\\n            _verifyFee(_desc, _amountIn, srcToken);\\n            uint256 msgFee = msg.value;\\n            if (_desc.nativeIn) {\\n                msgFee = msg.value - _amountIn;\\n            }\\n            IBridgeAdapter bridge = bridges[keccak256(bytes(_desc.bridgeProvider))];\\n            IERC20(bridgeToken).safeIncreaseAllowance(address(bridge), _amountOut);\\n            bytes memory requestMessage = _encodeRequestMessage(_id, _desc, _dstSwaps);\\n            bridgeResp = bridge.bridge{value: msgFee}(\\n                _desc.dstChainId,\\n                bridgeOutReceiver,\\n                _amountOut,\\n                bridgeToken,\\n                _desc.bridgeParams,\\n                requestMessage\\n            );\\n        }\\n        emit RequestSent(\\n            _id,\\n            bridgeResp,\\n            _desc.dstChainId,\\n            _amountIn,\\n            srcToken,\\n            _desc.dstTokenOut,\\n            bridgeOutReceiver,\\n            bridgeToken,\\n            _amountOut,\\n            _desc.bridgeProvider\\n        );\\n    }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     * Destination chain functions\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n\\n    /**\\n     * @notice Executes a swap if needed, then sends the output token to the receiver\\n     * @dev If allowPartialFill is off, this function reverts as soon as one swap in swap routes fails\\n     * @dev This function is called and is only callable by MessageBus. The transaction of such call is triggered by executor.\\n     * @dev Bridge contract *always* sends native token to its receiver (this contract) even though the _token field is always an ERC20 token\\n     * @param _token the token received by this contract\\n     * @param _amount the amount of token received by this contract\\n     * @return ok whether the processing is successful\\n     */\\n    function executeMessageWithTransfer(\\n        address, // _sender\\n        address _token,\\n        uint256 _amount,\\n        uint64, // _srcChainId\\n        bytes memory _message,\\n        address _executor\\n    ) external payable override onlyMessageBus nonReentrant returns (ExecutionStatus) {\\n        if (paused()) {\\n            return ExecutionStatus.Retry;\\n        }\\n        Types.Request memory m = abi.decode((_message), (Types.Request));\\n\\n        // handle the case where amount received is not enough to pay fee\\n        if (_amount < m.fee) {\\n            m.fee = _amount;\\n            emit RequestDone(m.id, 0, 0, _token, m.fee, Types.RequestStatus.Succeeded, bytes(\\\"\\\"));\\n            return ExecutionStatus.Success;\\n        } else {\\n            _amount = _amount - m.fee;\\n        }\\n\\n        uint256 sumAmtOut = _amount;\\n        uint256 sumAmtFailed;\\n        bytes memory forwardResp;\\n        {\\n            // Note if to wrap, the NATIVE used to convert is from the ones sent by upstream in advance, but not part of the `msg.value`\\n            // `msg.value` here is only used to pay for msg fee\\n            _wrapBridgeOutToken(_token, _amount);\\n\\n            address tokenOut = _token;\\n            if (m.swaps.length != 0) {\\n                ICodec[] memory codecs;\\n                address tokenIn;\\n                // swap first before sending the token out to user\\n                (, tokenIn, tokenOut, codecs) = sanitizeSwaps(m.swaps);\\n                require(tokenIn == _token, \\\"tkin mm\\\"); // tokenIn mismatch\\n                (sumAmtOut, sumAmtFailed) = executeSwapsWithOverride(m.swaps, codecs, _amount, m.allowPartialFill);\\n                // if at this stage the tx is not reverted, it means at least 1 swap in routes succeeded\\n                if (sumAmtFailed > 0) {\\n                    _sendToken(_token, sumAmtFailed, m.receiver, false);\\n                }\\n            }\\n\\n            if (m.forward.length > 0) {\\n                Types.Forward memory f = abi.decode(m.forward, (Types.Forward));\\n                IBridgeAdapter cBridge = bridges[CBRIDGE_PROVIDER_HASH];\\n                require(address(cBridge) != address(0), \\\"cbridge not set\\\");\\n                IERC20(tokenOut).safeIncreaseAllowance(address(cBridge), sumAmtOut);\\n                bytes memory requestMessage = _encodeRequestMessage(m.id, m.receiver);\\n                forwardResp = cBridge.bridge{value: msg.value}(\\n                    f.dstChain,\\n                    m.receiver,\\n                    sumAmtOut,\\n                    tokenOut,\\n                    f.params,\\n                    requestMessage\\n                );\\n            } else {\\n                // msg.value is not used in this code branch, pay back to sender\\n                if (msg.value > 0) {\\n                    (bool sent, ) = _executor.call{value: msg.value}(\\\"\\\");\\n                    require(sent, \\\"send fail\\\");\\n                }\\n                _sendToken(tokenOut, sumAmtOut, m.receiver, m.nativeOut);\\n            }\\n        }\\n        // status is always success as long as this function call doesn't revert. partial fill is also considered success\\n        emit RequestDone(m.id, sumAmtOut, sumAmtFailed, _token, m.fee, Types.RequestStatus.Succeeded, forwardResp);\\n        return ExecutionStatus.Success;\\n    }\\n\\n    /**\\n     * @notice Sends the received token to the receiver\\n     * @dev Only called if executeMessageWithTransfer reverts\\n     * @dev Bridge contract *always* sends native token to its receiver (this contract) even though the _token field is always an ERC20 token\\n     * @param _token the token received by this contract\\n     * @param _amount the amount of token received by this contract\\n     * @return ok whether the processing is successful\\n     */\\n    function executeMessageWithTransferFallback(\\n        address, // _sender\\n        address _token,\\n        uint256 _amount,\\n        uint64, // _srcChainId\\n        bytes memory _message,\\n        address // _executor\\n    ) external payable override onlyMessageBus nonReentrant returns (ExecutionStatus) {\\n        if (paused()) {\\n            return ExecutionStatus.Retry;\\n        }\\n        Types.Request memory m = abi.decode((_message), (Types.Request));\\n        _wrapBridgeOutToken(_token, _amount);\\n        uint256 refundAmount = _amount - m.fee; // no need to check amount >= fee as it's already checked before\\n        _sendToken(_token, refundAmount, m.receiver, false);\\n\\n        emit RequestDone(m.id, 0, refundAmount, _token, m.fee, Types.RequestStatus.Fallback, bytes(\\\"\\\"));\\n        return ExecutionStatus.Success;\\n    }\\n\\n    /**\\n     * @notice Used to trigger refund when bridging fails due to large slippage\\n     * @dev only MessageBus can call this function, this requires the user to get sigs of the message from SGN\\n     * @dev Bridge contract *always* sends native token to its receiver (this contract) even though the _token field is always an ERC20 token\\n     * @param _token the token received by this contract\\n     * @param _amount the amount of token received by this contract\\n     * @return ok whether the processing is successful\\n     */\\n    function executeMessageWithTransferRefundFromAdapter(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address // _executor\\n    ) external payable nonReentrant returns (ExecutionStatus) {\\n        if (paused()) {\\n            return ExecutionStatus.Retry;\\n        }\\n        if (_token != nativeWrap) {\\n            IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        } else {\\n            require(msg.value >= _amount, \\\"no native transferred in\\\");\\n        }\\n        Types.Request memory m = abi.decode((_message), (Types.Request));\\n        _wrapBridgeOutToken(_token, _amount);\\n        _sendToken(_token, _amount, m.receiver, false);\\n        emit RequestDone(m.id, 0, _amount, _token, m.fee, Types.RequestStatus.Fallback, bytes(\\\"\\\"));\\n        return ExecutionStatus.Success;\\n    }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     * Misc\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n    function _computeId(address _receiver, uint64 _nonce) private view returns (bytes32) {\\n        return keccak256(abi.encodePacked(msg.sender, _receiver, uint64(block.chainid), _nonce));\\n    }\\n\\n    function _encodeRequestMessage(\\n        bytes32 _id,\\n        Types.TransferDescription memory _desc,\\n        ICodec.SwapDescription[] memory _swaps\\n    ) internal pure returns (bytes memory message) {\\n        message = abi.encode(\\n            Types.Request({\\n                id: _id,\\n                swaps: _swaps,\\n                receiver: _desc.receiver,\\n                nativeOut: _desc.nativeOut,\\n                fee: _desc.fee,\\n                allowPartialFill: _desc.allowPartialFill,\\n                forward: _desc.forward\\n            })\\n        );\\n    }\\n\\n    function _encodeRequestMessage(bytes32 _id, address _receiver) internal pure returns (bytes memory message) {\\n        ICodec.SwapDescription[] memory emptySwaps;\\n        bytes memory empty;\\n        message = abi.encode(\\n            Types.Request({\\n                id: _id,\\n                swaps: emptySwaps,\\n                receiver: _receiver,\\n                nativeOut: false,\\n                fee: 0,\\n                allowPartialFill: false,\\n                forward: empty\\n            })\\n        );\\n    }\\n\\n    function _wrapBridgeOutToken(address _token, uint256 _amount) private {\\n        // Wrapping the bridge token before doing anything. There is inefficiency in this function and _sendToken() only if the received the token\\n        // is native and the user wants native out. The wrapping then unwrapping process could be skipped. This inefficiency is tolerated for logic tidiness\\n        if (_token == nativeWrap) {\\n            // If the bridge out token is a native wrap, we need to check whether the actual received token is native token\\n            // Note Assumption: only the liquidity bridge is capable of sending a native wrap\\n            address bridge = IMessageBus(messageBus).liquidityBridge();\\n            // If bridge's nativeWrap is set, then bridge automatically unwraps the token and send it to this contract\\n            // Otherwise the received token in this contract is ERC20\\n            if (IBridgeCeler(bridge).nativeWrap() == nativeWrap) {\\n                IWETH(nativeWrap).deposit{value: _amount}();\\n            }\\n        }\\n    }\\n\\n    function _sendToken(\\n        address _token,\\n        uint256 _amount,\\n        address _receiver,\\n        bool _nativeOut\\n    ) private {\\n        if (_nativeOut) {\\n            require(_token == nativeWrap, \\\"tk no native\\\");\\n            IWETH(nativeWrap).withdraw(_amount);\\n            (bool sent, ) = _receiver.call{value: _amount, gas: 50000}(\\\"\\\");\\n            require(sent, \\\"send fail\\\");\\n        } else {\\n            IERC20(_token).safeTransfer(_receiver, _amount);\\n        }\\n    }\\n\\n    function _verifyFee(\\n        Types.TransferDescription memory _desc,\\n        uint256 _amountIn,\\n        address _tokenIn\\n    ) private view {\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                \\\"executor fee\\\",\\n                uint64(block.chainid),\\n                _desc.dstChainId,\\n                _amountIn,\\n                _tokenIn,\\n                _desc.feeDeadline,\\n                _desc.fee\\n            )\\n        );\\n        bytes32 signHash = hash.toEthSignedMessageHash();\\n        verifySig(signHash, _desc.feeSig);\\n        require(_desc.feeDeadline > block.timestamp, \\\"deadline exceeded\\\");\\n    }\\n\\n    function setNativeWrap(address _nativeWrap) external onlyOwner {\\n        nativeWrap = _nativeWrap;\\n        emit NativeWrapUpdated(_nativeWrap);\\n    }\\n\\n    // This is needed to receive ETH when calling `IWETH.withdraw`\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x141fc025318857e81dade7a55461c2dc68a3f143e45cd58282f5351d0a1ff3b6\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IBridgeAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\ninterface IBridgeAdapter {\\n    function bridge(\\n        uint64 _dstChainId,\\n        // the address that the fund is transfered to on the destination chain\\n        address _receiver,\\n        uint256 _amount,\\n        address _token,\\n        // Bridge transfers quoted and abi encoded by chainhop backend server.\\n        // Bridge adapter implementations need to decode this themselves.\\n        bytes memory _bridgeParams,\\n        // The message to be bridged alongside the transfer.\\n        // Note if the bridge adapter doesn't support message passing, the call should revert when\\n        // this field is set.\\n        bytes memory _requestMessage\\n    ) external payable returns (bytes memory bridgeResp);\\n}\\n\",\"keccak256\":\"0x83846dd37f0913ef77647a711ff8b1c53cbd72f6a0fc51d88ef1ad62412ee045\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IBridgeCeler.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\ninterface IBridgeCeler {\\n    // common\\n    function delayThresholds(address token) external view returns (uint256);\\n\\n    function delayPeriod() external view returns (uint256);\\n\\n    function epochVolumes(address token) external view returns (uint256);\\n\\n    function epochVolumeCaps(address token) external view returns (uint256);\\n\\n    // liquidity bridge\\n    function minSend(address token) external view returns (uint256);\\n\\n    function maxSend(address token) external view returns (uint256);\\n\\n    // peg vault v0/v2\\n    function minDeposit(address token) external view returns (uint256);\\n\\n    function maxDeposit(address token) external view returns (uint256);\\n\\n    // peg bridge v0/v2\\n    function minBurn(address token) external view returns (uint256);\\n\\n    function maxBurn(address token) external view returns (uint256);\\n\\n    function nativeWrap() external view returns (address);\\n\\n    function send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external;\\n\\n    function relay(\\n        bytes calldata _relayRequest,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function transfers(bytes32 transferId) external view returns (bool);\\n\\n    function withdraws(bytes32 withdrawId) external view returns (bool);\\n\\n    function withdraw(\\n        bytes calldata _wdmsg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x5a5eb6a4a3e53654a58083e850a9d425e80b268bbedc5aa39ae616223d2c11e9\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ICodec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface ICodec {\\n    struct SwapDescription {\\n        address dex; // the DEX to use for the swap, zero address implies no swap needed\\n        bytes data; // the data to call the dex with\\n    }\\n\\n    function decodeCalldata(SwapDescription calldata swap)\\n        external\\n        view\\n        returns (\\n            uint256 amountIn,\\n            address tokenIn,\\n            address tokenOut\\n        );\\n\\n    function encodeCalldataWithOverride(\\n        bytes calldata data,\\n        uint256 amountInOverride,\\n        address receiverOverride\\n    ) external pure returns (bytes memory swapCalldata);\\n}\\n\",\"keccak256\":\"0x3c063f0ffd87df3df38998c78273bc00ac835331905be997c7e3c6aa3bdbdcc4\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IMessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../lib/MsgDataTypes.sol\\\";\\n\\ninterface IMessageBus {\\n    function liquidityBridge() external view returns (address);\\n\\n    function pegBridge() external view returns (address);\\n\\n    function pegBridgeV2() external view returns (address);\\n\\n    function pegVault() external view returns (address);\\n\\n    function pegVaultV2() external view returns (address);\\n\\n    function feeBase() external view returns (uint256);\\n\\n    function feePerByte() external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the required fee for the message.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     @ @return The required fee.\\n     */\\n    function calcFee(bytes calldata _message) external view returns (uint256);\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native gas token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Sends a message associated with a transfer to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _srcBridge The bridge contract to send the transfer with.\\n     * @param _srcTransferId The transfer ID.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        address _srcBridge,\\n        bytes32 _srcTransferId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdrawFee(\\n        address _account,\\n        uint256 _cumulativeFee,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Execute a message with a successful transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransfer(\\n        bytes calldata _message,\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message with a refunded transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransferRefund(\\n        bytes calldata _message, // the same message associated with the original transfer\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message not associated with a transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessage(\\n        bytes calldata _message,\\n        MsgDataTypes.RouteInfo calldata _route,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x35e06417d8892519f158bc1344a598529d8e5969cd63723e7cb8054d3227d0b9\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IMessageReceiverApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessageReceiverApp {\\n    enum ExecutionStatus {\\n        Fail, // execution failed, finalized\\n        Success, // execution succeeded, finalized\\n        Retry // execution rejected, can retry later\\n    }\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s\\n     *         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Only called by MessageBus (MessageBusReceiver) if\\n     *         1. executeMessageWithTransfer reverts, or\\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferFallback(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver)\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n}\\n\",\"keccak256\":\"0x9e4d6ec7303c40c1a8c897655c3d6ef6ae1f9fa7e8c806e7c6878ff01b51e67b\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IOriginalTokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVault {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x94892c0bcf78d1d1de33a9c9e84b91a2b437f29ac2c457c0b3d8d340d62a4778\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IOriginalTokenVaultV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVaultV2 {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd920df6f6662b62f72b33685c4695b603bbce3f0ad32337c6bda0981ba058dd1\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IPeggedTokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridge {\\n    /**\\n     * @notice Burn tokens to trigger withdrawal at a remote chain's OriginalTokenVault\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _withdrawAccount account who withdraw original tokens on the remote chain\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        address _withdrawAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa01de97f0a810add87abada16e8449c606289d144762bebea8244f517d55c2b9\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IPeggedTokenBridgeV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridgeV2 {\\n    /**\\n     * @notice Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's\\n     * OriginalTokenVault, or mint at another remote chain\\n     * @param _token The pegged token address.\\n     * @param _amount The amount to burn.\\n     * @param _toChainId If zero, withdraw from original vault; otherwise, the remote chain to mint tokens.\\n     * @param _toAccount The account to receive tokens on the remote chain\\n     * @param _nonce A number to guarantee unique depositId. Can be timestamp in practice.\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    // same with `burn` above, use openzeppelin ERC20Burnable interface\\n    function burnFrom(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\n     * @param _request The serialized Mint protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xea5828630c131a1c7017360d4c1729c71bdeb5eaf366a30c9637c82795cea9d5\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x4af2aca7cbf87734e6ae30d3027baaddba6351f46e1ddbd155887a07ec85c2c2\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/MessageBusAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract MessageBusAddress is Ownable {\\n    event MessageBusUpdated(address messageBus);\\n\\n    address public messageBus;\\n\\n    function setMessageBus(address _messageBus) public onlyOwner {\\n        messageBus = _messageBus;\\n        emit MessageBusUpdated(messageBus);\\n    }\\n}\\n\",\"keccak256\":\"0x44ad6d31920c6046e4bf72c74454e3f4b1ff22b0fb67d585dc288c68730ede74\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/MessageReceiverApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../interfaces/IMessageReceiverApp.sol\\\";\\nimport \\\"./MessageBusAddress.sol\\\";\\n\\nabstract contract MessageReceiverApp is IMessageReceiverApp, MessageBusAddress {\\n    // testMode is used for the ease of testing functions with the \\\"onlyMessageBus\\\" modifier.\\n    // WARNING: when testMode is true, ANYONE can call executeMessageXXX functions\\n    // this variable can only be set during contract construction and is always not set on mainnets\\n    bool public testMode;\\n\\n    modifier onlyMessageBus() {\\n        if (!testMode) {\\n            require(msg.sender == messageBus, \\\"caller is not message bus\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s\\n     *         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    /**\\n     * @notice Only called by MessageBus (MessageBusReceiver) if\\n     *         1. executeMessageWithTransfer reverts, or\\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferFallback(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver)\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n}\\n\",\"keccak256\":\"0x00e0d1b3f7396ee7984768a27516f24367d770708eba2dc02eb3e2cbe21c8a82\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/MessageSenderLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IBridgeCeler.sol\\\";\\nimport \\\"../interfaces/IOriginalTokenVault.sol\\\";\\nimport \\\"../interfaces/IOriginalTokenVaultV2.sol\\\";\\nimport \\\"../interfaces/IPeggedTokenBridge.sol\\\";\\nimport \\\"../interfaces/IPeggedTokenBridgeV2.sol\\\";\\nimport \\\"../interfaces/IMessageBus.sol\\\";\\nimport \\\"./MsgDataTypes.sol\\\";\\n\\nlibrary MessageSenderLib {\\n    using SafeERC20 for IERC20;\\n\\n    // ============== Internal library functions called by apps ==============\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal {\\n        IMessageBus(_messageBus).sendMessage{value: _fee}(_receiver, _dstChainId, _message);\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded. Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        bytes memory _message,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        (bytes32 transferId, address bridge) = sendTokenTransfer(\\n            _receiver,\\n            _token,\\n            _amount,\\n            _dstChainId,\\n            _nonce,\\n            _maxSlippage,\\n            _bridgeSendType,\\n            _messageBus\\n        );\\n        if (_message.length > 0) {\\n            IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\\n                _receiver,\\n                _dstChainId,\\n                bridge,\\n                transferId,\\n                _message\\n            );\\n        }\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Sends a token transfer via a bridge.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\\n     */\\n    function sendTokenTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _messageBus\\n    ) internal returns (bytes32 transferId, address bridge) {\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\\n            bridge = IMessageBus(_messageBus).liquidityBridge();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            IBridgeCeler(bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\\n            transferId = computeLiqBridgeTransferId(_receiver, _token, _amount, _dstChainId, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\\n            bridge = IMessageBus(_messageBus).pegVault();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            IOriginalTokenVault(bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n            transferId = computePegV1DepositId(_receiver, _token, _amount, _dstChainId, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\\n            bridge = IMessageBus(_messageBus).pegBridge();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            IPeggedTokenBridge(bridge).burn(_token, _amount, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(bridge, 0);\\n            transferId = computePegV1BurnId(_receiver, _token, _amount, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit) {\\n            bridge = IMessageBus(_messageBus).pegVaultV2();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            transferId = IOriginalTokenVaultV2(bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn) {\\n            bridge = IMessageBus(_messageBus).pegBridgeV2();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            transferId = IPeggedTokenBridgeV2(bridge).burn(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(bridge, 0);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2BurnFrom) {\\n            bridge = IMessageBus(_messageBus).pegBridgeV2();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            transferId = IPeggedTokenBridgeV2(bridge).burnFrom(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(bridge, 0);\\n        } else {\\n            revert(\\\"bridge type not supported\\\");\\n        }\\n    }\\n\\n    function computeLiqBridgeTransferId(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(address(this), _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\\n            );\\n    }\\n\\n    function computePegV1DepositId(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(address(this), _token, _amount, _dstChainId, _receiver, _nonce, uint64(block.chainid))\\n            );\\n    }\\n\\n    function computePegV1BurnId(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _nonce\\n    ) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(address(this), _token, _amount, _receiver, _nonce, uint64(block.chainid)));\\n    }\\n}\\n\",\"keccak256\":\"0xc4ed85967a775ba4262ffef61f2ac47e258045443d9b1967db34dc826c3a8739\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/MsgDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nlibrary MsgDataTypes {\\n    // bridge operation type at the sender side (src chain)\\n    enum BridgeSendType {\\n        Null,\\n        Liquidity,\\n        PegDeposit,\\n        PegBurn,\\n        PegV2Deposit,\\n        PegV2Burn,\\n        PegV2BurnFrom\\n    }\\n\\n    // bridge operation type at the receiver side (dst chain)\\n    enum TransferType {\\n        Null,\\n        LqRelay, // relay through liquidity bridge\\n        LqWithdraw, // withdraw from liquidity bridge\\n        PegMint, // mint through pegged token bridge\\n        PegWithdraw, // withdraw from original token vault\\n        PegV2Mint, // mint through pegged token bridge v2\\n        PegV2Withdraw // withdraw from original token vault v2\\n    }\\n\\n    enum MsgType {\\n        MessageWithTransfer,\\n        MessageOnly\\n    }\\n\\n    enum TxStatus {\\n        Null,\\n        Success,\\n        Fail,\\n        Fallback,\\n        Pending // transient state within a transaction\\n    }\\n\\n    struct TransferInfo {\\n        TransferType t;\\n        address sender;\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        uint64 wdseq; // only needed for LqWithdraw (refund)\\n        uint64 srcChainId;\\n        bytes32 refId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct RouteInfo {\\n        address sender;\\n        address receiver;\\n        uint64 srcChainId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct MsgWithTransferExecutionParams {\\n        bytes message;\\n        TransferInfo transfer;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n\\n    struct BridgeTransferParams {\\n        bytes request;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n}\\n\",\"keccak256\":\"0x4a815c72988c56480d9b3e18f3f067a000d287342a58dc419a7a0c402994d05b\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Pauser is Ownable, Pausable {\\n    mapping(address => bool) public pausers;\\n\\n    event PauserAdded(address account);\\n    event PauserRemoved(address account);\\n\\n    constructor() {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"Caller is not pauser\\\");\\n        _;\\n    }\\n\\n    function pause() public onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyPauser {\\n        _unpause();\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return pausers[account];\\n    }\\n\\n    function addPauser(address account) public onlyOwner {\\n        _addPauser(account);\\n    }\\n\\n    function removePauser(address account) public onlyOwner {\\n        _removePauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function _addPauser(address account) private {\\n        require(!isPauser(account), \\\"Account is already pauser\\\");\\n        pausers[account] = true;\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) private {\\n        require(isPauser(account), \\\"Account is not pauser\\\");\\n        pausers[account] = false;\\n        emit PauserRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0xa279c397841eb6ceb047c76d626a74f4c5d2ddb2209a7e37b232038680a8da2e\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/Types.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./MsgDataTypes.sol\\\";\\nimport \\\"../interfaces/ICodec.sol\\\";\\n\\nlibrary Types {\\n    /**\\n     * @notice Denotes the status of a cross-chain transfer/swap request\\n     * @dev Partially filled requests are considered 'Succeeded'. There is no 'Failed' state as\\n     * it's only possible if everything reverts and there is no successful transaction\\n     * @param Null An empty status that should never be reached\\n     * @param Succeeded Transfer/swap has succeeded and funds are received by the receiver\\n     * @param Fallback Swaps have failed on the dst chain, and bridge tokens are refunded to receiver\\n     */\\n    enum RequestStatus {\\n        Null,\\n        Succeeded,\\n        Fallback\\n    }\\n\\n    struct Request {\\n        bytes32 id; // see _computeId()\\n        ICodec.SwapDescription[] swaps; // the swaps need to happen on the destination chain\\n        address receiver; // see TransferDescription.receiver\\n        bool nativeOut; // see TransferDescription.nativeOut\\n        uint256 fee; // see TransferDescription.fee\\n        bool allowPartialFill; // see TransferDescription.allowPartialFill\\n        // sets if another cbridge hop is required on the chain, abi.encode(Forward)\\n        bytes forward;\\n    }\\n\\n    struct Forward {\\n        uint64 dstChain;\\n        // abi encoded cbridge params\\n        bytes params;\\n    }\\n\\n    struct TransferDescription {\\n        address receiver; // The receiving party (the user) of the final output token\\n        uint64 dstChainId; // Destination chain id\\n        // The address of the TransferSwapper on the destination chain.\\n        // Ignored if there is no swaps on the destination chain.\\n        address dstTransferSwapper;\\n        // A number unique enough to be used in request ID generation.\\n        uint64 nonce;\\n        // bridge provider identifier\\n        string bridgeProvider;\\n        // Bridge transfers quoted and abi encoded by chainhop backend server.\\n        // Bridge adapter implementations need to decode this themselves.\\n        bytes bridgeParams;\\n        bool nativeIn; // whether to check msg.value and wrap token before swapping/sending\\n        bool nativeOut; // whether to unwrap before sending the final token to user\\n        uint256 fee; // this fee is only executor fee. it does not include msg bridge fee\\n        uint256 feeDeadline; // the unix timestamp before which the fee is valid\\n        // sig of sha3(\\\"executor fee\\\", srcChainId, dstChainId, amountIn, tokenIn, feeDeadline, fee)\\n        // see _verifyFee()\\n        bytes feeSig;\\n        // IMPORTANT: amountIn & tokenIn is completely ignored if src chain has a swap\\n        uint256 amountIn;\\n        address tokenIn;\\n        address dstTokenOut; // the final output token, emitted in event for display purpose only\\n        // in case of multi route swaps, whether to allow the successful swaps to go through\\n        // and sending the amountIn of the failed swaps back to user\\n        bool allowPartialFill;\\n        // sets if another cbridge hop is required on the dst chain, abi.encode(Forward)\\n        bytes forward;\\n    }\\n}\\n\",\"keccak256\":\"0xb7764533367d4a7bb153515eac1c4ebc17c46a374e20c0d18e0c926ec1159955\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162005f7738038062005f7783398101604081905262000034916200072b565b85878686868681818585620000493362000255565b8051825114620000765760405162461bcd60e51b81526004016200006d9062000896565b60405180910390fd5b60005b8251811015620000ef5760008382815181106200009a576200009a620008a8565b6020026020010151805190602001209050620000d981848481518110620000c557620000c5620008a8565b6020026020010151620002a560201b60201c565b5080620000e681620008d4565b91505062000079565b50505060005b82518110156200016d576000828281518110620001165762000116620008a8565b602002602001015180519060200120905062000157848381518110620001405762000140620008a8565b60200260200101518260016200031760201b60201c565b50806200016481620008d4565b915050620000f5565b5050600580546001600160a01b039788166001600160a01b03199182161790915560068054989097169716969096179094555050600160075550506009805460ff1916905550620001be33620003b0565b60018054600b80546001600160a01b039b8c166001600160a01b031991909116179055911515600160a01b026001600160a81b031990921698909916979097179690961790965550506040805180820190915260078152666362726964676560c81b60209091015250507f87d218bfcd262745694c36930f68b5dd697460f1af499de15378f8ddddb1d74f60805250620009869050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160e01b0319909116600090815260026020526040812080546001600160a01b039093166001600160a01b031993841681179091556003805460018101825592527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9091018054909216179055565b6001600160a01b03831660009081526004602090815260408083206001600160e01b03198616845290915290205460ff16811515811515036200036e5760405162461bcd60e51b81526004016200006d906200090c565b506001600160a01b0390921660009081526004602090815260408083206001600160e01b0319909416835292905220805491151560ff19909216919091179055565b6001600160a01b0381166000908152600a602052604090205460ff1615620003ec5760405162461bcd60e51b81526004016200006d9062000953565b6001600160a01b0381166000908152600a602052604090819020805460ff19166001179055517f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8906200044190839062000976565b60405180910390a150565b60006001600160a01b0382165b92915050565b6200046a816200044c565b81146200047657600080fd5b50565b805162000459816200045f565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715620004c457620004c462000486565b6040525050565b6000620004d760405190565b9050620004e582826200049c565b919050565b60006001600160401b0382111562000506576200050662000486565b5060209081020190565b60006001600160401b038211156200052c576200052c62000486565b601f19601f83011660200192915050565b60005b838110156200055a57818101518382015260200162000540565b838111156200056a576000848401525b50505050565b600062000587620005818462000510565b620004cb565b905082815260208101848484011115620005a457620005a4600080fd5b620005b18482856200053d565b509392505050565b600082601f830112620005cf57620005cf600080fd5b8151620005e184826020860162000570565b949350505050565b6000620005fa6200058184620004ea565b838152905060208082019084028301858111156200061b576200061b600080fd5b835b81811015620006615780516001600160401b03811115620006415762000641600080fd5b808601620006508982620005b9565b85525050602092830192016200061d565b5050509392505050565b600082601f830112620006815762000681600080fd5b8151620005e1848260208601620005e9565b6000620006a46200058184620004ea565b83815290506020808201908402830185811115620006c557620006c5600080fd5b835b81811015620006615780620006dd888262000479565b84525060209283019201620006c7565b600082601f830112620007035762000703600080fd5b8151620005e184826020860162000693565b8015156200046a565b8051620004598162000715565b60008060008060008060008060006101208a8c0312156200074f576200074f600080fd5b60006200075d8c8c62000479565b9950506020620007708c828d0162000479565b9850506040620007838c828d0162000479565b9750506060620007968c828d0162000479565b96505060808a01516001600160401b03811115620007b757620007b7600080fd5b620007c58c828d016200066b565b95505060a08a01516001600160401b03811115620007e657620007e6600080fd5b620007f48c828d01620006ed565b94505060c08a01516001600160401b03811115620008155762000815600080fd5b620008238c828d01620006ed565b93505060e08a01516001600160401b03811115620008445762000844600080fd5b620008528c828d016200066b565b925050610100620008668c828d016200071e565b9150509295985092959850929598565b60068152600060208201656c656e206d6d60d01b815291505b5060200190565b60208082528101620004598162000876565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198203620008ea57620008ea620008be565b5060010190565b600381526000602082016206e6f760ec1b815291506200088f565b602080825281016200045981620008f1565b601981526000602082017f4163636f756e7420697320616c72656164792070617573657200000000000000815291506200088f565b6020808252810162000459816200091e565b62000970816200044c565b82525050565b6020810162000459828462000965565b6080516155c7620009b06000396000818161059001528181610c06015261111d01526155c76000f3fe6080604052600436106102385760003560e01c806382dc1ec411610138578063c0404998116100b0578063eeaaa6511161007f578063f2fde38b11610064578063f2fde38b14610683578063fb453787146106a3578063fbf5d763146106b657600080fd5b8063eeaaa65114610620578063efcfd8f51461066357600080fd5b8063c04049981461057e578063c415b95c146105bf578063c5bccca3146105df578063cd9ea342146105ff57600080fd5b806391ec04b511610107578063a1a227fa116100ec578063a1a227fa1461052b578063a42dce801461054b578063a6131ca01461056b57600080fd5b806391ec04b5146104e25780639c649fdf1461051d57600080fd5b806382dc1ec41461046f5780638456cb591461048f5780638da5cb5b146104a4578063918ead76146104c257600080fd5b80635c975abb116101cb5780636ef8d66d1161019a5780637cd2bffc1161017f5780637cd2bffc1461040c57806380f51c121461041f57806382665a8f1461044f57600080fd5b80636ef8d66d146103e2578063715018a6146103f757600080fd5b80635c975abb1461036a578063675df759146103825780636b2c0f55146103a25780636c19e783146103c257600080fd5b806346fbf68e1161020757806346fbf68e146102d1578063547cad12146103175780635ab7afc6146103375780635b5a66a71461034a57600080fd5b80630bcb498214610244578063238ac9331461026d5780633f4ba83a1461029a578063457bfa2f146102b157600080fd5b3661023f57005b600080fd5b6102576102523660046132a7565b6106ec565b604051610264919061337a565b60405180910390f35b34801561027957600080fd5b5060055461028d906001600160a01b031681565b6040516102649190613391565b3480156102a657600080fd5b506102af61073c565b005b3480156102bd57600080fd5b50600b5461028d906001600160a01b031681565b3480156102dd57600080fd5b5061030a6102ec36600461339f565b6001600160a01b03166000908152600a602052604090205460ff1690565b60405161026491906133c8565b34801561032357600080fd5b506102af61033236600461339f565b610775565b6102576103453660046134df565b6107d4565b34801561035657600080fd5b506102af61036536600461339f565b6108ff565b34801561037657600080fd5b5060095460ff1661030a565b34801561038e57600080fd5b506102af61039d3660046135b2565b610952565b3480156103ae57600080fd5b506102af6103bd36600461339f565b6109a5565b3480156103ce57600080fd5b506102af6103dd36600461339f565b6109b9565b3480156103ee57600080fd5b506102af610a20565b34801561040357600080fd5b506102af610a29565b61025761041a3660046134df565b610a3b565b34801561042b57600080fd5b5061030a61043a36600461339f565b600a6020526000908152604090205460ff1681565b34801561045b57600080fd5b5061028d61046a366004613602565b610e15565b34801561047b57600080fd5b506102af61048a36600461339f565b610e3f565b34801561049b57600080fd5b506102af610e50565b3480156104b057600080fd5b506000546001600160a01b031661028d565b3480156104ce57600080fd5b506102af6104dd36600461366e565b610e87565b3480156104ee57600080fd5b5061030a6104fd3660046136e7565b600460209081526000928352604080842090915290825290205460ff1681565b610257610252366004613724565b34801561053757600080fd5b5060015461028d906001600160a01b031681565b34801561055757600080fd5b506102af61056636600461339f565b610fa7565b6102af610579366004613778565b611002565b34801561058a57600080fd5b506105b27f000000000000000000000000000000000000000000000000000000000000000081565b6040516102649190613828565b3480156105cb57600080fd5b5060065461028d906001600160a01b031681565b3480156105eb57600080fd5b506102af6105fa366004613836565b611346565b34801561060b57600080fd5b5060015461030a90600160a01b900460ff1681565b34801561062c57600080fd5b5061065661063b366004613602565b6008602052600090815260409020546001600160a01b031681565b60405161026491906138c9565b34801561066f57600080fd5b506102af61067e3660046138d7565b611412565b34801561068f57600080fd5b506102af61069e36600461339f565b6115f8565b6102576106b13660046132a7565b61162f565b3480156106c257600080fd5b506106566106d1366004613915565b6002602052600090815260409020546001600160a01b031681565b600154600090600160a01b900460ff16610733576001546001600160a01b031633146107335760405162461bcd60e51b815260040161072a9061396d565b60405180910390fd5b95945050505050565b336000908152600a602052604090205460ff1661076b5760405162461bcd60e51b815260040161072a906139b1565b61077361174f565b565b61077d61179b565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f3f8223bcd8b3b875473e9f9e14e1ad075451a2b5ffd31591655da9a01516bf5e916107c991613391565b60405180910390a150565b600154600090600160a01b900460ff16610812576001546001600160a01b031633146108125760405162461bcd60e51b815260040161072a9061396d565b6002600754036108345760405162461bcd60e51b815260040161072a906139f5565b600260075560095460ff161561084c575060026108f0565b6000838060200190518101906108629190613cb3565b905061086e87876117c5565b60008160800151876108809190613d04565b905061089388828460400151600061194a565b8151608083015160408051602081018252600080825291517ffd53a0c19886b8e3b5a497eb3ab7a50cb59734988891978e5f6709e86af805c3946108e19490939287928f9291600291613d64565b60405180910390a16001925050505b60016007559695505050505050565b61090761179b565b600b80546001600160a01b0319166001600160a01b0383161790556040517fb878cd71628ac64b2df1872301925e01164824535b02e8601077749eeeb88c3d906107c9908390613391565b61095a61179b565b610965838383611a7a565b7f5e20184b00709d9f103306958e9fb9d509f78bec1829ca7080f2c43eb2ff21a883838360405161099893929190613de2565b60405180910390a1505050565b6109ad61179b565b6109b681611b10565b50565b6109c161179b565b600580546001600160a01b038381166001600160a01b03198316179092556040519116907f2d025324f0a785e8c12d0a0d91a9caa49df4ef20ff87e0df7213a1d4f3157beb90610a149083908590613e0a565b60405180910390a15050565b61077333611b10565b610a3161179b565b6107736000611b98565b600154600090600160a01b900460ff16610a79576001546001600160a01b03163314610a795760405162461bcd60e51b815260040161072a9061396d565b600260075403610a9b5760405162461bcd60e51b815260040161072a906139f5565b600260075560095460ff1615610ab3575060026108f0565b600083806020019051810190610ac99190613cb3565b90508060800151861015610b3b5760808101869052805160408051602081018252600080825291517ffd53a0c19886b8e3b5a497eb3ab7a50cb59734988891978e5f6709e86af805c393610b29939092909182918d918d91600191613e25565b60405180910390a160019150506108f0565b6080810151610b4a9087613d04565b95508560006060610b5b8a846117c5565b6020840151518a9015610bdf5760606000610b798760200151611be8565b90955093509150506001600160a01b03808216908e1614610bac5760405162461bcd60e51b815260040161072a90613e81565b610bc08760200151838e8a60a00151611e16565b90965094508415610bdc57610bdc8d868960400151600061194a565b50505b60c08501515115610d195760008560c00151806020019051810190610c049190613ec9565b7f00000000000000000000000000000000000000000000000000000000000000006000908152600860205260409020549091506001600160a01b031680610c5d5760405162461bcd60e51b815260040161072a90613f38565b610c716001600160a01b0384168288612159565b6000610c8588600001518960400151612242565b83516040808b0151602087015191516341a5e1f560e11b81529394506001600160a01b0386169363834bc3ea933493610cc89391928e918c918a90600401613f58565b60006040518083038185885af1158015610ce6573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052610d0f9190810190613fbf565b9450505050610db1565b3415610d9d576000876001600160a01b031634604051610d3890613ffa565b60006040518083038185875af1925050503d8060008114610d75576040519150601f19603f3d011682016040523d82523d6000602084013e610d7a565b606091505b5050905080610d9b5760405162461bcd60e51b815260040161072a90614039565b505b610db181858760400151886060015161194a565b507ffd53a0c19886b8e3b5a497eb3ab7a50cb59734988891978e5f6709e86af805c3846000015184848d8860800151600187604051610df69796959493929190614049565b60405180910390a1600194505050505060016007559695505050505050565b60038181548110610e2557600080fd5b6000918252602090912001546001600160a01b0316905081565b610e4761179b565b6109b6816122b3565b336000908152600a602052604090205460ff16610e7f5760405162461bcd60e51b815260040161072a906139b1565b61077361233f565b610e8f61179b565b828114610eae5760405162461bcd60e51b815260040161072a90614098565b60005b83811015610f6357828282818110610ecb57610ecb6140a8565b9050602002016020810190610ee0919061339f565b60086000878785818110610ef657610ef66140a8565b9050602002810190610f0891906140be565b604051610f16929190614128565b6040518091039020815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508080610f5b90614135565b915050610eb1565b507f68d2b5e14eb61b73f2dfa46a255dcba81a3b53259093a83c90da69c3ade70b9684848484604051610f99949392919061429b565b60405180910390a150505050565b610faf61179b565b600680546001600160a01b038381166001600160a01b03198316179092556040519116907f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f3890610a149083908590613e0a565b6002600754036110245760405162461bcd60e51b815260040161072a906139f5565b600260075561103161237c565b82151580611062575067ffffffffffffffff461661105560408701602088016142cc565b67ffffffffffffffff1614155b61107e5760405162461bcd60e51b815260040161072a90614307565b821515806110b65750610160850135158015906110b6575060006110aa6101a08701610180880161339f565b6001600160a01b031614155b6110d25760405162461bcd60e51b815260040161072a90614307565b60006110e160808701876140be565b6040516110ef929190614128565b60405190819003902090508115801561111557506111116101e08701876140be565b1590505b8061113f57507f000000000000000000000000000000000000000000000000000000000000000081145b61115b5760405162461bcd60e51b815260040161072a9061434b565b600081815260086020908152604091829020546001600160a01b03169167ffffffffffffffff461691611192918a01908a016142cc565b67ffffffffffffffff1614806111b057506001600160a01b03811615155b6111cc5760405162461bcd60e51b815260040161072a9061438f565b610160870135606060006111e86101a08b016101808c0161339f565b905060006111fe6101a08c016101808d0161339f565b90508815611223576112186112138a8c614466565b611be8565b929650919450925090505b61123360e08c0160c08d01614473565b156112f357600b546001600160a01b038381169116146112655760405162461bcd60e51b815260040161072a906144c8565b833410156112855760405162461bcd60e51b815260040161072a9061450c565b600b60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156112d557600080fd5b505af11580156112e9573d6000803e3d6000fd5b5050505050611308565b6113086001600160a01b03831633308761239f565b6113348282866113178f6146fc565b8e8e906113249190614466565b61132e8d8f614466565b896123c0565b50506001600755505050505050505050565b61134e61179b565b60008383604051611360929190614128565b604051809103902090506113e181836001600160e01b0319909116600090815260026020526040812080546001600160a01b039093166001600160a01b031993841681179091556003805460018101825592527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9091018054909216179055565b7f58ddcdb40971f55ad1b6a8a28067274a4ffc7e9d77c3ea14a17652faa705e1978183604051610f99929190614708565b6006546001600160a01b0316331461143c5760405162461bcd60e51b815260040161072a9061474a565b60005b828110156115f257600084848381811061145b5761145b6140a8565b9050602002016020810190611470919061339f565b6001600160a01b03160361150b5760004790506000836001600160a01b03168261c350906040516114a090613ffa565b600060405180830381858888f193505050503d80600081146114de576040519150601f19603f3d011682016040523d82523d6000602084013e6114e3565b606091505b50509050806115045760405162461bcd60e51b815260040161072a9061478e565b50506115e0565b600084848381811061151f5761151f6140a8565b9050602002016020810190611534919061339f565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161155f9190613391565b602060405180830381865afa15801561157c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a0919061479e565b90506115de83828787868181106115b9576115b96140a8565b90506020020160208101906115ce919061339f565b6001600160a01b031691906124a2565b505b806115ea81614135565b91505061143f565b50505050565b61160061179b565b6001600160a01b0381166116265760405162461bcd60e51b815260040161072a9061481c565b6109b681611b98565b60006002600754036116535760405162461bcd60e51b815260040161072a906139f5565b600260075560095460ff161561166b57506002611741565b600b546001600160a01b0387811691161461169a576116956001600160a01b03871633308861239f565b6116ba565b843410156116ba5760405162461bcd60e51b815260040161072a90614860565b60006116c88486018661496c565b90506116d487876117c5565b6116e587878360400151600061194a565b8051608082015160408051602081018252600080825291517ffd53a0c19886b8e3b5a497eb3ab7a50cb59734988891978e5f6709e86af805c394611733949093928c928e9291600291613d64565b60405180910390a160019150505b600160075595945050505050565b6117576124c1565b6009805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516117919190613391565b60405180910390a1565b6000546001600160a01b031633146107735760405162461bcd60e51b815260040161072a906149d9565b600b546001600160a01b039081169083160361194657600154604080516320a6037160e21b815290516000926001600160a01b0316916382980dc49160048083019260209291908290030181865afa158015611825573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184991906149e9565b9050600b60009054906101000a90046001600160a01b03166001600160a01b0316816001600160a01b031663457bfa2f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cc91906149e9565b6001600160a01b03160361194457600b60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561192a57600080fd5b505af115801561193e573d6000803e3d6000fd5b50505050505b505b5050565b8015611a6657600b546001600160a01b0385811691161461197d5760405162461bcd60e51b815260040161072a90614a3e565b600b54604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d906119ad908690600401613828565b600060405180830381600087803b1580156119c757600080fd5b505af11580156119db573d6000803e3d6000fd5b505050506000826001600160a01b03168461c350906040516119fc90613ffa565b600060405180830381858888f193505050503d8060008114611a3a576040519150601f19603f3d011682016040523d82523d6000602084013e611a3f565b606091505b5050905080611a605760405162461bcd60e51b815260040161072a90614039565b506115f2565b6115f26001600160a01b03851683856124a2565b6001600160a01b03831660009081526004602090815260408083206001600160e01b03198616845290915290205460ff1681151581151503611ace5760405162461bcd60e51b815260040161072a90614307565b506001600160a01b0390921660009081526004602090815260408083206001600160e01b0319909416835292905220805491151560ff19909216919091179055565b6001600160a01b0381166000908152600a602052604090205460ff16611b485760405162461bcd60e51b815260040161072a90614a82565b6001600160a01b0381166000908152600a602052604090819020805460ff19169055517fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e906107c9908390613391565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060006060600080611bfb876124e3565b925060005b8751811015611e0c5760046000898381518110611c1f57611c1f6140a8565b6020026020010151600001516001600160a01b03166001600160a01b031681526020019081526020016000206000898381518110611c5f57611c5f6140a8565b602002602001015160200151611c7490614aa6565b6001600160e01b031916815260208101919091526040016000205460ff16611cae5760405162461bcd60e51b815260040161072a90614b1f565b6000806000868481518110611cc557611cc56140a8565b60200260200101516001600160a01b031663358f0e1c8c8681518110611ced57611ced6140a8565b60200260200101516040518263ffffffff1660e01b8152600401611d119190614b5b565b606060405180830381865afa158015611d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d529190614b6c565b919450925090506001600160a01b0386161580611d805750816001600160a01b0316866001600160a01b0316145b611d9c5760405162461bcd60e51b815260040161072a90614be6565b90945084906001600160a01b0385161580611dc85750806001600160a01b0316856001600160a01b0316145b611de45760405162461bcd60e51b815260040161072a90614c2a565b935083611df1838b614c3a565b99509097509550819050611e0481614135565b915050611c00565b5050509193509193565b6000806000806000611e2989888a612622565b9250925092506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611e5d9190613391565b602060405180830381865afa158015611e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9e919061479e565b905060005b8a518110156120ac5760008a8281518110611ec057611ec06140a8565b60200260200101516001600160a01b0316634c6da2698d8481518110611ee857611ee86140a8565b602002602001015160200151888581518110611f0657611f066140a8565b6020026020010151306040518463ffffffff1660e01b8152600401611f2d93929190614c52565b600060405180830381865afa158015611f4a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f729190810190613fbf565b9050611fc88c8381518110611f8957611f896140a8565b602002602001015160000151878481518110611fa757611fa76140a8565b6020026020010151876001600160a01b03166121599092919063ffffffff16565b60008c8381518110611fdc57611fdc6140a8565b6020026020010151600001516001600160a01b031682604051611fff9190614ca1565b6000604051808303816000865af19150503d806000811461203c576040519150601f19603f3d011682016040523d82523d6000602084013e612041565b606091505b50509050808061204e5750895b61206a5760405162461bcd60e51b815260040161072a90614ce1565b8061209757868381518110612081576120816140a8565b6020026020010151886120949190614c3a565b97505b505080806120a490614135565b915050611ea3565b506040516370a0823160e01b81526000906001600160a01b038416906370a08231906120dc903090600401613391565b602060405180830381865afa1580156120f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211d919061479e565b90506121298282613d04565b96506000871161214b5760405162461bcd60e51b815260040161072a90614d25565b505050505094509492505050565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b815260040161218a929190613e0a565b602060405180830381865afa1580156121a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121cb919061479e565b6121d59190614c3a565b90506115f28463095ea7b360e01b85846040516024016121f6929190614d35565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909316929092179091526127d7565b60608060606040518060e00160405280868152602001838152602001856001600160a01b03168152602001600015158152602001600081526020016000151581526020018281525060405160200161229a9190614e47565b6040516020818303038152906040529250505092915050565b6001600160a01b0381166000908152600a602052604090205460ff16156122ec5760405162461bcd60e51b815260040161072a90614e8c565b6001600160a01b0381166000908152600a602052604090819020805460ff19166001179055517f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8906107c9908390613391565b61234761237c565b6009805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117843390565b60095460ff16156107735760405162461bcd60e51b815260040161072a90614ed0565b6115f2846323b872dd60e01b8585856040516024016121f693929190614ee0565b82518590156123f85760006123d58584612866565b92509050806123f65760405162461bcd60e51b815260040161072a90614f3c565b505b600061240c86600001518760600151612bb0565b90504667ffffffffffffffff16866020015167ffffffffffffffff1603612487577f0e248ac8be20725176a5f0ab093c5fbb964634d4675012f3d3ad66e69e56d5b781888b858c604051612464959493929190614f4c565b60405180910390a1612480888388600001518960e0015161194a565b5050612499565b612496818a8a89888c88612be8565b50505b50505050505050565b6119448363a9059cbb60e01b84846040516024016121f6929190614d35565b60095460ff166107735760405162461bcd60e51b815260040161072a90614fc2565b60606000825167ffffffffffffffff811115612501576125016133f1565b60405190808252806020026020018201604052801561252a578160200160208202803683370190505b50905060005b835181101561261b57600084828151811061254d5761254d6140a8565b60200260200101516020015161256290614aa6565b6001600160e01b0319811660009081526002602052604090205484519192506001600160a01b03169084908490811061259d5761259d6140a8565b60200260200101906001600160a01b031690816001600160a01b03168152505060006001600160a01b03168383815181106125da576125da6140a8565b60200260200101516001600160a01b0316036126085760405162461bcd60e51b815260040161072a90615006565b508061261381614135565b915050612530565b5092915050565b60606000806000865167ffffffffffffffff811115612643576126436133f1565b60405190808252806020026020018201604052801561266c578160200160208202803683370190505b50935060005b875181101561276057600086828151811061268f5761268f6140a8565b60200260200101516001600160a01b031663358f0e1c8a84815181106126b7576126b76140a8565b60200260200101516040518263ffffffff1660e01b81526004016126db9190614b5b565b606060405180830381865afa1580156126f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271c9190614b6c565b9096509450905061272d8184614c3a565b925080868381518110612742576127426140a8565b6020908102919091010152508061275881614135565b915050612672565b5060005b84518110156127cc5781858281518110612780576127806140a8565b6020026020010151886127939190615016565b61279d919061504b565b8582815181106127af576127af6140a8565b6020908102919091010152806127c481614135565b915050612764565b505093509350939050565b600061282c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d689092919063ffffffff16565b805190915015611944578080602001905181019061284a919061505f565b6119445760405162461bcd60e51b815260040161072a906150da565b60008060005b8451811015612ba757600080600086848151811061288c5761288c6140a8565b60200260200101516001600160a01b031663358f0e1c8986815181106128b4576128b46140a8565b60200260200101516040518263ffffffff1660e01b81526004016128d89190614b5b565b606060405180830381865afa1580156128f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129199190614b6c565b9250925092506000878581518110612933576129336140a8565b60200260200101516001600160a01b0316634c6da2698a878151811061295b5761295b6140a8565b60200260200101516020015186306040518463ffffffff1660e01b815260040161298793929190614c52565b600060405180830381865afa1580156129a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129cc9190810190613fbf565b9050612a008986815181106129e3576129e36140a8565b6020908102919091010151516001600160a01b0385169086612159565b6040516370a0823160e01b81526000906001600160a01b038416906370a0823190612a2f903090600401613391565b602060405180830381865afa158015612a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a70919061479e565b9050898681518110612a8457612a846140a8565b6020026020010151600001516001600160a01b031682604051612aa79190614ca1565b6000604051808303816000865af19150503d8060008114612ae4576040519150601f19603f3d011682016040523d82523d6000602084013e612ae9565b606091505b50508098505087612b065760008097509750505050505050612ba9565b6040516370a0823160e01b81526000906001600160a01b038516906370a0823190612b35903090600401613391565b602060405180830381865afa158015612b52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b76919061479e565b9050612b828282613d04565b612b8c9089614c3a565b97505050505050508080612b9f90614135565b91505061286c565b505b9250929050565b600033834684604051602001612bc99493929190615131565b6040516020818303038152906040528051906020012090505b92915050565b60008084511180612bff57506000856101e0015151115b612c0a578451612c10565b84604001515b90506060612c1f86858a612d81565b60c0860151349015612c3857612c358534613d04565b90505b608087015180516020918201206000908152600890915260409020546001600160a01b0390811690612c6d908a168287612159565b6000612c7a8c8a8a612e0b565b9050816001600160a01b031663834bc3ea848b60200151888a8f8f60a00151886040518863ffffffff1660e01b8152600401612cbb96959493929190613f58565b60006040518083038185885af1158015612cd9573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052612d029190810190613fbf565b93505050507f082e2f634ceec1af5105aa53f234b7efad94428a54a714e3b7c7115ee549308089828860200151878c8b6101a00151888e8b8f60800151604051612d559a99989796959493929190615179565b60405180910390a1505050505050505050565b6060612d778484600085612e8c565b90505b9392505050565b60004684602001518484876101200151886101000151604051602001612dac9695949392919061521b565b6040516020818303038152906040528051906020012090506000612dcf82612f50565b9050612de081866101400151612f80565b4285610120015111612e045760405162461bcd60e51b815260040161072a906152df565b5050505050565b60606040518060e0016040528085815260200183815260200184600001516001600160a01b031681526020018460e00151151581526020018461010001518152602001846101c0015115158152602001846101e00151815250604051602001612e749190614e47565b60405160208183030381529060405290509392505050565b606082471015612eae5760405162461bcd60e51b815260040161072a90615349565b6001600160a01b0385163b612ed55760405162461bcd60e51b815260040161072a9061538d565b600080866001600160a01b03168587604051612ef19190614ca1565b60006040518083038185875af1925050503d8060008114612f2e576040519150601f19603f3d011682016040523d82523d6000602084013e612f33565b606091505b5091509150612f43828286612fbc565b925050505b949350505050565b600081604051602001612f63919061539d565b604051602081830303815290604052805190602001209050919050565b6000612f8c8383612ff5565b6005549091506001600160a01b038083169116146119445760405162461bcd60e51b815260040161072a9061540c565b60608315612fcb575081612d7a565b825115612fdb5782518084602001fd5b8160405162461bcd60e51b815260040161072a919061541c565b60008060006130048585613019565b915091506130118161305b565b509392505050565b600080825160410361304f5760208301516040840151606085015160001a6130438782858561313b565b94509450505050612ba9565b50600090506002612ba9565b600081600481111561306f5761306f61332b565b036130775750565b600181600481111561308b5761308b61332b565b036130a85760405162461bcd60e51b815260040161072a90615461565b60028160048111156130bc576130bc61332b565b036130d95760405162461bcd60e51b815260040161072a906154a5565b60038160048111156130ed576130ed61332b565b0361310a5760405162461bcd60e51b815260040161072a906154f4565b600481600481111561311e5761311e61332b565b036109b65760405162461bcd60e51b815260040161072a90615543565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156131725750600090506003613212565b8460ff16601b1415801561318a57508460ff16601c14155b1561319b5750600090506004613212565b6000600187878787604051600081526020016040526040516131c0949392919061555c565b6020604051602081039080840390855afa1580156131e2573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661320b57600060019250925050613212565b9150600090505b94509492505050565b60006001600160a01b038216612be2565b6132358161321b565b81146109b657600080fd5b8035612be28161322c565b80613235565b8035612be28161324b565b60008083601f84011261327157613271600080fd5b50813567ffffffffffffffff81111561328c5761328c600080fd5b602083019150836001820283011115612ba957612ba9600080fd5b6000806000806000608086880312156132c2576132c2600080fd5b60006132ce8888613240565b95505060206132df88828901613251565b945050604086013567ffffffffffffffff8111156132ff576132ff600080fd5b61330b8882890161325c565b9350935050606061331e88828901613240565b9150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b600381106109b6576109b661332b565b8061335b81613341565b919050565b6000612be282613351565b61337481613360565b82525050565b60208101612be2828461336b565b6133748161321b565b60208101612be28284613388565b6000602082840312156133b4576133b4600080fd5b6000612f488484613240565b801515613374565b60208101612be282846133c0565b67ffffffffffffffff8116613235565b8035612be2816133d6565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171561342d5761342d6133f1565b6040525050565b600061343f60405190565b905061335b8282613407565b600067ffffffffffffffff821115613465576134656133f1565b601f19601f83011660200192915050565b82818337506000910152565b60006134956134908461344b565b613434565b9050828152602081018484840111156134b0576134b0600080fd5b613011848285613476565b600082601f8301126134cf576134cf600080fd5b8135612f48848260208601613482565b60008060008060008060c087890312156134fb576134fb600080fd5b60006135078989613240565b965050602061351889828a01613240565b955050604061352989828a01613251565b945050606061353a89828a016133e6565b935050608087013567ffffffffffffffff81111561355a5761355a600080fd5b61356689828a016134bb565b92505060a061357789828a01613240565b9150509295509295509295565b6001600160e01b03198116613235565b8035612be281613584565b801515613235565b8035612be28161359f565b6000806000606084860312156135ca576135ca600080fd5b60006135d68686613240565b93505060206135e786828701613594565b92505060406135f8868287016135a7565b9150509250925092565b60006020828403121561361757613617600080fd5b6000612f488484613251565b60008083601f84011261363857613638600080fd5b50813567ffffffffffffffff81111561365357613653600080fd5b602083019150836020820283011115612ba957612ba9600080fd5b6000806000806040858703121561368757613687600080fd5b843567ffffffffffffffff8111156136a1576136a1600080fd5b6136ad87828801613623565b9450945050602085013567ffffffffffffffff8111156136cf576136cf600080fd5b6136db87828801613623565b95989497509550505050565b600080604083850312156136fd576136fd600080fd5b60006137098585613240565b925050602061371a85828601613594565b9150509250929050565b60008060008060006080868803121561373f5761373f600080fd5b600061374b8888613240565b95505060206132df888289016133e6565b6000610200828403121561377257613772600080fd5b50919050565b60008060008060006060868803121561379357613793600080fd5b853567ffffffffffffffff8111156137ad576137ad600080fd5b6137b98882890161375c565b955050602086013567ffffffffffffffff8111156137d9576137d9600080fd5b6137e588828901613623565b9450945050604086013567ffffffffffffffff81111561380757613807600080fd5b61381388828901613623565b92509250509295509295909350565b80613374565b60208101612be28284613822565b60008060006040848603121561384e5761384e600080fd5b833567ffffffffffffffff81111561386857613868600080fd5b6138748682870161325c565b935093505060206135f886828701613240565b6000612be26001600160a01b03831661389e565b90565b6001600160a01b031690565b6000612be282613887565b6000612be2826138aa565b613374816138b5565b60208101612be282846138c0565b6000806000604084860312156138ef576138ef600080fd5b833567ffffffffffffffff81111561390957613909600080fd5b61387486828701613623565b60006020828403121561392a5761392a600080fd5b6000612f488484613594565b601981526000602082017f63616c6c6572206973206e6f74206d6573736167652062757300000000000000815291505b5060200190565b60208082528101612be281613936565b601481526000602082017f43616c6c6572206973206e6f742070617573657200000000000000000000000081529150613966565b60208082528101612be28161397d565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529150613966565b60208082528101612be2816139c1565b8051612be28161324b565b600067ffffffffffffffff821115613a2a57613a2a6133f1565b5060209081020190565b8051612be28161322c565b60005b83811015613a5a578181015183820152602001613a42565b838111156115f25750506000910152565b6000613a796134908461344b565b905082815260208101848484011115613a9457613a94600080fd5b613011848285613a3f565b600082601f830112613ab357613ab3600080fd5b8151612f48848260208601613a6b565b600060408284031215613ad857613ad8600080fd5b613ae26040613434565b90506000613af08484613a34565b825250602082015167ffffffffffffffff811115613b1057613b10600080fd5b613b1c84828501613a9f565b60208301525092915050565b6000613b3661349084613a10565b83815290506020808201908402830185811115613b5557613b55600080fd5b835b81811015613b9657805167ffffffffffffffff811115613b7957613b79600080fd5b808601613b868982613ac3565b8552505060209283019201613b57565b5050509392505050565b600082601f830112613bb457613bb4600080fd5b8151612f48848260208601613b28565b8051612be28161359f565b600060e08284031215613be457613be4600080fd5b613bee60e0613434565b90506000613bfc8484613a05565b825250602082015167ffffffffffffffff811115613c1c57613c1c600080fd5b613c2884828501613ba0565b6020830152506040613c3c84828501613a34565b6040830152506060613c5084828501613bc4565b6060830152506080613c6484828501613a05565b60808301525060a0613c7884828501613bc4565b60a08301525060c082015167ffffffffffffffff811115613c9b57613c9b600080fd5b613ca784828501613a9f565b60c08301525092915050565b600060208284031215613cc857613cc8600080fd5b815167ffffffffffffffff811115613ce257613ce2600080fd5b612f4884828501613bcf565b634e487b7160e01b600052601160045260246000fd5b600082821015613d1657613d16613cee565b500390565b6000612be261389b8381565b61337481613d1b565b6000613d3a825190565b808452602084019350613d51818560208601613a3f565b601f19601f8201165b9093019392505050565b60e08101613d72828a613822565b613d7f6020830189613d27565b613d8c6040830188613822565b613d996060830187613388565b613da66080830186613822565b613db360a083018561336b565b81810360c0830152613dc58184613d30565b9998505050505050505050565b6001600160e01b03198116613374565b60608101613df08286613388565b613dfd6020830185613dd2565b612f4860408301846133c0565b60408101613e188285613388565b612d7a6020830184613388565b60e08101613e33828a613822565b613e406020830189613d27565b613d8c6040830188613d27565b600781526000602082017f746b696e206d6d0000000000000000000000000000000000000000000000000081529150613966565b60208082528101612be281613e4d565b8051612be2816133d6565b600060408284031215613eb157613eb1600080fd5b613ebb6040613434565b90506000613af08484613e91565b600060208284031215613ede57613ede600080fd5b815167ffffffffffffffff811115613ef857613ef8600080fd5b612f4884828501613e9c565b600f81526000602082017f63627269646765206e6f7420736574000000000000000000000000000000000081529150613966565b60208082528101612be281613f04565b67ffffffffffffffff8116613374565b60c08101613f668289613f48565b613f736020830188613388565b613f806040830187613822565b613f8d6060830186613388565b8181036080830152613f9f8185613d30565b905081810360a0830152613fb38184613d30565b98975050505050505050565b600060208284031215613fd457613fd4600080fd5b815167ffffffffffffffff811115613fee57613fee600080fd5b612f4884828501613a9f565b6000612be28261389b565b600981526000602082017f73656e64206661696c000000000000000000000000000000000000000000000081529150613966565b60208082528101612be281614005565b60e08101614057828a613822565b613d7f6020830189613822565b601481526000602082017f706172616d732073697a65206d69736d6174636800000000000000000000000081529150613966565b60208082528101612be281614064565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19368590030181126140d9576140d9600080fd5b80840192508235915067ffffffffffffffff8211156140fa576140fa600080fd5b602083019250600182023603831315612ba757612ba7600080fd5b6000614122838584613476565b50500190565b6000612f48828486614115565b6000600019820361414857614148613cee565b5060010190565b8183526000602084019350614165838584613476565b601f19601f840116613d5a565b6000612d7784848461414f565b6000808335601e193685900301811261419a5761419a600080fd5b83810160208101935035915067ffffffffffffffff8211156141be576141be600080fd5b36829003831315612ba757612ba7600080fd5b818352600060208401935083602084028101838060005b878110156142235784840389526141ff828461417f565b61420a868284614172565b95506020840160209b909b019a935050506001016141e8565b5091979650505050505050565b600061423c8383613388565b505060200190565b6000612d7a6020840184613240565b8183526000602084019350818060005b85811015614290576142758284614244565b61427f8882614230565b975060208301925050600101614263565b509495945050505050565b604080825281016142ad8186886141d1565b905081810360208301526142c2818486614253565b9695505050505050565b6000602082840312156142e1576142e1600080fd5b6000612f4884846133e6565b600381526000602082016206e6f760ec1b81529150613966565b60208082528101612be2816142ed565b601b81526000602082017f62726964676520646f6573206e6f7420737570706f7274206d7367000000000081529150613966565b60208082528101612be281614317565b601281526000602082017f756e737570706f7274656420627269646765000000000000000000000000000081529150613966565b60208082528101612be28161435b565b6000604082840312156143b4576143b4600080fd5b6143be6040613434565b905060006143cc8484613240565b825250602082013567ffffffffffffffff8111156143ec576143ec600080fd5b613b1c848285016134bb565b600061440661349084613a10565b8381529050602080820190840283018581111561442557614425600080fd5b835b81811015613b9657803567ffffffffffffffff81111561444957614449600080fd5b808601614456898261439f565b8552505060209283019201614427565b6000612d7a3684846143f8565b60006020828403121561448857614488600080fd5b6000612f4884846135a7565b601281526000602082017f746b696e206e6f206e617469766557726170000000000000000000000000000081529150613966565b60208082528101612be281614494565b600b81526000602082017f696e7366636e7420616d7400000000000000000000000000000000000000000081529150613966565b60208082528101612be2816144d8565b6000610200828403121561453257614532600080fd5b61453d610200613434565b9050600061454b8484613240565b825250602061455c848483016133e6565b602083015250604061457084828501613240565b6040830152506060614584848285016133e6565b606083015250608082013567ffffffffffffffff8111156145a7576145a7600080fd5b6145b3848285016134bb565b60808301525060a082013567ffffffffffffffff8111156145d6576145d6600080fd5b6145e2848285016134bb565b60a08301525060c06145f6848285016135a7565b60c08301525060e061460a848285016135a7565b60e08301525061010061461f84828501613251565b6101008301525061012061463584828501613251565b6101208301525061014082013567ffffffffffffffff81111561465a5761465a600080fd5b614666848285016134bb565b6101408301525061016061467c84828501613251565b6101608301525061018061469284828501613240565b610180830152506101a06146a884828501613240565b6101a0830152506101c06146be848285016135a7565b6101c0830152506101e082013567ffffffffffffffff8111156146e3576146e3600080fd5b6146ef848285016134bb565b6101e08301525092915050565b6000612be2368361451c565b60408101613e188285613dd2565b601181526000602082017f6e6f742066656520636f6c6c6563746f7200000000000000000000000000000081529150613966565b60208082528101612be281614716565b601281526000602082017f73656e64206e6174697665206661696c6564000000000000000000000000000081529150613966565b60208082528101612be28161475a565b6000602082840312156147b3576147b3600080fd5b6000612f488484613a05565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015291505b5060400190565b60208082528101612be2816147bf565b601881526000602082017f6e6f206e6174697665207472616e7366657272656420696e000000000000000081529150613966565b60208082528101612be28161482c565b600082601f83011261488457614884600080fd5b8135612f488482602086016143f8565b600060e082840312156148a9576148a9600080fd5b6148b360e0613434565b905060006148c18484613251565b825250602082013567ffffffffffffffff8111156148e1576148e1600080fd5b6148ed84828501614870565b602083015250604061490184828501613240565b6040830152506060614915848285016135a7565b606083015250608061492984828501613251565b60808301525060a061493d848285016135a7565b60a08301525060c082013567ffffffffffffffff81111561496057614960600080fd5b613ca7848285016134bb565b60006020828403121561498157614981600080fd5b813567ffffffffffffffff81111561499b5761499b600080fd5b612f4884828501614894565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000613966565b60208082528101612be2816149a7565b6000602082840312156149fe576149fe600080fd5b6000612f488484613a34565b600c81526000602082017f746b206e6f206e6174697665000000000000000000000000000000000000000081529150613966565b60208082528101612be281614a0a565b601581526000602082017f4163636f756e74206973206e6f7420706175736572000000000000000000000081529150613966565b60208082528101612be281614a4e565b6000612be282516001600160e01b03191690565b6000614ab0825190565b60208301614abd81614a92565b92506004821015614ae457614adf6001600160e01b0319836004036008021b90565b831692505b5050919050565b600f81526000602082017f756e737570706f7274656420646578000000000000000000000000000000000081529150613966565b60208082528101612be281614aeb565b80516000906040840190614b438582613388565b50602083015184820360208601526107338282613d30565b60208082528101612d7a8184614b2f565b600080600060608486031215614b8457614b84600080fd5b6000614b908686613a05565b9350506020614ba186828701613a34565b92505060406135f886828701613a34565b600d81526000602082017f746b696e206d69736d617463680000000000000000000000000000000000000081529150613966565b60208082528101612be281614bb2565b600c81526000602082017f746b6f206d69736d61746368000000000000000000000000000000000000000081529150613966565b60208082528101612be281614bf6565b60008219821115614c4d57614c4d613cee565b500190565b60608082528101614c638186613d30565b9050614c726020830185613822565b612f486040830184613388565b6000614c89825190565b614c97818560208601613a3f565b9290920192915050565b6000612d7a8284614c7f565b600b81526000602082017f73776170206661696c656400000000000000000000000000000000000000000081529150613966565b60208082528101612be281614cad565b601081526000602082017f616c6c207377617073206661696c65640000000000000000000000000000000081529150613966565b60208082528101612be281614cf1565b60408101614d438285613388565b612d7a6020830184613822565b6000612d7a8383614b2f565b6000614d66825190565b80845260208401935083602082028501614d808560200190565b8060005b858110156142235784840389528151614d9d8582614d50565b94506020830160209a909a0199925050600101614d84565b805160009060e0840190614dc98582613822565b5060208301518482036020860152614de18282614d5c565b9150506040830151614df66040860182613388565b506060830151614e0960608601826133c0565b506080830151614e1c6080860182613822565b5060a0830151614e2f60a08601826133c0565b5060c083015184820360c08601526107338282613d30565b60208082528101612d7a8184614db5565b601981526000602082017f4163636f756e7420697320616c7265616479207061757365720000000000000081529150613966565b60208082528101612be281614e58565b601081526000602082017f5061757361626c653a207061757365640000000000000000000000000000000081529150613966565b60208082528101612be281614e9c565b60608101614eee8286613388565b614efb6020830185613388565b612f486040830184613822565b600981526000602082017f73776170206661696c000000000000000000000000000000000000000000000081529150613966565b60208082528101612be281614f08565b60a08101614f5a8288613822565b614f676020830187613822565b614f746040830186613388565b614f816060830185613822565b6142c26080830184613388565b601481526000602082017f5061757361626c653a206e6f742070617573656400000000000000000000000081529150613966565b60208082528101612be281614f8e565b600c81526000602082017f636463206e6f20666f756e64000000000000000000000000000000000000000081529150613966565b60208082528101612be281614fd2565b600081600019048311821515161561503057615030613cee565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261505a5761505a615035565b500490565b60006020828403121561507457615074600080fd5b6000612f488484613bc4565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f7420737563636565640000000000000000000000000000000000000000000060208201529150614815565b60208082528101612be281615080565b6000612be28260601b90565b6000612be2826150ea565b61337461510d8261321b565b6150f6565b6000612be28260c01b90565b61337467ffffffffffffffff8216615112565b600061513d8287615101565b60148201915061514d8286615101565b60148201915061515d828561511e565b60088201915061516d828461511e565b50600801949350505050565b6101408101615188828d613822565b818103602083015261519a818c613d30565b90506151a9604083018b613f48565b6151b6606083018a613822565b6151c36080830189613388565b6151d060a0830188613388565b6151dd60c0830187613388565b6151ea60e0830186613388565b6151f8610100830185613822565b81810361012083015261520b8184613d30565b9c9b505050505050505050505050565b7f6578656375746f722066656500000000000000000000000000000000000000008152600c01600061524d828961511e565b60088201915061525d828861511e565b60088201915061526d8287613822565b60208201915061527d8286615101565b60148201915061528d8285613822565b60208201915061529d8284613822565b506020019695505050505050565b601181526000602082017f646561646c696e6520657863656564656400000000000000000000000000000081529150613966565b60208082528101612be2816152ab565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f81527f722063616c6c000000000000000000000000000000000000000000000000000060208201529150614815565b60208082528101612be2816152ef565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150613966565b60208082528101612be281615359565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c0160006153cf8284613822565b50602001919050565b600e81526000602082017f696e76616c6964207369676e657200000000000000000000000000000000000081529150613966565b60208082528101612be2816153d8565b60208082528101612d7a8184613d30565b601881526000602082017f45434453413a20696e76616c6964207369676e6174757265000000000000000081529150613966565b60208082528101612be28161542d565b601f81526000602082017f45434453413a20696e76616c6964207369676e6174757265206c656e6774680081529150613966565b60208082528101612be281615471565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b60208201529150614815565b60208082528101612be2816154b5565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202776272076616c815261756560f01b60208201529150614815565b60208082528101612be281615504565b60ff8116613374565b6080810161556a8287613822565b6155776020830186615553565b6155846040830185613822565b610733606083018461382256fea2646970667358221220601cde2b0e9fb0a8794427468b4ad9b1137bde8b2ee75fa69c11706fd8bf49b664736f6c634300080f0033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Chainhop Dex TeamPadoriku",
    "events": {
      "DirectSwap(bytes32,uint256,address,uint256,address)": {
        "params": {
          "amountIn": "the input amount approved by the sender",
          "amountOut": "the output amount gained after swapping using the input tokens",
          "id": "see _computeId()",
          "tokenIn": "the input token approved by the sender",
          "tokenOut": "the output token gained after swapping using the input tokens"
        }
      },
      "RequestDone(bytes32,uint256,uint256,address,uint256,uint8,bytes)": {
        "details": "refundAmount may be fill by either a complete refund or when allowPartialFill is on and some swaps fails in the swap routes",
        "params": {
          "dstAmount": "the final output token (after bridging and swapping) desired by the sender",
          "feeCollected": "the fee chainhop deducts from bridge out token",
          "id": "see _computeId()",
          "refundAmount": "the amount refunded to the receiver in bridge token",
          "refundToken": "bridge out token",
          "status": "see RequestStatus"
        }
      },
      "RequestSent(bytes32,bytes,uint64,uint256,address,address,address,address,uint256,string)": {
        "params": {
          "bridgeAmount": "the amount of the bridgeToken to bridge",
          "bridgeOutReceiver": "the receiver (user or dst TransferSwapper) of the bridge token",
          "bridgeProvider": "the bridge provider",
          "bridgeResp": "arbitrary response data returned by bridge",
          "bridgeToken": "the token used for bridging",
          "dstChainId": "destination chain id",
          "dstToken": "the final output token (after bridging and swapping) desired by the sender",
          "id": "see _computeId()",
          "srcAmount": "input amount approved by the sender",
          "srcToken": "the input token approved by the sender"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "executeMessage(address,uint64,bytes,address)": {
        "params": {
          "_executor": "Address who called the MessageBus execution function",
          "_message": "Arbitrary message bytes originated from and encoded by the source app contract",
          "_sender": "The address of the source app contract",
          "_srcChainId": "The source chain ID where the transfer is originated from"
        }
      },
      "executeMessageWithTransfer(address,address,uint256,uint64,bytes,address)": {
        "details": "If allowPartialFill is off, this function reverts as soon as one swap in swap routes failsThis function is called and is only callable by MessageBus. The transaction of such call is triggered by executor.Bridge contract *always* sends native token to its receiver (this contract) even though the _token field is always an ERC20 token",
        "params": {
          "_amount": "the amount of token received by this contract",
          "_token": "the token received by this contract"
        },
        "returns": {
          "_0": "ok whether the processing is successful"
        }
      },
      "executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)": {
        "details": "Only called if executeMessageWithTransfer revertsBridge contract *always* sends native token to its receiver (this contract) even though the _token field is always an ERC20 token",
        "params": {
          "_amount": "the amount of token received by this contract",
          "_token": "the token received by this contract"
        },
        "returns": {
          "_0": "ok whether the processing is successful"
        }
      },
      "executeMessageWithTransferRefund(address,uint256,bytes,address)": {
        "params": {
          "_amount": "The amount of the original transfer",
          "_executor": "Address who called the MessageBus execution function",
          "_message": "The same message associated with the original transfer",
          "_token": "The token address of the original transfer"
        }
      },
      "executeMessageWithTransferRefundFromAdapter(address,uint256,bytes,address)": {
        "details": "only MessageBus can call this function, this requires the user to get sigs of the message from SGNBridge contract *always* sends native token to its receiver (this contract) even though the _token field is always an ERC20 token",
        "params": {
          "_amount": "the amount of token received by this contract",
          "_token": "the token received by this contract"
        },
        "returns": {
          "_0": "ok whether the processing is successful"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "An app that enables swapping on a chain, transferring to another chain and swapping another time on the destination chain before sending the result tokens to a user",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DirectSwap(bytes32,uint256,address,uint256,address)": {
        "notice": "Emitted when requested dstChainId == srcChainId, no bridging"
      },
      "RequestDone(bytes32,uint256,uint256,address,uint256,uint8,bytes)": {
        "notice": "Emitted when operations on dst chain is done."
      },
      "RequestSent(bytes32,bytes,uint64,uint256,address,address,address,address,uint256,string)": {
        "notice": "Emitted when operations on src chain is done, the transfer is sent through the bridge"
      }
    },
    "kind": "user",
    "methods": {
      "executeMessage(address,uint64,bytes,address)": {
        "notice": "Called by MessageBus (MessageBusReceiver)"
      },
      "executeMessageWithTransfer(address,address,uint256,uint64,bytes,address)": {
        "notice": "Executes a swap if needed, then sends the output token to the receiver"
      },
      "executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)": {
        "notice": "Sends the received token to the receiver"
      },
      "executeMessageWithTransferRefund(address,uint256,bytes,address)": {
        "notice": "Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract"
      },
      "executeMessageWithTransferRefundFromAdapter(address,uint256,bytes,address)": {
        "notice": "Used to trigger refund when bridging fails due to large slippage"
      },
      "nativeWrap()": {
        "notice": "erc20 wrap of the gas token of this chain, e.g. WETH"
      },
      "transferWithSwap((address,uint64,address,uint64,string,bytes,bool,bool,uint256,uint256,bytes,uint256,address,address,bool,bytes),(address,bytes)[],(address,bytes)[])": {
        "notice": "swaps if needed, then transfer the token to another chain along with an instruction on how to swap on that chain"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/TransferSwapper.sol:TransferSwapper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9219,
        "contract": "contracts/TransferSwapper.sol:TransferSwapper",
        "label": "messageBus",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9246,
        "contract": "contracts/TransferSwapper.sol:TransferSwapper",
        "label": "testMode",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 2286,
        "contract": "contracts/TransferSwapper.sol:TransferSwapper",
        "label": "selector2codec",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes4,t_contract(ICodec)8183)"
      },
      {
        "astId": 2289,
        "contract": "contracts/TransferSwapper.sol:TransferSwapper",
        "label": "codecs",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2541,
        "contract": "contracts/TransferSwapper.sol:TransferSwapper",
        "label": "dexRegistry",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_bytes4,t_bool))"
      },
      {
        "astId": 2802,
        "contract": "contracts/TransferSwapper.sol:TransferSwapper",
        "label": "signer",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2658,
        "contract": "contracts/TransferSwapper.sol:TransferSwapper",
        "label": "feeCollector",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 231,
        "contract": "contracts/TransferSwapper.sol:TransferSwapper",
        "label": "_status",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2217,
        "contract": "contracts/TransferSwapper.sol:TransferSwapper",
        "label": "bridges",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_contract(IBridgeAdapter)7902)"
      },
      {
        "astId": 130,
        "contract": "contracts/TransferSwapper.sol:TransferSwapper",
        "label": "_paused",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 9997,
        "contract": "contracts/TransferSwapper.sol:TransferSwapper",
        "label": "pausers",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3440,
        "contract": "contracts/TransferSwapper.sol:TransferSwapper",
        "label": "nativeWrap",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IBridgeAdapter)7902": {
        "encoding": "inplace",
        "label": "contract IBridgeAdapter",
        "numberOfBytes": "20"
      },
      "t_contract(ICodec)8183": {
        "encoding": "inplace",
        "label": "contract ICodec",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_bool)"
      },
      "t_mapping(t_bytes32,t_contract(IBridgeAdapter)7902)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => contract IBridgeAdapter)",
        "numberOfBytes": "32",
        "value": "t_contract(IBridgeAdapter)7902"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes4,t_contract(ICodec)8183)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => contract ICodec)",
        "numberOfBytes": "32",
        "value": "t_contract(ICodec)8183"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}