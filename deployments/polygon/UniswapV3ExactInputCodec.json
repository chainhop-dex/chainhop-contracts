{
  "address": "0x9Ae9AE20f5C022e9edd79673101B6a0F37BBaEC4",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "dex",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICodec.SwapDescription",
          "name": "_swap",
          "type": "tuple"
        }
      ],
      "name": "decodeCalldata",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amountInOverride",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiverOverride",
          "type": "address"
        }
      ],
      "name": "encodeCalldataWithOverride",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "swapCalldata",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x75dfdeae69ee2aefbe5c785af3c9702dd239baa549dc64d89df2618d9e1e1f29",
  "receipt": {
    "to": null,
    "from": "0x8b5F94a2c2e23eE8cC0Ff56872aF973243eF7628",
    "contractAddress": "0x9Ae9AE20f5C022e9edd79673101B6a0F37BBaEC4",
    "transactionIndex": 23,
    "gasUsed": "605203",
    "logsBloom": "0x
    "blockHash": "0x6bdc79b94eb5c06605cd84cc04cba306c890758ca5f9c1700859df930be13b18",
    "transactionHash": "0x75dfdeae69ee2aefbe5c785af3c9702dd239baa549dc64d89df2618d9e1e1f29",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 32715987,
        "transactionHash": "0x75dfdeae69ee2aefbe5c785af3c9702dd239baa549dc64d89df2618d9e1e1f29",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008b5f94a2c2e23ee8cc0ff56872af973243ef7628",
          "0x000000000000000000000000c6869257205e20c2a43cb31345db534aecb49f6e"
        ],
        "data": "0x000000000000000000000000000000000000000000000000006b8172331852f60000000000000000000000000000000000000000000000007c51fe71f4995766000000000000000000000000000000000000000000002212883245168227be0f0000000000000000000000000000000000000000000000007be67cffc1810470000000000000000000000000000000000000000000002212889dc688b5401105",
        "logIndex": 120,
        "blockHash": "0x6bdc79b94eb5c06605cd84cc04cba306c890758ca5f9c1700859df930be13b18"
      }
    ],
    "blockNumber": 32715987,
    "cumulativeGasUsed": "5072636",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9870279d034fd5925cf31ceb35ddc0ae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICodec.SwapDescription\",\"name\":\"_swap\",\"type\":\"tuple\"}],\"name\":\"decodeCalldata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amountInOverride\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiverOverride\",\"type\":\"address\"}],\"name\":\"encodeCalldataWithOverride\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"swapCalldata\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/codecs/UniswapV3ExactInputCodec.sol\":\"UniswapV3ExactInputCodec\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/codecs/UniswapV3ExactInputCodec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"../interfaces/ICodec.sol\\\";\\nimport \\\"../interfaces/ISwapRouter.sol\\\";\\n\\ncontract UniswapV3ExactInputCodec is ICodec {\\n    function decodeCalldata(ICodec.SwapDescription calldata _swap)\\n        external\\n        pure\\n        returns (\\n            uint256 amountIn,\\n            address tokenIn,\\n            address tokenOut\\n        )\\n    {\\n        ISwapRouter.ExactInputParams memory data = abi.decode((_swap.data[4:]), (ISwapRouter.ExactInputParams));\\n        // path is in the format of abi.encodedPacked(address tokenIn, [uint24 fee, address token[, uint24 fee, address token]...])\\n        require((data.path.length - 20) % 23 == 0, \\\"malformed path\\\");\\n        // first 20 bytes is tokenIn\\n        tokenIn = address(bytes20(copySubBytes(data.path, 0, 20)));\\n        // last 20 bytes is tokenOut\\n        tokenOut = address(bytes20(copySubBytes(data.path, data.path.length - 20, data.path.length)));\\n        amountIn = data.amountIn;\\n    }\\n\\n    function encodeCalldataWithOverride(\\n        bytes calldata _data,\\n        uint256 _amountInOverride,\\n        address _receiverOverride\\n    ) external pure returns (bytes memory swapCalldata) {\\n        bytes4 selector = bytes4(_data);\\n        ISwapRouter.ExactInputParams memory data = abi.decode((_data[4:]), (ISwapRouter.ExactInputParams));\\n        data.amountIn = _amountInOverride;\\n        data.recipient = _receiverOverride;\\n        return abi.encodeWithSelector(selector, data);\\n    }\\n\\n    // basically a bytes' version of byteN[from:to] execpt it copies\\n    function copySubBytes(\\n        bytes memory data,\\n        uint256 from,\\n        uint256 to\\n    ) private pure returns (bytes memory ret) {\\n        require(to <= data.length, \\\"index overflow\\\");\\n        uint256 len = to - from;\\n        ret = new bytes(len);\\n        for (uint256 i = 0; i < len; i++) {\\n            ret[i] = data[i + from];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd183bb0fbd994e3e816d03fb63cdf181fbd648795d91a927074165056f1ef6d6\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ICodec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface ICodec {\\n    struct SwapDescription {\\n        address dex; // the DEX to use for the swap, zero address implies no swap needed\\n        bytes data; // the data to call the dex with\\n    }\\n\\n    function decodeCalldata(SwapDescription calldata swap)\\n        external\\n        view\\n        returns (\\n            uint256 amountIn,\\n            address tokenIn,\\n            address tokenOut\\n        );\\n\\n    function encodeCalldataWithOverride(\\n        bytes calldata data,\\n        uint256 amountInOverride,\\n        address receiverOverride\\n    ) external pure returns (bytes memory swapCalldata);\\n}\\n\",\"keccak256\":\"0x3c063f0ffd87df3df38998c78273bc00ac835331905be997c7e3c6aa3bdbdcc4\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.15;\\npragma abicoder v2;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xdf4e19677f76d709cec2c6e1086bea53599603aba3e216f6b52e6dbf861bff17\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506109ff806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063358f0e1c1461003b5780634c6da26914610066575b600080fd5b61004e610049366004610327565b610086565b60405161005d93929190610393565b60405180910390f35b61007961007436600461043c565b61014f565b60405161005d919061050d565b60008080806100986020860186610525565b6100a6916004908290610584565b8101906100b3919061074f565b9050601760148260000151516100c991906107a0565b6100d391906107cd565b156100f95760405162461bcd60e51b81526004016100f090610818565b60405180910390fd5b80516101089060006014610208565b61011190610841565b8151805160609290921c94506101359161012d906014906107a0565b835151610208565b61013e90610841565b60609182015196939550901c925050565b6060600061015d858761088b565b9050600061016e866004818a610584565b81019061017b919061074f565b6060810186905273ffffffffffffffffffffffffffffffffffffffff8516602082015260405190915082906101b490839060240161092c565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152925050505b949350505050565b6060835182111561022b5760405162461bcd60e51b81526004016100f090610971565b600061023784846107a0565b90508067ffffffffffffffff811115610252576102526105b4565b6040519080825280601f01601f19166020018201604052801561027c576020820181803683370190505b50915060005b8181101561030357856102958683610981565b815181106102a5576102a5610999565b602001015160f81c60f81b8382815181106102c2576102c2610999565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806102fb816109af565b915050610282565b50509392505050565b60006040828403121561032157610321600080fd5b50919050565b60006020828403121561033c5761033c600080fd5b813567ffffffffffffffff81111561035657610356600080fd5b6102008482850161030c565b805b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82165b92915050565b6103648161036a565b606081016103a18286610362565b6103ae602083018561038a565b610200604083018461038a565b60008083601f8401126103d0576103d0600080fd5b50813567ffffffffffffffff8111156103eb576103eb600080fd5b60208301915083600182028301111561040657610406600080fd5b9250929050565b805b811461041a57600080fd5b50565b80356103848161040d565b61040f8161036a565b803561038481610428565b6000806000806060858703121561045557610455600080fd5b843567ffffffffffffffff81111561046f5761046f600080fd5b61047b878288016103bb565b9450945050602061048e8782880161041d565b925050604061049f87828801610431565b91505092959194509250565b60005b838110156104c65781810151838201526020016104ae565b838111156104d5576000848401525b50505050565b60006104e5825190565b8084526020840193506104fc8185602086016104ab565b601f01601f19169290920192915050565b6020808252810161051e81846104db565b9392505050565b6000808335601e193685900301811261054057610540600080fd5b80840192508235915067ffffffffffffffff82111561056157610561600080fd5b60208301925060018202360383131561057c5761057c600080fd5b509250929050565b6000808585111561059757610597600080fd5b838611156105a7576105a7600080fd5b5050820193919092039150565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156105f0576105f06105b4565b6040525050565b600061060260405190565b905061060e82826105ca565b919050565b600067ffffffffffffffff82111561062d5761062d6105b4565b601f19601f83011660200192915050565b82818337506000910152565b600061065d61065884610613565b6105f7565b90508281526020810184848401111561067857610678600080fd5b61068384828561063e565b509392505050565b600082601f83011261069f5761069f600080fd5b813561020084826020860161064a565b600060a082840312156106c4576106c4600080fd5b6106ce60a06105f7565b9050813567ffffffffffffffff8111156106ea576106ea600080fd5b6106f68482850161068b565b825250602061070784848301610431565b602083015250604061071b8482850161041d565b604083015250606061072f8482850161041d565b60608301525060806107438482850161041d565b60808301525092915050565b60006020828403121561076457610764600080fd5b813567ffffffffffffffff81111561077e5761077e600080fd5b610200848285016106af565b634e487b7160e01b600052601160045260246000fd5b6000828210156107b2576107b261078a565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826107dc576107dc6107b7565b500690565b600e81526000602082017f6d616c666f726d65642070617468000000000000000000000000000000000000815291505b5060200190565b60208082528101610384816107e1565b600061038482516bffffffffffffffffffffffff191690565b600061084b825190565b6020830161085881610828565b925060148210156108845761087f6bffffffffffffffffffffffff19836014036008021b90565b831692505b5050919050565b80356001600160e01b031916828260048210156108be576108b96001600160e01b0319836004036008021b90565b831692505b505092915050565b805160a0808452600091908401906108de82826104db565b91505060208301516108f3602086018261038a565b5060408301516109066040860182610362565b5060608301516109196060860182610362565b5060808301516106836080860182610362565b6020808252810161051e81846108c6565b600e81526000602082017f696e646578206f766572666c6f7700000000000000000000000000000000000081529150610811565b602080825281016103848161093d565b600082198211156109945761099461078a565b500190565b634e487b7160e01b600052603260045260246000fd5b600060001982036109c2576109c261078a565b506001019056fea264697066735822122052c7e56b71362813b8bcf01b0930dcaa263e019cf3304afc6c8c1867bcc453eb64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063358f0e1c1461003b5780634c6da26914610066575b600080fd5b61004e610049366004610327565b610086565b60405161005d93929190610393565b60405180910390f35b61007961007436600461043c565b61014f565b60405161005d919061050d565b60008080806100986020860186610525565b6100a6916004908290610584565b8101906100b3919061074f565b9050601760148260000151516100c991906107a0565b6100d391906107cd565b156100f95760405162461bcd60e51b81526004016100f090610818565b60405180910390fd5b80516101089060006014610208565b61011190610841565b8151805160609290921c94506101359161012d906014906107a0565b835151610208565b61013e90610841565b60609182015196939550901c925050565b6060600061015d858761088b565b9050600061016e866004818a610584565b81019061017b919061074f565b6060810186905273ffffffffffffffffffffffffffffffffffffffff8516602082015260405190915082906101b490839060240161092c565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152925050505b949350505050565b6060835182111561022b5760405162461bcd60e51b81526004016100f090610971565b600061023784846107a0565b90508067ffffffffffffffff811115610252576102526105b4565b6040519080825280601f01601f19166020018201604052801561027c576020820181803683370190505b50915060005b8181101561030357856102958683610981565b815181106102a5576102a5610999565b602001015160f81c60f81b8382815181106102c2576102c2610999565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806102fb816109af565b915050610282565b50509392505050565b60006040828403121561032157610321600080fd5b50919050565b60006020828403121561033c5761033c600080fd5b813567ffffffffffffffff81111561035657610356600080fd5b6102008482850161030c565b805b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82165b92915050565b6103648161036a565b606081016103a18286610362565b6103ae602083018561038a565b610200604083018461038a565b60008083601f8401126103d0576103d0600080fd5b50813567ffffffffffffffff8111156103eb576103eb600080fd5b60208301915083600182028301111561040657610406600080fd5b9250929050565b805b811461041a57600080fd5b50565b80356103848161040d565b61040f8161036a565b803561038481610428565b6000806000806060858703121561045557610455600080fd5b843567ffffffffffffffff81111561046f5761046f600080fd5b61047b878288016103bb565b9450945050602061048e8782880161041d565b925050604061049f87828801610431565b91505092959194509250565b60005b838110156104c65781810151838201526020016104ae565b838111156104d5576000848401525b50505050565b60006104e5825190565b8084526020840193506104fc8185602086016104ab565b601f01601f19169290920192915050565b6020808252810161051e81846104db565b9392505050565b6000808335601e193685900301811261054057610540600080fd5b80840192508235915067ffffffffffffffff82111561056157610561600080fd5b60208301925060018202360383131561057c5761057c600080fd5b509250929050565b6000808585111561059757610597600080fd5b838611156105a7576105a7600080fd5b5050820193919092039150565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156105f0576105f06105b4565b6040525050565b600061060260405190565b905061060e82826105ca565b919050565b600067ffffffffffffffff82111561062d5761062d6105b4565b601f19601f83011660200192915050565b82818337506000910152565b600061065d61065884610613565b6105f7565b90508281526020810184848401111561067857610678600080fd5b61068384828561063e565b509392505050565b600082601f83011261069f5761069f600080fd5b813561020084826020860161064a565b600060a082840312156106c4576106c4600080fd5b6106ce60a06105f7565b9050813567ffffffffffffffff8111156106ea576106ea600080fd5b6106f68482850161068b565b825250602061070784848301610431565b602083015250604061071b8482850161041d565b604083015250606061072f8482850161041d565b60608301525060806107438482850161041d565b60808301525092915050565b60006020828403121561076457610764600080fd5b813567ffffffffffffffff81111561077e5761077e600080fd5b610200848285016106af565b634e487b7160e01b600052601160045260246000fd5b6000828210156107b2576107b261078a565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826107dc576107dc6107b7565b500690565b600e81526000602082017f6d616c666f726d65642070617468000000000000000000000000000000000000815291505b5060200190565b60208082528101610384816107e1565b600061038482516bffffffffffffffffffffffff191690565b600061084b825190565b6020830161085881610828565b925060148210156108845761087f6bffffffffffffffffffffffff19836014036008021b90565b831692505b5050919050565b80356001600160e01b031916828260048210156108be576108b96001600160e01b0319836004036008021b90565b831692505b505092915050565b805160a0808452600091908401906108de82826104db565b91505060208301516108f3602086018261038a565b5060408301516109066040860182610362565b5060608301516109196060860182610362565b5060808301516106836080860182610362565b6020808252810161051e81846108c6565b600e81526000602082017f696e646578206f766572666c6f7700000000000000000000000000000000000081529150610811565b602080825281016103848161093d565b600082198211156109945761099461078a565b500190565b634e487b7160e01b600052603260045260246000fd5b600060001982036109c2576109c261078a565b506001019056fea264697066735822122052c7e56b71362813b8bcf01b0930dcaa263e019cf3304afc6c8c1867bcc453eb64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}