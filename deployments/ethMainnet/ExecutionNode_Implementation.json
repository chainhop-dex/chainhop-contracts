{
  "address": "0x99B123d13918E30454703faD096e01D4dE89C88d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_testMode",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nativeWrap",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dex",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "codec",
          "type": "address"
        }
      ],
      "name": "DexCodecUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "FeeVaultUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "messageBus",
          "type": "address"
        }
      ],
      "name": "MessageBusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nativeWrap",
          "type": "address"
        }
      ],
      "name": "NativeWrapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "erc20Amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeAmount",
          "type": "uint256"
        }
      ],
      "name": "PocketFundClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "chainIds",
          "type": "uint64[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "remotes",
          "type": "address[]"
        }
      ],
      "name": "RemotesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "SignerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "StepExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "providers",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "adapters",
          "type": "address[]"
        }
      ],
      "name": "SupportedBridgesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "bridges",
      "outputs": [
        {
          "internalType": "contract IBridgeAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_srcSender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dstReceiver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "claimPocketFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "dexFunc2Codec",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "executeMessage",
      "outputs": [
        {
          "internalType": "enum IMessageReceiver.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "executeMessageWithTransferRefund",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_testMode",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nativeWrap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeVault",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_dexList",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "_funcs",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "_codecs",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "_bridgeProviders",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "_bridgeAdapters",
          "type": "address[]"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageBus",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeWrap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "remotes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "resecueFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_dexList",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "_funcs",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "_codecs",
          "type": "address[]"
        }
      ],
      "name": "setDexCodecs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setFeeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_msgbus",
          "type": "address"
        }
      ],
      "name": "setMessageBus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nativeWrap",
          "type": "address"
        }
      ],
      "name": "setNativeWrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_chainIds",
          "type": "uint64[]"
        },
        {
          "internalType": "address[]",
          "name": "_remotes",
          "type": "address[]"
        }
      ],
      "name": "setRemotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_providers",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "_adapters",
          "type": "address[]"
        }
      ],
      "name": "setSupportedBridges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "dex",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ICodec.SwapDescription",
              "name": "swap",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "toChainId",
                  "type": "uint64"
                },
                {
                  "internalType": "string",
                  "name": "bridgeProvider",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "bridgeParams",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "nativeFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Types.BridgeInfo",
              "name": "bridge",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "bridgeOutToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridgeOutFallbackToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bridgeOutMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bridgeOutFallbackMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeInBridgeOutToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeInBridgeOutFallbackToken",
              "type": "uint256"
            }
          ],
          "internalType": "struct Types.ExecutionInfo[]",
          "name": "_execs",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "quoteSig",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "nativeIn",
              "type": "bool"
            }
          ],
          "internalType": "struct Types.SourceInfo",
          "name": "_src",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "nativeOut",
              "type": "bool"
            }
          ],
          "internalType": "struct Types.DestinationInfo",
          "name": "_dst",
          "type": "tuple"
        }
      ],
      "name": "srcExecute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8db1d36f1a5d697a52c8513c11d44fb9cbe9e8b8db9e7b8afc11dc1e90e471ba",
  "receipt": {
    "to": null,
    "from": "0x8b5F94a2c2e23eE8cC0Ff56872aF973243eF7628",
    "contractAddress": "0x99B123d13918E30454703faD096e01D4dE89C88d",
    "transactionIndex": 72,
    "gasUsed": "5275259",
    "logsBloom": "0x
    "blockHash": "0xc13282a0ce1f580361f7c240412ac9712021255bb83f9ff4c3f6a97a0f10a519",
    "transactionHash": "0x8db1d36f1a5d697a52c8513c11d44fb9cbe9e8b8db9e7b8afc11dc1e90e471ba",
    "logs": [
      {
        "transactionIndex": 72,
        "blockNumber": 16267555,
        "transactionHash": "0x8db1d36f1a5d697a52c8513c11d44fb9cbe9e8b8db9e7b8afc11dc1e90e471ba",
        "address": "0x99B123d13918E30454703faD096e01D4dE89C88d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b5f94a2c2e23ee8cc0ff56872af973243ef7628"
        ],
        "data": "0x",
        "logIndex": 146,
        "blockHash": "0xc13282a0ce1f580361f7c240412ac9712021255bb83f9ff4c3f6a97a0f10a519"
      },
      {
        "transactionIndex": 72,
        "blockNumber": 16267555,
        "transactionHash": "0x8db1d36f1a5d697a52c8513c11d44fb9cbe9e8b8db9e7b8afc11dc1e90e471ba",
        "address": "0x99B123d13918E30454703faD096e01D4dE89C88d",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8"
        ],
        "data": "0x0000000000000000000000008b5f94a2c2e23ee8cc0ff56872af973243ef7628",
        "logIndex": 147,
        "blockHash": "0xc13282a0ce1f580361f7c240412ac9712021255bb83f9ff4c3f6a97a0f10a519"
      },
      {
        "transactionIndex": 72,
        "blockNumber": 16267555,
        "transactionHash": "0x8db1d36f1a5d697a52c8513c11d44fb9cbe9e8b8db9e7b8afc11dc1e90e471ba",
        "address": "0x99B123d13918E30454703faD096e01D4dE89C88d",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 148,
        "blockHash": "0xc13282a0ce1f580361f7c240412ac9712021255bb83f9ff4c3f6a97a0f10a519"
      }
    ],
    "blockNumber": 16267555,
    "cumulativeGasUsed": "10303767",
    "status": 1,
    "byzantium": true
  },
  "args": [
    false,
    "0x4066d196a423b2b3b8b054f4f40efb47a74e200c",
    "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
  ],
  "numDeployments": 2,
  "solcInputHash": "fa4c5ff5f5dff301538c3f2de08015f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_testMode\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeWrap\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"codec\",\"type\":\"address\"}],\"name\":\"DexCodecUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FeeVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messageBus\",\"type\":\"address\"}],\"name\":\"MessageBusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nativeWrap\",\"type\":\"address\"}],\"name\":\"NativeWrapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"erc20Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeAmount\",\"type\":\"uint256\"}],\"name\":\"PocketFundClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"chainIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"remotes\",\"type\":\"address[]\"}],\"name\":\"RemotesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SignerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"StepExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"providers\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"name\":\"SupportedBridgesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bridges\",\"outputs\":[{\"internalType\":\"contract IBridgeAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_srcSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimPocketFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"dexFunc2Codec\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[{\"internalType\":\"enum IMessageReceiver.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"executeMessageWithTransferRefund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_testMode\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeWrap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeVault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_dexList\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_funcs\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_codecs\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_bridgeProviders\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_bridgeAdapters\",\"type\":\"address[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeWrap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"remotes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"resecueFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_dexList\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_funcs\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_codecs\",\"type\":\"address[]\"}],\"name\":\"setDexCodecs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setFeeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_msgbus\",\"type\":\"address\"}],\"name\":\"setMessageBus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nativeWrap\",\"type\":\"address\"}],\"name\":\"setNativeWrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_chainIds\",\"type\":\"uint64[]\"},{\"internalType\":\"address[]\",\"name\":\"_remotes\",\"type\":\"address[]\"}],\"name\":\"setRemotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_providers\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_adapters\",\"type\":\"address[]\"}],\"name\":\"setSupportedBridges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICodec.SwapDescription\",\"name\":\"swap\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"toChainId\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"bridgeProvider\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"bridgeParams\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.BridgeInfo\",\"name\":\"bridge\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"bridgeOutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeOutFallbackToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bridgeOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bridgeOutFallbackMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeInBridgeOutToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeInBridgeOutFallbackToken\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.ExecutionInfo[]\",\"name\":\"_execs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"quoteSig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"nativeIn\",\"type\":\"bool\"}],\"internalType\":\"struct Types.SourceInfo\",\"name\":\"_src\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"nativeOut\",\"type\":\"bool\"}],\"internalType\":\"struct Types.DestinationInfo\",\"name\":\"_dst\",\"type\":\"tuple\"}],\"name\":\"srcExecute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Chainhop Dex TeamPadoriku\",\"kind\":\"dev\",\"methods\":{\"executeMessage(address,uint64,bytes,address)\":{\"params\":{\"_message\":\"the message that contains the remaining swap-bridge combos to be executed\"},\"returns\":{\"_0\":\"executionStatus always success if no reverts to let the MessageBus know that the message is processed\"}},\"executeMessageWithTransferRefund(address,uint256,bytes)\":{\"params\":{\"_amount\":\"The amount of the original transfer\",\"_message\":\"The same message associated with the original transfer\",\"_token\":\"The token address of the original transfer\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"resecueFund(address)\":{\"details\":\"since bridged funds are sent to the pocket contract, and fees are sent to the fee vault, normally there should be no residue funds in this contract. but in case someone mistakenly send tokens directly to this contract, this function can be used to access these funds.\",\"params\":{\"_token\":\"the token to extract, use address(0) for native token\"}},\"revokeAllowance(address,address)\":{\"details\":\"normally, all allowances are revoked from a dex after swapping. this function exists mainly to handle a historical issue where allowance is stuck at a non-zero value at a dex\",\"params\":{\"_spender\":\"for which spender to revoke allowance\",\"_token\":\"for which token to revoke allowance\"}},\"srcExecute(((address,bytes),(uint64,string,bytes,uint256),address,address,uint256,uint256,uint256,uint256)[],(uint64,uint64,bytes,uint256,address,bool),(address,bool))\":{\"params\":{\"_dst\":\"the receiving info of the entire operation\",\"_execs\":\"contains info that tells this contract how to collect a part of the bridge token received as fee and how to swap can be omitted on the source chain if there is no swaps to execute\",\"_src\":\"info that is processed on the source chain. only required on the source chain and should not be populated on subsequent hops\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"a route execution contract\",\"version\":1},\"userdoc\":{\"events\":{\"StepExecuted(bytes32,uint256,address)\":{\"notice\":\"Emitted when operations on dst chain is done.\"}},\"kind\":\"user\",\"methods\":{\"executeMessage(address,uint64,bytes,address)\":{\"notice\":\"called by cBridge MessageBus. processes the execution info and carry on the executions\"},\"executeMessageWithTransferRefund(address,uint256,bytes)\":{\"notice\":\"Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\"},\"resecueFund(address)\":{\"notice\":\"allows the owner to extract stuck funds from this contract and sent to _receiver\"},\"revokeAllowance(address,address)\":{\"notice\":\"sets allowance to 0 for a token and spender\"},\"srcExecute(((address,bytes),(uint64,string,bytes,uint256),address,address,uint256,uint256,uint256,uint256)[],(uint64,uint64,bytes,uint256,address,bool),(address,bool))\":{\"notice\":\"executes a swap-bridge combo and relays the next swap-bridge combo to the next chain (if any)\"}},\"notice\":\"a few key concepts about how the chain of execution works: - a \\\"swap-bridge execution combo\\\" (Types.ExecutionInfo) is a node in the execution chain - a node be swap-only, bridge-only, or swap-bridge - a message is an edge in the execution chain, it carries the remaining swap-bridge combos to the next node - execute() executes a swap-bridge combo and determines if the current node is the final one by looking at Types.DestinationInfo - executeMessage() is called on the intermediate nodes by chainhop's executor. it simply calls execute() to advance the execution chain - a \\\"pocket\\\" is a counterfactual contract of which the address is determined at quote-time by chainhop's pathfinder server with using the id as salt. the actual pocket contract deployment is done at execution time by the the ExecutionNode on that chain\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExecutionNode.sol\":\"ExecutionNode\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/ExecutionNode.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./lib/Types.sol\\\";\\nimport \\\"./lib/MessageReceiver.sol\\\";\\nimport \\\"./lib/Pauser.sol\\\";\\nimport \\\"./lib/NativeWrap.sol\\\";\\nimport \\\"./lib/Bytes.sol\\\";\\n\\nimport \\\"./interfaces/IBridgeAdapter.sol\\\";\\nimport \\\"./interfaces/ICodec.sol\\\";\\nimport \\\"./interfaces/IExecutionNodeEvents.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IMessageBus.sol\\\";\\n\\nimport \\\"./registries/BridgeRegistry.sol\\\";\\nimport \\\"./registries/DexRegistry.sol\\\";\\nimport \\\"./registries/RemoteExecutionNodeRegistry.sol\\\";\\nimport \\\"./registries/FeeVaultRegistry.sol\\\";\\nimport \\\"./SigVerifier.sol\\\";\\nimport \\\"./Pocket.sol\\\";\\n\\n/**\\n * @author Chainhop Dex Team\\n * @author Padoriku\\n * @title a route execution contract\\n * @notice\\n * a few key concepts about how the chain of execution works:\\n * - a \\\"swap-bridge execution combo\\\" (Types.ExecutionInfo) is a node in the execution chain\\n * - a node be swap-only, bridge-only, or swap-bridge\\n * - a message is an edge in the execution chain, it carries the remaining swap-bridge combos to the next node\\n * - execute() executes a swap-bridge combo and determines if the current node is the final one by looking at Types.DestinationInfo\\n * - executeMessage() is called on the intermediate nodes by chainhop's executor. it simply calls execute() to advance the execution chain\\n * - a \\\"pocket\\\" is a counterfactual contract of which the address is determined at quote-time by chainhop's pathfinder server with using\\n * the id as salt. the actual pocket contract deployment is done at execution time by the the ExecutionNode on that chain\\n */\\ncontract ExecutionNode is\\n    IExecutionNodeEvents,\\n    MessageReceiver,\\n    DexRegistry,\\n    BridgeRegistry,\\n    SigVerifier,\\n    FeeVaultRegistry,\\n    NativeWrap,\\n    ReentrancyGuard,\\n    Pauser,\\n    RemoteExecutionNodeRegistry\\n{\\n    using SafeERC20 for IERC20;\\n    using ECDSA for bytes32;\\n    using Bytes for bytes;\\n\\n    constructor(\\n        bool _testMode,\\n        address _messageBus,\\n        address _nativeWrap\\n    ) MessageReceiver(_testMode, _messageBus) NativeWrap(_nativeWrap) {\\n        _disableInitializers();\\n    }\\n\\n    // init() can only be called once during the first deployment of the proxy contract.\\n    // any subsequent changes to the proxy contract's state must be done through their respective set methods via owner key.\\n    function init(\\n        bool _testMode,\\n        address _messageBus,\\n        address _nativeWrap,\\n        address _signer,\\n        address _feeVault,\\n        address[] memory _dexList,\\n        string[] memory _funcs,\\n        address[] memory _codecs,\\n        string[] memory _bridgeProviders,\\n        address[] memory _bridgeAdapters\\n    ) external initializer {\\n        initOwner();\\n        initMessageReceiver(_testMode, _messageBus);\\n        initDexRegistry(_dexList, _funcs, _codecs);\\n        initBridgeRegistry(_bridgeProviders, _bridgeAdapters);\\n        initFeeVaultRegistry(_feeVault);\\n        initSigVerifier(_signer);\\n        initNativeWrap(_nativeWrap);\\n    }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     * Core\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n\\n    /**\\n     * @notice executes a swap-bridge combo and relays the next swap-bridge combo to the next chain (if any)\\n     * @param _execs contains info that tells this contract how to collect a part of the bridge token\\n     * received as fee and how to swap can be omitted on the source chain if there is no swaps to execute\\n     * @param _src info that is processed on the source chain. only required on the source chain and should not be populated on subsequent hops\\n     * @param _dst the receiving info of the entire operation\\n     */\\n    function srcExecute(\\n        Types.ExecutionInfo[] memory _execs,\\n        Types.SourceInfo memory _src,\\n        Types.DestinationInfo memory _dst\\n    ) external payable whenNotPaused nonReentrant {\\n        require(_execs.length > 0, \\\"nop\\\");\\n        require(_src.amountIn > 0, \\\"0 amount\\\");\\n        require(_dst.receiver != address(0), \\\"0 receiver\\\");\\n\\n        bytes32 id = _computeId(msg.sender, _dst.receiver, _src.nonce);\\n        Types.ExecutionInfo memory exec = _execs[0];\\n        if (_execs.length > 1) {\\n            _verify(_execs, _src);\\n        }\\n        (uint256 amountIn, address tokenIn) = _pullFundFromSender(_src);\\n        require(amountIn > 0, \\\"amount must > 0\\\");\\n        // process swap if any\\n        uint256 nextAmount = amountIn;\\n        address nextToken = tokenIn;\\n        if (exec.swap.dex != address(0)) {\\n            bool success = true;\\n            (success, nextAmount, nextToken) = _executeSwap(exec.swap, amountIn, tokenIn);\\n            require(success, \\\"swap fail\\\");\\n        }\\n        _processNextStep(id, _execs, _dst, nextToken, nextAmount);\\n    }\\n\\n    /**\\n     * @notice called by cBridge MessageBus. processes the execution info and carry on the executions\\n     * @param _message the message that contains the remaining swap-bridge combos to be executed\\n     * @return executionStatus always success if no reverts to let the MessageBus know that the message is processed\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes memory _message,\\n        address // _executor\\n    )\\n        external\\n        payable\\n        override\\n        onlyMessageBus\\n        onlyRemoteExecutionNode(_srcChainId, _sender)\\n        whenNotPaused\\n        nonReentrant\\n        returns (ExecutionStatus)\\n    {\\n        Types.Message memory m = abi.decode((_message), (Types.Message));\\n        require(m.execs.length > 0, \\\"nop\\\");\\n        uint256 remainingValue = msg.value;\\n        Types.ExecutionInfo memory exec = m.execs[0];\\n        (uint256 amountIn, address tokenIn) = _pullFundFromPocket(m.id, exec);\\n        // if amountIn is 0 after deducting fee, this contract keeps all amountIn as fee and\\n        // ends the execution\\n        if (amountIn == 0) {\\n            emit StepExecuted(m.id, 0, tokenIn);\\n            return _refundValueAndDone(remainingValue);\\n        }\\n        // refund immediately if receives bridge out fallback token\\n        if (tokenIn == exec.bridgeOutFallbackToken) {\\n            _sendToken(tokenIn, amountIn, m.dst.receiver, false);\\n            emit StepExecuted(m.id, amountIn, tokenIn);\\n            return _refundValueAndDone(remainingValue);\\n        }\\n        // process swap if any\\n        uint256 nextAmount = amountIn;\\n        address nextToken = tokenIn;\\n        if (exec.swap.dex != address(0)) {\\n            bool success = true;\\n            (success, nextAmount, nextToken) = _executeSwap(exec.swap, amountIn, tokenIn);\\n            // refund immediately if swap fails\\n            if (!success) {\\n                _sendToken(tokenIn, amountIn, m.dst.receiver, false);\\n                emit StepExecuted(m.id, amountIn, tokenIn);\\n                return _refundValueAndDone(remainingValue);\\n            }\\n        }\\n        uint256 consumedValue = _processNextStep(m.id, m.execs, m.dst, nextToken, nextAmount);\\n        remainingValue -= consumedValue;\\n        return _refundValueAndDone(remainingValue);\\n    }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     * Periphery\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n\\n    // the receiver of a swap is entitled to all the funds in the pocket. as long as someone can prove\\n    // that they are the receiver of a swap, they can always recreate the pocket contract and claim the\\n    // funds inside.\\n    function claimPocketFund(\\n        address _srcSender,\\n        address _dstReceiver,\\n        uint64 _nonce,\\n        address _token\\n    ) external whenNotPaused nonReentrant {\\n        require(msg.sender == _dstReceiver, \\\"only receiver can claim\\\");\\n        // id ensures that only the designated receiver of a swap can claim funds from the designated pocket of a swap\\n        bytes32 id = _computeId(_srcSender, _dstReceiver, _nonce);\\n        Pocket pocket = new Pocket{salt: id}();\\n        uint256 erc20Amount = IERC20(_token).balanceOf(address(pocket));\\n        uint256 nativeAmount = address(pocket).balance;\\n        require(erc20Amount > 0 || nativeAmount > 0, \\\"pocket is empty\\\");\\n        // this claims both _token and native\\n        _claimPocketERC20(pocket, _token, erc20Amount);\\n        if (erc20Amount > 0) {\\n            IERC20(_token).safeTransfer(_dstReceiver, erc20Amount);\\n        }\\n        if (nativeAmount > 0) {\\n            (bool ok, ) = _dstReceiver.call{value: nativeAmount, gas: 50000}(\\\"\\\");\\n            require(ok, \\\"failed to send native\\\");\\n        }\\n        emit PocketFundClaimed(_dstReceiver, erc20Amount, _token, nativeAmount);\\n    }\\n\\n    /**\\n     * @notice allows the owner to extract stuck funds from this contract and sent to _receiver\\n     * @dev since bridged funds are sent to the pocket contract, and fees are sent to the fee vault,\\n     * normally there should be no residue funds in this contract. but in case someone mistakenly\\n     * send tokens directly to this contract, this function can be used to access these funds.\\n     * @param _token the token to extract, use address(0) for native token\\n     */\\n    function resecueFund(address _token) external onlyOwner {\\n        if (_token == address(0)) {\\n            (bool ok, ) = owner().call{value: address(this).balance}(\\\"\\\");\\n            require(ok, \\\"send native failed\\\");\\n        } else {\\n            IERC20(_token).safeTransfer(owner(), IERC20(_token).balanceOf(address(this)));\\n        }\\n    }\\n\\n    /**\\n     * @notice sets allowance to 0 for a token and spender\\n     * @dev normally, all allowances are revoked from a dex after swapping. this function exists mainly to\\n     * handle a historical issue where allowance is stuck at a non-zero value at a dex\\n     * @param _token for which token to revoke allowance\\n     * @param _spender for which spender to revoke allowance\\n     */\\n    function revokeAllowance(address _token, address _spender) external onlyOwner {\\n        IERC20(_token).safeApprove(_spender, 0);\\n    }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     * Misc\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n\\n    // encoding src sender into the id prevents the scenario where different senders can send funds to the the same receiver\\n    // causing the swap behavior to be non-deterministic. e.g. if src sender is not in id generation, an attacker can send\\n    // send a modified swap data as soon as they see the victim executes on the src chain. since the processing of messages\\n    // is asynchronous, the hacker's message can be executed first, accessing the fund inside the victim's pocket and\\n    // swapping it in some unfavorable ways.\\n    //\\n    // note that if the original tx sender is a contract, the integrator MUST ensure that they maintain a unique nonce so\\n    // that the same sender/receiver/nonce combo cannot be used twice. otherwise, the above attack is possible via the\\n    // integrator's contract. TODO: maybe add the nonce maintenance in this contract.\\n    function _computeId(\\n        address _srcSender,\\n        address _dstReceiver,\\n        uint64 _nonce\\n    ) private pure returns (bytes32) {\\n        // the main purpose of this id is to uniquely identify a user-swap.\\n        return keccak256(abi.encodePacked(_srcSender, _dstReceiver, _nonce));\\n    }\\n\\n    function _processNextStep(\\n        bytes32 _id,\\n        Types.ExecutionInfo[] memory _execs,\\n        Types.DestinationInfo memory _dst,\\n        address _nextToken,\\n        uint256 _nextAmount\\n    ) private returns (uint256 consumedValue) {\\n        Types.ExecutionInfo memory exec = _execs[0];\\n        _execs = _removeFirst(_execs);\\n        // pay receiver if there is no more swaps or bridges\\n        if (_execs.length == 0 && exec.bridge.toChainId == 0) {\\n            _sendToken(_nextToken, _nextAmount, _dst.receiver, _dst.nativeOut);\\n            emit StepExecuted(_id, _nextAmount, _nextToken);\\n            return 0;\\n        }\\n        // funds are bridged directly to the receiver if there are no subsequent executions on the destination chain.\\n        // otherwise, it's sent to a \\\"pocket\\\" contract addr to temporarily hold the fund before it is used for swapping.\\n        address bridgeOutReceiver = _dst.receiver;\\n        // if there are more execution steps left, pack them and send to the next chain\\n        if (_execs.length > 0) {\\n            address remote = remotes[exec.bridge.toChainId];\\n            require(remote != address(0), \\\"remote not found\\\");\\n            bridgeOutReceiver = _getPocketAddr(_id, remote);\\n\\n            bytes memory message = abi.encode(Types.Message({id: _id, execs: _execs, dst: _dst}));\\n            uint256 msgFee = IMessageBus(messageBus).calcFee(message);\\n            IMessageBus(messageBus).sendMessage{value: msgFee}(remote, exec.bridge.toChainId, message);\\n            consumedValue += msgFee;\\n        }\\n        _bridgeSend(exec.bridge, bridgeOutReceiver, _nextToken, _nextAmount);\\n        consumedValue += exec.bridge.nativeFee;\\n        emit StepExecuted(_id, _nextAmount, _nextToken);\\n    }\\n\\n    function _refundValueAndDone(uint256 _remainingValue) private returns (ExecutionStatus status) {\\n        // chainhop executor would always send a set amount of native token when calling messagebus's executeMessage().\\n        // these tokens cover the fee introduced by chaining another message when there are more bridging.\\n        // refunding the unspent native tokens back to the executor\\n        if (_remainingValue > 0) {\\n            // TODO, use the _executor param passed in from executeMessage for the refund receiver\\n            (bool ok, ) = tx.origin.call{value: _remainingValue, gas: 50000}(\\\"\\\");\\n            require(ok, \\\"failed to refund remaining native token\\\");\\n        }\\n        return ExecutionStatus.Success;\\n    }\\n\\n    function _pullFundFromSender(Types.SourceInfo memory _src) private returns (uint256 amount, address token) {\\n        if (_src.nativeIn) {\\n            require(_src.tokenIn == nativeWrap, \\\"tokenIn not nativeWrap\\\");\\n            require(msg.value >= _src.amountIn, \\\"insufficient native amount\\\");\\n            IWETH(nativeWrap).deposit{value: _src.amountIn}();\\n        } else {\\n            IERC20(_src.tokenIn).safeTransferFrom(msg.sender, address(this), _src.amountIn);\\n        }\\n        return (_src.amountIn, _src.tokenIn);\\n    }\\n\\n    function _pullFundFromPocket(bytes32 _id, Types.ExecutionInfo memory _exec)\\n        private\\n        returns (uint256 amount, address token)\\n    {\\n        Pocket pocket = new Pocket{salt: _id}();\\n\\n        uint256 fallbackAmount;\\n        if (_exec.bridgeOutFallbackToken != address(0)) {\\n            fallbackAmount = IERC20(_exec.bridgeOutFallbackToken).balanceOf(address(pocket)); // e.g. hToken/anyToken\\n        }\\n        uint256 erc20Amount = IERC20(_exec.bridgeOutToken).balanceOf(address(pocket));\\n        uint256 nativeAmount = address(pocket).balance;\\n\\n        // if the pocket does not have bridgeOutMin, we consider the transfer not arrived yet. in\\n        // this case we tell the msgbus to revert the outter tx using the MSG::ABORT: prefix and\\n        // our executor will retry sending this tx later.\\n        //\\n        // this bridgeOutMin is also a counter-measure to a DoS attack vector. if we assume the bridge\\n        // funds have arrived once we see a balance in the pocket, an attacker can deposit a small\\n        // amount of fund into the pocket and confuse this contract that the bridged fund has arrived.\\n        // this triggers the refund logic branch and thus denying the dst swap for the victim.\\n        // bridgeOutMin is determined by the server before sending out the transfer.\\n        // bridgeOutMin = R * bridgeAmountIn where R is an arbitrary ratio that we feel effective in\\n        // raising the attacker's attack cost.\\n        if (fallbackAmount > _exec.bridgeOutFallbackMin) {\\n            _claimPocketERC20(pocket, _exec.bridgeOutFallbackToken, fallbackAmount);\\n            amount = _deductFee(fallbackAmount, _exec.feeInBridgeOutFallbackToken, _exec.bridgeOutFallbackToken);\\n            token = _exec.bridgeOutFallbackToken;\\n        } else if (erc20Amount > _exec.bridgeOutMin) {\\n            _claimPocketERC20(pocket, _exec.bridgeOutToken, erc20Amount);\\n            amount = _deductFee(erc20Amount, _exec.feeInBridgeOutToken, _exec.bridgeOutToken);\\n            token = _exec.bridgeOutToken;\\n        } else if (nativeAmount > _exec.bridgeOutMin) {\\n            // no need to check before/after balance here since selfdestruct is guaranteed to\\n            // send all native tokens from the pocket to this contract.\\n            pocket.claim(address(0), 0);\\n            require(_exec.bridgeOutToken == nativeWrap, \\\"bridgeOutToken not nativeWrap\\\");\\n            amount = _deductFee(nativeAmount, _exec.feeInBridgeOutToken, _exec.bridgeOutToken);\\n            IWETH(_exec.bridgeOutToken).deposit{value: amount}();\\n            token = _exec.bridgeOutToken;\\n        } else {\\n            revert(\\\"MSG::ABORT:pocket is empty\\\");\\n        }\\n    }\\n\\n    // since the call result of the transfer function in the pocket contract is not checked, we check\\n    // the before and after balance of this contract to ensure that the amount is indeed received.\\n    function _claimPocketERC20(\\n        Pocket _pocket,\\n        address _token,\\n        uint256 _amount\\n    ) private {\\n        uint256 balBefore = IERC20(_token).balanceOf(address(this));\\n        _pocket.claim(_token, _amount);\\n        uint256 balAfter = IERC20(_token).balanceOf(address(this));\\n        require(balAfter - balBefore >= _amount, \\\"insufficient fund claimed\\\");\\n    }\\n\\n    function _getPocketAddr(bytes32 _salt, address _deployer) private pure returns (address) {\\n        // how to predict a create2 address:\\n        // https://docs.soliditylang.org/en/v0.8.17/control-structures.html?highlight=create2#salted-contract-creations-create2\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(bytes1(0xff), _deployer, _salt, keccak256(type(Pocket).creationCode))\\n        );\\n        return address(uint160(uint256(hash)));\\n    }\\n\\n    function _deductFee(\\n        uint256 _amount,\\n        uint256 _fee,\\n        address _token\\n    ) private returns (uint256 amount) {\\n        uint256 fee;\\n        // handle the case where amount received is not enough to pay fee\\n        if (_amount > _fee) {\\n            amount = _amount - _fee;\\n            fee = _fee;\\n        } else {\\n            fee = _amount;\\n        }\\n        if (_token == nativeWrap) {\\n            // TODO if the _executor param passed in from executeMessage is our executor, send fee\\n            // to fee vault. otherwise, send fee to the _executor address\\n            (bool ok, ) = feeVault.call{value: fee}(\\\"\\\");\\n            require(ok, \\\"send native failed\\\");\\n        } else {\\n            IERC20(_token).safeTransfer(feeVault, fee);\\n        }\\n    }\\n\\n    function _bridgeSend(\\n        Types.BridgeInfo memory _bridge,\\n        address _receiver,\\n        address _token,\\n        uint256 _amount\\n    ) private {\\n        IBridgeAdapter bridge = bridges[keccak256(bytes(_bridge.bridgeProvider))];\\n        IERC20(_token).safeIncreaseAllowance(address(bridge), _amount);\\n        bridge.bridge{value: _bridge.nativeFee}(_bridge.toChainId, _receiver, _amount, _token, _bridge.bridgeParams);\\n    }\\n\\n    function _executeSwap(\\n        ICodec.SwapDescription memory _swap,\\n        uint256 _amountIn,\\n        address _tokenIn\\n    )\\n        private\\n        returns (\\n            bool ok,\\n            uint256 amountOut,\\n            address tokenOut\\n        )\\n    {\\n        if (_swap.dex == address(0)) {\\n            // nop swap\\n            return (true, _amountIn, _tokenIn);\\n        }\\n        bytes4 selector = bytes4(_swap.data);\\n        ICodec codec = getCodec(_swap.dex, selector);\\n        address tokenIn;\\n        (, tokenIn, tokenOut) = codec.decodeCalldata(_swap);\\n        require(tokenIn == _tokenIn, \\\"swap info mismatch\\\");\\n\\n        bytes memory data = codec.encodeCalldataWithOverride(_swap.data, _amountIn, address(this));\\n        IERC20(tokenIn).safeApprove(_swap.dex, _amountIn);\\n        uint256 balBefore = IERC20(tokenOut).balanceOf(address(this));\\n        (bool success, ) = _swap.dex.call(data);\\n        // always revoke all allowance after swapping to:\\n        // 1. prevent malicious dex to pull funds from this contract later\\n        // 2. workaround some token's impl of approve() that requires current allowance == 0\\n        IERC20(tokenIn).safeApprove(_swap.dex, 0);\\n        if (!success) {\\n            return (false, 0, tokenOut);\\n        }\\n        uint256 balAfter = IERC20(tokenOut).balanceOf(address(this));\\n        return (true, balAfter - balBefore, tokenOut);\\n    }\\n\\n    function _sendToken(\\n        address _token,\\n        uint256 _amount,\\n        address _receiver,\\n        bool _nativeOut\\n    ) private {\\n        if (_nativeOut) {\\n            require(_token == nativeWrap, \\\"token is not nativeWrap\\\");\\n            IWETH(nativeWrap).withdraw(_amount);\\n            (bool sent, ) = _receiver.call{value: _amount, gas: 50000}(\\\"\\\");\\n            require(sent, \\\"send fail\\\");\\n        } else {\\n            IERC20(_token).safeTransfer(_receiver, _amount);\\n        }\\n    }\\n\\n    function _removeFirst(Types.ExecutionInfo[] memory _execs)\\n        private\\n        pure\\n        returns (Types.ExecutionInfo[] memory rest)\\n    {\\n        require(_execs.length > 0, \\\"empty execs\\\");\\n        rest = new Types.ExecutionInfo[](_execs.length - 1);\\n        for (uint256 i = 1; i < _execs.length; i++) {\\n            rest[i - 1] = _execs[i];\\n        }\\n    }\\n\\n    function _verify(Types.ExecutionInfo[] memory _execs, Types.SourceInfo memory _src) private view {\\n        require(_src.deadline > block.timestamp, \\\"deadline exceeded\\\");\\n        bytes memory data = abi.encodePacked(\\n            \\\"chainhop quote\\\",\\n            uint64(block.chainid),\\n            _src.amountIn,\\n            _src.tokenIn,\\n            _src.deadline\\n        );\\n        for (uint256 i = 1; i < _execs.length; i++) {\\n            Types.ExecutionInfo memory e = _execs[i];\\n            Types.BridgeInfo memory prevBridge = _execs[i - 1].bridge;\\n            require(e.bridgeOutToken != address(0) && e.bridgeOutMin > 0 && e.feeInBridgeOutToken > 0, \\\"invalid exec\\\");\\n            require(\\n                e.bridgeOutFallbackToken == address(0) ||\\n                    (e.bridgeOutFallbackMin > 0 && e.feeInBridgeOutFallbackToken > 0),\\n                \\\"invalid fallback\\\"\\n            );\\n            // bridged tokens and the chain id of the execution are encoded in the sig data so that\\n            // no malicious user can temper the fee they have to pay on any execution steps\\n            bytes memory execData = abi.encodePacked(\\n                prevBridge.toChainId,\\n                e.feeInBridgeOutToken,\\n                e.bridgeOutToken,\\n                e.feeInBridgeOutFallbackToken,\\n                e.bridgeOutFallbackToken,\\n                // native fee also needs to be agreed upon by chainhop for any subsequent bridge\\n                // since the fee is provided by chainhop's executor\\n                e.bridge.nativeFee\\n            );\\n            data = data.concat(execData);\\n        }\\n        bytes32 signHash = keccak256(data).toEthSignedMessageHash();\\n        verifySig(signHash, _src.quoteSig);\\n    }\\n}\\n\",\"keccak256\":\"0x0ec46d4ed26b575e46ab639915f7acf1366d17c53afffea037b9b392331b492f\",\"license\":\"GPL-3.0-only\"},\"contracts/Pocket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.15;\\n\\n// the pocket is a contract that is to be created conterfactually on the dst chain in the scenario where\\n// there is a dst swap. the main problem the pocket tries to solve is to gain the ability to know when and\\n// by how much the bridged tokens are received.\\n// when chainhop backend builds a cross-chain swap, it calculates a swap id (see _computeSwapId in\\n// ExecutionNode) and the id is used as the salt in generating a pocket address on the dst chain.\\n// this address is then assigned as the receiver of the bridge out tokens on the dst chain to temporarily\\n// hold the funds until the actual pocket contract is deployed at the exact address during the message execution.\\ncontract Pocket {\\n    function claim(address _token, uint256 _amt) external {\\n        address sender = msg.sender;\\n        _token.call(abi.encodeWithSelector(0xa9059cbb, sender, _amt));\\n        assembly {\\n            // selfdestruct sends all native balance to sender\\n            selfdestruct(sender)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1bd686baa02f538fb8a26428d605ab04180995f8aae237f3ea71171bca83760b\",\"license\":\"GPL-3.0-only\"},\"contracts/SigVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./lib/Ownable.sol\\\";\\n\\n/**\\n * @title Allows owner to set signer, and verifies signatures\\n * @author Padoriku\\n */\\ncontract SigVerifier is Ownable, Initializable {\\n    using ECDSA for bytes32;\\n\\n    address public signer;\\n\\n    event SignerUpdated(address from, address to);\\n\\n    function initSigVerifier(address _signer) internal onlyInitializing {\\n        _setSigner(_signer);\\n    }\\n\\n    function setSigner(address _signer) public onlyOwner {\\n        _setSigner(_signer);\\n    }\\n\\n    function _setSigner(address _signer) private {\\n        address oldSigner = signer;\\n        signer = _signer;\\n        emit SignerUpdated(oldSigner, _signer);\\n    }\\n\\n    function verifySig(bytes32 _hash, bytes memory _feeSig) internal view {\\n        address _signer = _hash.recover(_feeSig);\\n        require(_signer == signer, \\\"invalid signer\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xa6b55807bb74ab32998a36820c698fa3c64fc67102550726fffafe6292d6c1b8\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IBridgeAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\ninterface IBridgeAdapter {\\n    function bridge(\\n        uint64 _dstChainId,\\n        // the address that the fund is transfered to on the destination chain\\n        address _receiver,\\n        uint256 _amount,\\n        address _token,\\n        // Bridge transfers quoted and abi encoded by chainhop backend server.\\n        // Bridge adapter implementations need to decode this themselves.\\n        bytes memory _bridgeParams\\n    ) external payable returns (bytes memory bridgeResp);\\n}\\n\",\"keccak256\":\"0xbf85eb8c91c925c94841e1cc02fe129c3fe3c071a8293d35248eaccffc737504\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ICodec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface ICodec {\\n    struct SwapDescription {\\n        address dex; // the DEX to use for the swap, zero address implies no swap needed\\n        bytes data; // the data to call the dex with\\n    }\\n\\n    function decodeCalldata(SwapDescription calldata swap)\\n        external\\n        view\\n        returns (\\n            uint256 amountIn,\\n            address tokenIn,\\n            address tokenOut\\n        );\\n\\n    function encodeCalldataWithOverride(\\n        bytes calldata data,\\n        uint256 amountInOverride,\\n        address receiverOverride\\n    ) external pure returns (bytes memory swapCalldata);\\n}\\n\",\"keccak256\":\"0x3c063f0ffd87df3df38998c78273bc00ac835331905be997c7e3c6aa3bdbdcc4\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IExecutionNodeEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../lib/Types.sol\\\";\\n\\ninterface IExecutionNodeEvents {\\n    /**\\n     * @notice Emitted when operations on dst chain is done.\\n     * @param id see _computeId()\\n     * @param amountOut the amount of tokenOut from this step\\n     * @param tokenOut the token that is outputted from this step\\n     */\\n    event StepExecuted(bytes32 id, uint256 amountOut, address tokenOut);\\n\\n    event PocketFundClaimed(address receiver, uint256 erc20Amount, address token, uint256 nativeAmount);\\n}\\n\",\"keccak256\":\"0xaa250b30a774113715b997fa49f9877d8486d0f05b3b29c04d7d49aed30b2f06\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IMessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../lib/MsgDataTypes.sol\\\";\\n\\ninterface IMessageBus {\\n    event Executed(\\n        MsgDataTypes.MsgType msgType,\\n        bytes32 msgId,\\n        MsgDataTypes.TxStatus status,\\n        address indexed receiver,\\n        uint64 srcChainId,\\n        bytes32 srcTxHash\\n    );\\n\\n    function liquidityBridge() external view returns (address);\\n\\n    function pegBridge() external view returns (address);\\n\\n    function pegBridgeV2() external view returns (address);\\n\\n    function pegVault() external view returns (address);\\n\\n    function pegVaultV2() external view returns (address);\\n\\n    function feeBase() external view returns (uint256);\\n\\n    function feePerByte() external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the required fee for the message.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     @ @return The required fee.\\n     */\\n    function calcFee(bytes calldata _message) external view returns (uint256);\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native gas token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Sends a message associated with a transfer to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _srcBridge The bridge contract to send the transfer with.\\n     * @param _srcTransferId The transfer ID.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        address _srcBridge,\\n        bytes32 _srcTransferId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdrawFee(\\n        address _account,\\n        uint256 _cumulativeFee,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Execute a message with a successful transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransfer(\\n        bytes calldata _message,\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message with a refunded transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransferRefund(\\n        bytes calldata _message, // the same message associated with the original transfer\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message not associated with a transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessage(\\n        bytes calldata _message,\\n        MsgDataTypes.RouteInfo calldata _route,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x7b87c0bf4c9621809dedad54deb3aa7991a4ccef8be3693545e1516ad5904648\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessageReceiver {\\n    enum ExecutionStatus {\\n        Fail, // execution failed, finalized\\n        Success, // execution succeeded, finalized\\n        Retry // execution rejected, can retry later\\n    }\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver)\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x15d920153621fd56bae5067ca6347ebfc19fa49bbcde593be1e3b0309ba44b29\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x4af2aca7cbf87734e6ae30d3027baaddba6351f46e1ddbd155887a07ec85c2c2\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nlibrary Bytes {\\n    uint256 internal constant WORD_SIZE = 32;\\n\\n    function concat(bytes memory self, bytes memory other) internal pure returns (bytes memory) {\\n        bytes memory ret = new bytes(self.length + other.length);\\n        (uint256 src, uint256 srcLen) = fromBytes(self);\\n        (uint256 src2, uint256 src2Len) = fromBytes(other);\\n        (uint256 dest, ) = fromBytes(ret);\\n        uint256 dest2 = dest + srcLen;\\n        copy(src, dest, srcLen);\\n        copy(src2, dest2, src2Len);\\n        return ret;\\n    }\\n\\n    function fromBytes(bytes memory bts) internal pure returns (uint256 addr, uint256 len) {\\n        len = bts.length;\\n        assembly {\\n            addr := add(bts, 32)\\n        }\\n    }\\n\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) internal pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += WORD_SIZE;\\n            src += WORD_SIZE;\\n        }\\n\\n        if (len == 0) return;\\n\\n        // Copy remaining bytes\\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x176bb7f5d6108fcdff2b9e74eaf2c529e25b00869eed4fb1b774f6a28edeea95\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/MessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IMessageReceiver.sol\\\";\\n\\nabstract contract MessageReceiver is IMessageReceiver, Ownable, Initializable {\\n    event MessageBusUpdated(address messageBus);\\n\\n    // testMode is used for the ease of testing functions with the \\\"onlyMessageBus\\\" modifier.\\n    // WARNING: when testMode is true, ANYONE can call executeMessage functions\\n    // this variable can only be set during contract construction and is always not set on mainnets\\n    bool public testMode;\\n\\n    address public messageBus;\\n\\n    constructor(bool _testMode, address _messageBus) {\\n        testMode = _testMode;\\n        messageBus = _messageBus;\\n    }\\n\\n    function initMessageReceiver(bool _testMode, address _msgbus) internal onlyInitializing {\\n        require(!_testMode || block.chainid == 31337); // only allow testMode on hardhat local network\\n        testMode = _testMode;\\n        messageBus = _msgbus;\\n        emit MessageBusUpdated(messageBus);\\n    }\\n\\n    function setMessageBus(address _msgbus) public onlyOwner {\\n        messageBus = _msgbus;\\n        emit MessageBusUpdated(messageBus);\\n    }\\n\\n    modifier onlyMessageBus() {\\n        requireMessageBus();\\n        _;\\n    }\\n\\n    function requireMessageBus() internal view {\\n        if (!testMode) {\\n            require(msg.sender == messageBus, \\\"caller is not message bus\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver)\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual returns (ExecutionStatus) {}\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message\\n    ) external payable virtual returns (bool) {}\\n}\\n\",\"keccak256\":\"0xdebec7c9d0e2d8070e18beba957f093934ce39de7c6a515d086b9f022bac7472\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/MsgDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nlibrary MsgDataTypes {\\n    // bridge operation type at the sender side (src chain)\\n    enum BridgeSendType {\\n        Null,\\n        Liquidity,\\n        PegDeposit,\\n        PegBurn,\\n        PegV2Deposit,\\n        PegV2Burn,\\n        PegV2BurnFrom\\n    }\\n\\n    // bridge operation type at the receiver side (dst chain)\\n    enum TransferType {\\n        Null,\\n        LqRelay, // relay through liquidity bridge\\n        LqWithdraw, // withdraw from liquidity bridge\\n        PegMint, // mint through pegged token bridge\\n        PegWithdraw, // withdraw from original token vault\\n        PegV2Mint, // mint through pegged token bridge v2\\n        PegV2Withdraw // withdraw from original token vault v2\\n    }\\n\\n    enum MsgType {\\n        MessageWithTransfer,\\n        MessageOnly\\n    }\\n\\n    enum TxStatus {\\n        Null,\\n        Success,\\n        Fail,\\n        Fallback,\\n        Pending // transient state within a transaction\\n    }\\n\\n    struct TransferInfo {\\n        TransferType t;\\n        address sender;\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        uint64 wdseq; // only needed for LqWithdraw (refund)\\n        uint64 srcChainId;\\n        bytes32 refId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct RouteInfo {\\n        address sender;\\n        address receiver;\\n        uint64 srcChainId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct MsgWithTransferExecutionParams {\\n        bytes message;\\n        TransferInfo transfer;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n\\n    struct BridgeTransferParams {\\n        bytes request;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n}\\n\",\"keccak256\":\"0x4a815c72988c56480d9b3e18f3f067a000d287342a58dc419a7a0c402994d05b\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/NativeWrap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract NativeWrap is Ownable, Initializable {\\n    address public nativeWrap;\\n\\n    event NativeWrapUpdated(address nativeWrap);\\n\\n    constructor(address _nativeWrap) {\\n        nativeWrap = _nativeWrap;\\n    }\\n\\n    function initNativeWrap(address _nativeWrap) internal onlyInitializing {\\n        _setNativeWrap(_nativeWrap);\\n    }\\n\\n    function setNativeWrap(address _nativeWrap) external onlyOwner {\\n        _setNativeWrap(_nativeWrap);\\n    }\\n\\n    function _setNativeWrap(address _nativeWrap) private {\\n        nativeWrap = _nativeWrap;\\n        emit NativeWrapUpdated(_nativeWrap);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x29ff3cf5da7f54802162155d2ae74e273e0ebc2441c86bbbbe559a2287ceb116\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\n * renounceOwnership. So we can support Proxy based upgradable contract\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\n     * because constructor sets _owner in contract state.\\n     */\\n    function initOwner() internal {\\n        require(_owner == address(0), \\\"owner already set\\\");\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x2a92103195b8dce0f34fdf9bf7f94ddf38bf8edf0c0fd4be21323c47016687e9\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev modified version of OZ's Pausable to support Celer IM's message ABORT op code.\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"MSG::ABORT:paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"MSG::ABORT:not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x71761aefab229aeab89166db37c5ac9ca2f97cb2eb09f24f6b0904c1dcd5e863\",\"license\":\"MIT\"},\"contracts/lib/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\nabstract contract Pauser is Ownable, Pausable {\\n    mapping(address => bool) public pausers;\\n\\n    event PauserAdded(address account);\\n    event PauserRemoved(address account);\\n\\n    constructor() {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"Caller is not pauser\\\");\\n        _;\\n    }\\n\\n    function pause() public onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyPauser {\\n        _unpause();\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return pausers[account];\\n    }\\n\\n    function addPauser(address account) public onlyOwner {\\n        _addPauser(account);\\n    }\\n\\n    function removePauser(address account) public onlyOwner {\\n        _removePauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function _addPauser(address account) private {\\n        require(!isPauser(account), \\\"Account is already pauser\\\");\\n        pausers[account] = true;\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) private {\\n        require(isPauser(account), \\\"Account is not pauser\\\");\\n        pausers[account] = false;\\n        emit PauserRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0xe413a700e73019c1abc794fed7afc6d276f18c814f525da7ed001308b23751a1\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/Types.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./MsgDataTypes.sol\\\";\\nimport \\\"../interfaces/ICodec.sol\\\";\\n\\nlibrary Types {\\n    struct SourceInfo {\\n        // A number unique enough to be used in request ID generation.\\n        uint64 nonce;\\n        // the unix timestamp before which the fee is valid\\n        uint64 deadline;\\n        // sig of sha3(\\\"executor fee\\\", srcChainId, amountIn, tokenIn, deadline, toChainId, feeInBridgeOutToken, bridgeOutToken, feeInBridgeOutFallbackToken, bridgeOutFallbackToken[, toChainId, feeInBridgeOutToken, bridgeOutToken, feeInBridgeOutFallbackToken, bridgeOutFallbackToken]...)\\n        // see _verifyQuote()\\n        bytes quoteSig;\\n        uint256 amountIn;\\n        address tokenIn;\\n        bool nativeIn;\\n    }\\n\\n    function emptySourceInfo() internal pure returns (SourceInfo memory) {\\n        return SourceInfo(0, 0, \\\"\\\", 0, address(0), false);\\n    }\\n\\n    struct DestinationInfo {\\n        // The receiving party (the user) of the final output token\\n        // note that if an organization user's private key is breached, and if their original receiver is a contract\\n        // address, the hacker could deploy a malicious contract with the same address on the different chain and hence\\n        // get access to the user's pocket funds on that chain.\\n        // WARNING users should make sure their own deployer key's safety or that the receiver is\\n        // 1. not a reproducable address on any of the chains that chainhop supports\\n        // 2. a contract that they already deployed on all the chains that chainhop supports\\n        // 3. an EOA\\n        address receiver;\\n        bool nativeOut;\\n    }\\n\\n    struct ExecutionInfo {\\n        ICodec.SwapDescription swap;\\n        BridgeInfo bridge;\\n        address bridgeOutToken;\\n        // some bridges utilize a intermediary token (e.g. hToken for Hop and anyToken for Multichain)\\n        // in cases where there isn't enough underlying token liquidity on the dst chain, the user/pocket\\n        // could receive this token as a fallback. remote ExecutionNode needs to know what this token is\\n        // in order to check whether a fallback has happened and refund the user.\\n        address bridgeOutFallbackToken;\\n        // the minimum that remote ExecutionNode needs to receive in order to allow the swap message\\n        // to execute. note that this differs from a normal slippages controlling variable and is\\n        // purely used to deter DoS attacks (detailed in ExecutionNode).\\n        uint256 bridgeOutMin;\\n        uint256 bridgeOutFallbackMin;\\n        // executor fee\\n        uint256 feeInBridgeOutToken;\\n        // in case the bridging result in in fallback tokens, this is the amount of the fee that\\n        // chainhop charges\\n        uint256 feeInBridgeOutFallbackToken;\\n    }\\n\\n    struct BridgeInfo {\\n        uint64 toChainId;\\n        // bridge provider identifier\\n        string bridgeProvider;\\n        // Bridge transfers quoted and abi encoded by chainhop backend server.\\n        // Bridge adapter implementations need to decode this themselves.\\n        bytes bridgeParams;\\n        // the native fee required by the bridge provider\\n        uint256 nativeFee;\\n    }\\n\\n    struct Message {\\n        bytes32 id;\\n        Types.ExecutionInfo[] execs;\\n        Types.DestinationInfo dst;\\n    }\\n}\\n\",\"keccak256\":\"0x98528b9ce8047c1ca854035cc4924caf00fdbc4eefef501862f8d458d9f74e65\",\"license\":\"GPL-3.0-only\"},\"contracts/registries/BridgeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IBridgeAdapter.sol\\\";\\n\\nimport \\\"../lib/Ownable.sol\\\";\\n\\n/**\\n * @title Manages a list of supported bridges\\n * @author lionelhoho\\n * @author Padoriku\\n */\\nabstract contract BridgeRegistry is Ownable, Initializable {\\n    event SupportedBridgesUpdated(string[] providers, address[] adapters);\\n\\n    mapping(bytes32 => IBridgeAdapter) public bridges;\\n\\n    function initBridgeRegistry(string[] memory _providers, address[] memory _adapters) internal onlyInitializing {\\n        _setSupportedbridges(_providers, _adapters);\\n    }\\n\\n    // to disable a bridge, set the bridge addr of the corresponding provider to address(0)\\n    function setSupportedBridges(string[] memory _providers, address[] memory _adapters) external onlyOwner {\\n        _setSupportedbridges(_providers, _adapters);\\n    }\\n\\n    function _setSupportedbridges(string[] memory _providers, address[] memory _adapters) private {\\n        require(_providers.length == _adapters.length, \\\"params size mismatch\\\");\\n        for (uint256 i = 0; i < _providers.length; i++) {\\n            bridges[keccak256(bytes(_providers[i]))] = IBridgeAdapter(_adapters[i]);\\n        }\\n        emit SupportedBridgesUpdated(_providers, _adapters);\\n    }\\n}\\n\",\"keccak256\":\"0x7673dee4b2bd47233030257ee1a184b4d25413e93d5c803bae06723761fd3683\",\"license\":\"GPL-3.0-only\"},\"contracts/registries/DexRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/ICodec.sol\\\";\\n\\nimport \\\"../lib/Ownable.sol\\\";\\n\\n/**\\n * @title Manages a list supported dex\\n * @author Padoriku\\n */\\nabstract contract DexRegistry is Ownable, Initializable {\\n    event DexCodecUpdated(address dex, bytes4 selector, address codec);\\n\\n    // supported swap functions\\n    // 0x3df02124 exchange(int128,int128,uint256,uint256)\\n    // 0xa6417ed6 exchange_underlying(int128,int128,uint256,uint256)\\n    // 0x44ee1986 exchange_underlying(int128,int128,uint256,uint256,address)\\n    // 0x38ed1739 swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\\n    // 0xc04b8d59 exactInput((bytes,address,uint256,uint256,uint256))\\n    // 0xb0431182 clipperSwap(address,address,uint256,uint256)\\n    // 0xe449022e uniswapV3Swap(uint256,uint256,uint256[])\\n    // 0x2e95b6c8 unoswap(address,uint256,uint256,bytes32[])\\n    // 0x7c025200 swap(address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes)\\n    // 0xd0a3b665 fillOrderRFQ((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256)\\n    mapping(address => mapping(bytes4 => address)) public dexFunc2Codec;\\n\\n    function initDexRegistry(\\n        address[] memory _dexList,\\n        string[] memory _funcs,\\n        address[] memory _codecs\\n    ) internal onlyInitializing {\\n        _setDexCodecs(_dexList, _funcs, _codecs);\\n    }\\n\\n    function setDexCodecs(\\n        address[] memory _dexList,\\n        string[] memory _funcs,\\n        address[] memory _codecs\\n    ) external onlyOwner {\\n        _setDexCodecs(_dexList, _funcs, _codecs);\\n    }\\n\\n    function _setDexCodecs(\\n        address[] memory _dexList,\\n        string[] memory _funcs,\\n        address[] memory _codecs\\n    ) private {\\n        require(_dexList.length == _funcs.length && _dexList.length == _codecs.length, \\\"codec lengths mismatch\\\");\\n        for (uint256 i = 0; i < _dexList.length; i++) {\\n            bytes4 selector = bytes4(keccak256(bytes(_funcs[i])));\\n            _setDexCodec(_dexList[i], selector, _codecs[i]);\\n        }\\n    }\\n\\n    function _setDexCodec(\\n        address _dex,\\n        bytes4 _selector,\\n        address _codec\\n    ) private {\\n        address codec = dexFunc2Codec[_dex][_selector];\\n        require(codec != _codec, \\\"nop\\\");\\n        dexFunc2Codec[_dex][_selector] = _codec;\\n        emit DexCodecUpdated(_dex, _selector, _codec);\\n    }\\n\\n    function getCodec(address _dex, bytes4 _selector) internal view returns (ICodec) {\\n        require(dexFunc2Codec[_dex][_selector] != address(0), \\\"unsupported dex\\\");\\n        return ICodec(dexFunc2Codec[_dex][_selector]);\\n    }\\n}\\n\",\"keccak256\":\"0x3b48ad651daf79ee211077dcd4c8ee3a7b58618a438b1feb53a796ff55c75742\",\"license\":\"GPL-3.0-only\"},\"contracts/registries/FeeVaultRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../lib/Ownable.sol\\\";\\n\\n/**\\n * @title Allows the owner to set fee account\\n * @author Padoriku\\n */\\nabstract contract FeeVaultRegistry is Ownable, Initializable {\\n    address public feeVault;\\n\\n    event FeeVaultUpdated(address from, address to);\\n\\n    function initFeeVaultRegistry(address _vault) internal onlyInitializing {\\n        _setFeeVault(_vault);\\n    }\\n\\n    function setFeeVault(address _vault) external onlyOwner {\\n        _setFeeVault(_vault);\\n    }\\n\\n    function _setFeeVault(address _vault) private {\\n        address oldFeeCollector = feeVault;\\n        feeVault = _vault;\\n        emit FeeVaultUpdated(oldFeeCollector, _vault);\\n    }\\n}\\n\",\"keccak256\":\"0x8230b5e58eb840e481454fb149bcd008f54cbf39c8ffad5108fa4b064ae753cc\",\"license\":\"GPL-3.0-only\"},\"contracts/registries/RemoteExecutionNodeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../lib/Ownable.sol\\\";\\n\\n/**\\n * @title Allows the owner to whitelist remote ExecutionNode addresses\\n * @author Padoriku\\n */\\nabstract contract RemoteExecutionNodeRegistry is Ownable, Initializable {\\n    // chainId => address mapping\\n    mapping(uint64 => address) public remotes;\\n\\n    event RemotesUpdated(uint64[] chainIds, address[] remotes);\\n\\n    function setRemotes(uint64[] memory _chainIds, address[] memory _remotes) external onlyOwner {\\n        _setRemotes(_chainIds, _remotes);\\n    }\\n\\n    function _setRemotes(uint64[] memory _chainIds, address[] memory _remotes) private {\\n        require(_chainIds.length == _remotes.length, \\\"remotes length mismatch\\\");\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            remotes[_chainIds[i]] = _remotes[i];\\n        }\\n        emit RemotesUpdated(_chainIds, _remotes);\\n    }\\n\\n    modifier onlyRemoteExecutionNode(uint64 _chainId, address _remote) {\\n        requireRemoteExecutionNode(_chainId, _remote);\\n        _;\\n    }\\n\\n    function requireRemoteExecutionNode(uint64 _chainId, address _remote) internal view {\\n        require(remotes[_chainId] == _remote, \\\"unknown remote\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x73b3bbceb317a6f6d0beb7f2eeb7a5862467d5df8ffe2da349808c7d634cfba4\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005f5638038062005f568339810160408190526200003491620002ba565b8083836200004233620000b8565b60008054921515600160b01b0260ff60b01b1990931692909217909155600180546001600160a01b039283166001600160a01b0319918216178255600680549490931693169290921790556007556008805460ff19169055620000a53362000108565b620000af620001d1565b5050506200030a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811660009081526009602052604090205460ff1615620001775760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c7265616479207061757365720000000000000060448201526064015b60405180910390fd5b6001600160a01b038116600081815260096020908152604091829020805460ff1916600117905590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8910160405180910390a150565b600054600160a81b900460ff16156200023d5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b60648201526084016200016e565b60005460ff600160a01b909104811610156200029b576000805460ff60a01b191660ff60a01b17905560405160ff81527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b80516001600160a01b0381168114620002b557600080fd5b919050565b600080600060608486031215620002d057600080fd5b83518015158114620002e157600080fd5b9250620002f1602085016200029d565b915062000301604085016200029d565b90509250925092565b615c3c806200031a6000396000f3fe6080604052600436106101e75760003560e01c80637228e5c4116101025780639c649fdf11610095578063cd9ea34211610064578063cd9ea342146105c2578063d3ac0fbc146105e3578063eeaaa65114610603578063f2fde38b1461063957600080fd5b80639c649fdf146105215780639e02c9f914610541578063a1a227fa14610582578063a591f97f146105a257600080fd5b806382dc1ec4116100d157806382dc1ec4146104ae5780638456cb59146104ce5780638da5cb5b146104e3578063918ead761461050157600080fd5b80637228e5c41461041e5780637a0f93561461043e5780637ae267731461045e57806380f51c121461047e57600080fd5b806346fbf68e1161017a5780635c975abb116101495780635c975abb146103b15780636b2c0f55146103c95780636c19e783146103e95780636ef8d66d1461040957600080fd5b806346fbf68e14610318578063478222c214610351578063547cad12146103715780635b5a66a71461039157600080fd5b8063289774a9116101b6578063289774a91461029a578063292e31ee146102ad5780633f4ba83a146102e3578063457bfa2f146102f857600080fd5b806306b4771c146101f35780631cfcc0fc1461021557806320be95f214610235578063238ac9331461026257600080fd5b366101ee57005b600080fd5b3480156101ff57600080fd5b5061021361020e3660046145b7565b610659565b005b34801561022157600080fd5b5061021361023036600461475c565b6107fb565b61024d61024336600461481e565b6000949350505050565b60405190151581526020015b60405180910390f35b34801561026e57600080fd5b50600454610282906001600160a01b031681565b6040516001600160a01b039091168152602001610259565b6102136102a8366004614b20565b61085c565b3480156102b957600080fd5b506102826102c8366004614cad565b600a602052600090815260409020546001600160a01b031681565b3480156102ef57600080fd5b50610213610add565b34801561030457600080fd5b50600654610282906001600160a01b031681565b34801561032457600080fd5b5061024d6103333660046145b7565b6001600160a01b031660009081526009602052604090205460ff1690565b34801561035d57600080fd5b50600554610282906001600160a01b031681565b34801561037d57600080fd5b5061021361038c3660046145b7565b610b46565b34801561039d57600080fd5b506102136103ac3660046145b7565b610bf2565b3480156103bd57600080fd5b5060085460ff1661024d565b3480156103d557600080fd5b506102136103e43660046145b7565b610c52565b3480156103f557600080fd5b506102136104043660046145b7565b610cb2565b34801561041557600080fd5b50610213610d12565b34801561042a57600080fd5b50610213610439366004614d4a565b610d1b565b34801561044a57600080fd5b50610213610459366004614dd2565b610d82565b34801561046a57600080fd5b50610213610479366004614e2e565b611084565b34801561048a57600080fd5b5061024d6104993660046145b7565b60096020526000908152604090205460ff1681565b3480156104ba57600080fd5b506102136104c93660046145b7565b6110f0565b3480156104da57600080fd5b50610213611150565b3480156104ef57600080fd5b506000546001600160a01b0316610282565b34801561050d57600080fd5b5061021361051c366004614e67565b6111b7565b61053461052f366004614eb4565b611218565b6040516102599190614f34565b34801561054d57600080fd5b5061028261055c366004614f5c565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b34801561058e57600080fd5b50600154610282906001600160a01b031681565b3480156105ae57600080fd5b506102136105bd3660046145b7565b6114f7565b3480156105ce57600080fd5b5060005461024d90600160b01b900460ff1681565b3480156105ef57600080fd5b506102136105fe366004614f97565b611557565b34801561060f57600080fd5b5061028261061e3660046150be565b6003602052600090815260409020546001600160a01b031681565b34801561064557600080fd5b506102136106543660046145b7565b6116f1565b3361066c6000546001600160a01b031690565b6001600160a01b0316146106b55760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064015b60405180910390fd5b6001600160a01b03811661076a57600080546040516001600160a01b039091169047908381818185875af1925050503d8060008114610710576040519150601f19603f3d011682016040523d82523d6000602084013e610715565b606091505b50509050806107665760405162461bcd60e51b815260206004820152601260248201527f73656e64206e6174697665206661696c6564000000000000000000000000000060448201526064016106ac565b5050565b6107f861077f6000546001600160a01b031690565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa1580156107c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e791906150d7565b6001600160a01b03841691906117cd565b50565b3361080e6000546001600160a01b031690565b6001600160a01b0316146108525760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b6107668282611845565b610864611971565b6002600754036108b65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106ac565b600260075582516108ef5760405162461bcd60e51b815260206004820152600360248201526206e6f760ec1b60448201526064016106ac565b60008260600151116109435760405162461bcd60e51b815260206004820152600860248201527f3020616d6f756e7400000000000000000000000000000000000000000000000060448201526064016106ac565b80516001600160a01b031661099a5760405162461bcd60e51b815260206004820152600a60248201527f302072656365697665720000000000000000000000000000000000000000000060448201526064016106ac565b60006109af33836000015185600001516119c4565b90506000846000815181106109c6576109c66150f0565b602002602001015190506001855111156109e4576109e48585611a24565b6000806109f086611d94565b9150915060008211610a445760405162461bcd60e51b815260206004820152600f60248201527f616d6f756e74206d757374203e2030000000000000000000000000000000000060448201526064016106ac565b825151829082906001600160a01b031615610abf578451600190610a69908686611f02565b9094509250905080610abd5760405162461bcd60e51b815260206004820152600960248201527f73776170206661696c000000000000000000000000000000000000000000000060448201526064016106ac565b505b610acc868a89848661223d565b505060016007555050505050505050565b3360009081526009602052604090205460ff16610b3c5760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f742070617573657200000000000000000000000060448201526064016106ac565b610b4461252a565b565b33610b596000546001600160a01b031690565b6001600160a01b031614610b9d5760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f3f8223bcd8b3b875473e9f9e14e1ad075451a2b5ffd31591655da9a01516bf5e906020015b60405180910390a150565b33610c056000546001600160a01b031690565b6001600160a01b031614610c495760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b6107f88161257c565b33610c656000546001600160a01b031690565b6001600160a01b031614610ca95760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b6107f8816125ca565b33610cc56000546001600160a01b031690565b6001600160a01b031614610d095760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b6107f881612683565b610b44336125ca565b33610d2e6000546001600160a01b031690565b6001600160a01b031614610d725760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b610d7d8383836126dd565b505050565b610d8a611971565b600260075403610ddc5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106ac565b6002600755336001600160a01b03841614610e395760405162461bcd60e51b815260206004820152601760248201527f6f6e6c792072656365697665722063616e20636c61696d00000000000000000060448201526064016106ac565b6000610e468585856119c4565b9050600081604051610e57906144e9565b8190604051809103906000f5905080158015610e77573d6000803e3d6000fd5b506040516370a0823160e01b81526001600160a01b0380831660048301529192506000918516906370a0823190602401602060405180830381865afa158015610ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee891906150d7565b90506001600160a01b0382163181151580610f035750600081115b610f4f5760405162461bcd60e51b815260206004820152600f60248201527f706f636b657420697320656d707479000000000000000000000000000000000060448201526064016106ac565b610f5a8386846127bc565b8115610f7457610f746001600160a01b03861688846117cd565b8015611024576000876001600160a01b03168261c35090604051600060405180830381858888f193505050503d8060008114610fcc576040519150601f19603f3d011682016040523d82523d6000602084013e610fd1565b606091505b50509050806110225760405162461bcd60e51b815260206004820152601560248201527f6661696c656420746f2073656e64206e6174697665000000000000000000000060448201526064016106ac565b505b604080516001600160a01b038981168252602082018590528716818301526060810183905290517f93792cbd2b72fa0c2850634d3177263b6f8dbe5c2245b5ad2522ef65b5a9b8d59181900360800190a150506001600755505050505050565b336110976000546001600160a01b031690565b6001600160a01b0316146110db5760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b6107666001600160a01b03831682600061295a565b336111036000546001600160a01b031690565b6001600160a01b0316146111475760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b6107f881612a76565b3360009081526009602052604090205460ff166111af5760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f742070617573657200000000000000000000000060448201526064016106ac565b610b44612b33565b336111ca6000546001600160a01b031690565b6001600160a01b03161461120e5760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b6107668282612b70565b6000611222612c83565b838561122e8282612cee565b611236611971565b6002600754036112885760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106ac565b600260075584516000906112a590870160209081019088016152b6565b90506000816020015151116112e25760405162461bcd60e51b815260206004820152600360248201526206e6f760ec1b60448201526064016106ac565b600034905060008260200151600081518110611300576113006150f0565b6020026020010151905060008061131b856000015184612d62565b915091508160000361138857845160408051918252600060208301526001600160a01b038316908201527f295612f9c20f128efb8df333990658b0f1b8083bc7b6dcf90750348cede4c299906060015b60405180910390a161137c846130b6565b975050505050506114e8565b82606001516001600160a01b0316816001600160a01b031603611402576113ba8183876040015160000151600061318b565b845160408051918252602082018490526001600160a01b038316908201527f295612f9c20f128efb8df333990658b0f1b8083bc7b6dcf90750348cede4c2999060600161136b565b825151829082906001600160a01b0316156114ab578451600190611427908686611f02565b90945092509050806114a95761144884868a6040015160000151600061318b565b875160408051918252602082018790526001600160a01b03861682820152517f295612f9c20f128efb8df333990658b0f1b8083bc7b6dcf90750348cede4c2999181900360600190a161149a876130b6565b9a5050505050505050506114e8565b505b60006114c6886000015189602001518a60400151858761223d565b90506114d2818861546c565b96506114dd876130b6565b9a5050505050505050505b50506001600755949350505050565b3361150a6000546001600160a01b031690565b6001600160a01b03161461154e5760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b6107f88161330e565b600054600160a81b900460ff161580801561157f57506000546001600160a01b90910460ff16105b806115a05750303b1580156115a05750600054600160a01b900460ff166001145b6116125760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016106ac565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b179055801561165a576000805460ff60a81b1916600160a81b1790555b611662613368565b61166c8b8b6133ca565b6116778686866134ce565b611681838361353b565b61168a876135a8565b61169388613615565b61169c89613682565b80156116e4576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b336117046000546001600160a01b031690565b6001600160a01b0316146117485760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b6001600160a01b0381166117c45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106ac565b6107f8816136ef565b6040516001600160a01b038316602482015260448101829052610d7d90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199093169290921790915261373f565b80518251146118965760405162461bcd60e51b815260206004820152601760248201527f72656d6f746573206c656e677468206d69736d6174636800000000000000000060448201526064016106ac565b60005b8251811015611933578181815181106118b4576118b46150f0565b6020026020010151600a60008584815181106118d2576118d26150f0565b602002602001015167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550808061192b90615483565b915050611899565b507fe000e6cd4a5421450046ea059588823e2c45d75255bc2ce0031a7c64d32f8c1682826040516119659291906154e0565b60405180910390a15050565b60085460ff1615610b445760405162461bcd60e51b815260206004820152601160248201527f4d53473a3a41424f52543a70617573656400000000000000000000000000000060448201526064016106ac565b6040516bffffffffffffffffffffffff19606085811b8216602084015284901b1660348201526001600160c01b031960c083901b1660488201526000906050016040516020818303038152906040528051906020012090505b9392505050565b42816020015167ffffffffffffffff1611611a815760405162461bcd60e51b815260206004820152601160248201527f646561646c696e6520657863656564656400000000000000000000000000000060448201526064016106ac565b600046826060015183608001518460200151604051602001611b0b94939291907f636861696e686f702071756f7465000000000000000000000000000000000000815260c094851b6001600160c01b0319908116600e830152601682019490945260609290921b6bffffffffffffffffffffffff1916603683015290921b16604a82015260520190565b60408051601f19818403018152919052905060015b8351811015611d2e576000848281518110611b3d57611b3d6150f0565b60200260200101519050600085600184611b57919061546c565b81518110611b6757611b676150f0565b602002602001015160200151905060006001600160a01b031682604001516001600160a01b031614158015611ba0575060008260800151115b8015611bb0575060008260c00151115b611bfc5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c69642065786563000000000000000000000000000000000000000060448201526064016106ac565b60608201516001600160a01b03161580611c29575060008260a00151118015611c29575060008260e00151115b611c755760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642066616c6c6261636b0000000000000000000000000000000060448201526064016106ac565b600081600001518360c0015184604001518560e001518660600151876020015160600151604051602001611cfa9695949392919060c09690961b6001600160c01b03191686526008860194909452606092831b6bffffffffffffffffffffffff199081166028870152603c86019290925290911b16605c830152607082015260900190565b60408051601f198184030181529190529050611d168582613824565b94505050508080611d2690615483565b915050611b20565b508051602080830191909120604080517f19457468657265756d205369676e6564204d6573736167653a0a33320000000081850152603c8082019390935281518082039093018352605c0190528051910120611d8e8184604001516138ec565b50505050565b6000808260a0015115611ec95760065460808401516001600160a01b03908116911614611e035760405162461bcd60e51b815260206004820152601660248201527f746f6b656e496e206e6f74206e6174697665577261700000000000000000000060448201526064016106ac565b8260600151341015611e575760405162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e74206e617469766520616d6f756e7400000000000060448201526064016106ac565b600660009054906101000a90046001600160a01b03166001600160a01b031663d0e30db084606001516040518263ffffffff1660e01b81526004016000604051808303818588803b158015611eab57600080fd5b505af1158015611ebf573d6000803e3d6000fd5b5050505050611ef1565b611ef13330856060015186608001516001600160a01b0316613958909392919063ffffffff16565b505060608101516080909101519091565b8251600090819081906001600160a01b0316611f2657506001915083905082612234565b60008660200151611f3690615541565b90506000611f48886000015183613990565b90506000816001600160a01b031663358f0e1c8a6040518263ffffffff1660e01b8152600401611f7891906155cc565b606060405180830381865afa158015611f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb991906155df565b95509150506001600160a01b03808216908816146120195760405162461bcd60e51b815260206004820152601260248201527f7377617020696e666f206d69736d61746368000000000000000000000000000060448201526064016106ac565b6020890151604051634c6da26960e01b81526000916001600160a01b03851691634c6da2699161204f918d903090600401615622565b600060405180830381865afa15801561206c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120949190810190615654565b8a519091506120ae906001600160a01b038416908b61295a565b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a0823190602401602060405180830381865afa1580156120f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211991906150d7565b905060008b600001516001600160a01b0316836040516121399190615689565b6000604051808303816000865af19150503d8060008114612176576040519150601f19603f3d011682016040523d82523d6000602084013e61217b565b606091505b50508c51909150612198906001600160a01b03861690600061295a565b806121af5760008098509850505050505050612234565b6040516370a0823160e01b81523060048201526000906001600160a01b038916906370a0823190602401602060405180830381865afa1580156121f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221a91906150d7565b90506001612228848361546c565b99509950505050505050505b93509350939050565b60008085600081518110612253576122536150f0565b6020026020010151905061226686613a43565b955085516000148015612286575060208101515167ffffffffffffffff16155b156122f15761229f84848760000151886020015161318b565b60408051888152602081018590526001600160a01b0386168183015290517f295612f9c20f128efb8df333990658b0f1b8083bc7b6dcf90750348cede4c2999181900360600190a16000915050612521565b84518651156124af576020808301515167ffffffffffffffff166000908152600a90915260409020546001600160a01b0316806123705760405162461bcd60e51b815260206004820152601060248201527f72656d6f7465206e6f7420666f756e640000000000000000000000000000000060448201526064016106ac565b61237a8982613b60565b9150600060405180606001604052808b81526020018a8152602001898152506040516020016123a991906156a5565b60408051601f198184030181529082905260015463299aee5160e11b83529092506000916001600160a01b0390911690635335dca2906123ed9085906004016157f3565b602060405180830381865afa15801561240a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242e91906150d7565b600154602087015151604051634f9e72ad60e11b81529293506001600160a01b0390911691639f3ce55a91849161246b9188918890600401615806565b6000604051808303818588803b15801561248457600080fd5b505af1158015612498573d6000803e3d6000fd5b505050505080866124a99190615838565b95505050505b6124bf8260200151828787613c14565b6020820151606001516124d29084615838565b604080518a8152602081018790526001600160a01b0388168183015290519194507f295612f9c20f128efb8df333990658b0f1b8083bc7b6dcf90750348cede4c299919081900360600190a150505b95945050505050565b612532613cd6565b6008805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600680546001600160a01b0319166001600160a01b0383169081179091556040519081527fb878cd71628ac64b2df1872301925e01164824535b02e8601077749eeeb88c3d90602001610be7565b6001600160a01b03811660009081526009602052604090205460ff166126325760405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f7420706175736572000000000000000000000060448201526064016106ac565b6001600160a01b038116600081815260096020908152604091829020805460ff1916905590519182527fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9101610be7565b600480546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f2d025324f0a785e8c12d0a0d91a9caa49df4ef20ff87e0df7213a1d4f3157beb9101611965565b815183511480156126ef575080518351145b61273b5760405162461bcd60e51b815260206004820152601660248201527f636f646563206c656e67746873206d69736d617463680000000000000000000060448201526064016106ac565b60005b8351811015611d8e57600083828151811061275b5761275b6150f0565b60200260200101518051906020012090506127a9858381518110612781576127816150f0565b60200260200101518285858151811061279c5761279c6150f0565b6020026020010151613d28565b50806127b481615483565b91505061273e565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015612803573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282791906150d7565b604051635569f64b60e11b81526001600160a01b038581166004830152602482018590529192509085169063aad3ec9690604401600060405180830381600087803b15801561287557600080fd5b505af1158015612889573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03861691506370a0823190602401602060405180830381865afa1580156128d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f891906150d7565b905082612905838361546c565b10156129535760405162461bcd60e51b815260206004820152601960248201527f696e73756666696369656e742066756e6420636c61696d65640000000000000060448201526064016106ac565b5050505050565b8015806129d45750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156129ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d291906150d7565b155b612a465760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016106ac565b6040516001600160a01b038316602482015260448101829052610d7d90849063095ea7b360e01b906064016117f9565b6001600160a01b03811660009081526009602052604090205460ff1615612adf5760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c7265616479207061757365720000000000000060448201526064016106ac565b6001600160a01b038116600081815260096020908152604091829020805460ff1916600117905590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89101610be7565b612b3b611971565b6008805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861255f3390565b8051825114612bc15760405162461bcd60e51b815260206004820152601460248201527f706172616d732073697a65206d69736d6174636800000000000000000000000060448201526064016106ac565b60005b8251811015612c5157818181518110612bdf57612bdf6150f0565b602002602001015160036000858481518110612bfd57612bfd6150f0565b602002602001015180519060200120815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508080612c4990615483565b915050612bc4565b507f68d2b5e14eb61b73f2dfa46a255dcba81a3b53259093a83c90da69c3ade70b968282604051611965929190615850565b600054600160b01b900460ff16610b44576001546001600160a01b03163314610b445760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d657373616765206275730000000000000060448201526064016106ac565b67ffffffffffffffff82166000908152600a60205260409020546001600160a01b038281169116146107665760405162461bcd60e51b815260206004820152600e60248201527f756e6b6e6f776e2072656d6f746500000000000000000000000000000000000060448201526064016106ac565b600080600084604051612d74906144e9565b8190604051809103906000f5905080158015612d94573d6000803e3d6000fd5b5060608501519091506000906001600160a01b031615612e215760608501516040516370a0823160e01b81526001600160a01b038481166004830152909116906370a0823190602401602060405180830381865afa158015612dfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1e91906150d7565b90505b60408086015190516370a0823160e01b81526001600160a01b03848116600483015260009216906370a0823190602401602060405180830381865afa158015612e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9291906150d7565b60a08701519091506001600160a01b0384163190831115612edd57612ebc848860600151856127bc565b612ecf838860e001518960600151613e1a565b9550866060015194506130ab565b8660800151821115612f1957612ef8848860400151846127bc565b612f0b828860c001518960400151613e1a565b9550866040015194506130ab565b866080015181111561306357604051635569f64b60e11b815260006004820181905260248201526001600160a01b0385169063aad3ec9690604401600060405180830381600087803b158015612f6e57600080fd5b505af1158015612f82573d6000803e3d6000fd5b505060065460408a01516001600160a01b039081169116149150612fea90505760405162461bcd60e51b815260206004820152601d60248201527f6272696467654f7574546f6b656e206e6f74206e61746976655772617000000060448201526064016106ac565b612ffd818860c001518960400151613e1a565b955086604001516001600160a01b031663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b15801561303e57600080fd5b505af1158015613052573d6000803e3d6000fd5b5050505050866040015194506130ab565b60405162461bcd60e51b815260206004820152601a60248201527f4d53473a3a41424f52543a706f636b657420697320656d70747900000000000060448201526064016106ac565b505050509250929050565b6000811561318357604051600090329061c35090859084818181858888f193505050503d8060008114613105576040519150601f19603f3d011682016040523d82523d6000602084013e61310a565b606091505b50509050806131815760405162461bcd60e51b815260206004820152602760248201527f6661696c656420746f20726566756e642072656d61696e696e67206e6174697660448201527f6520746f6b656e0000000000000000000000000000000000000000000000000060648201526084016106ac565b505b506001919050565b80156132fa576006546001600160a01b038581169116146131ee5760405162461bcd60e51b815260206004820152601760248201527f746f6b656e206973206e6f74206e61746976655772617000000000000000000060448201526064016106ac565b600654604051632e1a7d4d60e01b8152600481018590526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561323457600080fd5b505af1158015613248573d6000803e3d6000fd5b505050506000826001600160a01b03168461c35090604051600060405180830381858888f193505050503d806000811461329e576040519150601f19603f3d011682016040523d82523d6000602084013e6132a3565b606091505b50509050806132f45760405162461bcd60e51b815260206004820152600960248201527f73656e64206661696c000000000000000000000000000000000000000000000060448201526064016106ac565b50611d8e565b611d8e6001600160a01b03851683856117cd565b600580546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f47ffc4777a9849fd88ac272225845f7bbcfa9920f222b459c2e6b28156ce72499101611965565b6000546001600160a01b0316156133c15760405162461bcd60e51b815260206004820152601160248201527f6f776e657220616c72656164792073657400000000000000000000000000000060448201526064016106ac565b610b44336136ef565b600054600160a81b900460ff166134375760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ac565b811580613445575046617a69145b61344e57600080fd5b600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16600160b01b84151502179055600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f3f8223bcd8b3b875473e9f9e14e1ad075451a2b5ffd31591655da9a01516bf5e90602001611965565b600054600160a81b900460ff16610d725760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ac565b600054600160a81b900460ff1661120e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ac565b600054600160a81b900460ff1661154e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ac565b600054600160a81b900460ff16610d095760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ac565b600054600160a81b900460ff16610c495760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ac565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000613794826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613f1d9092919063ffffffff16565b805190915015610d7d57808060200190518101906137b291906158bd565b610d7d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106ac565b60606000825184516138369190615838565b67ffffffffffffffff81111561384e5761384e6145d4565b6040519080825280601f01601f191660200182016040528015613878576020820181803683370190505b50905060008061388c868051602090910191565b915091506000806138a1878051602090910191565b9150915060006138b5868051602090910191565b50905060006138c48583615838565b90506138d1868387613f34565b6138dc848285613f34565b5094955050505050505b92915050565b60006138f88383613fb2565b6004549091506001600160a01b03808316911614610d7d5760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964207369676e657200000000000000000000000000000000000060448201526064016106ac565b6040516001600160a01b0380851660248301528316604482015260648101829052611d8e9085906323b872dd60e01b906084016117f9565b6001600160a01b0382811660009081526002602090815260408083206001600160e01b031986168452909152812054909116613a0e5760405162461bcd60e51b815260206004820152600f60248201527f756e737570706f7274656420646578000000000000000000000000000000000060448201526064016106ac565b506001600160a01b0391821660009081526002602090815260408083206001600160e01b031994909416835292905220541690565b60606000825111613a965760405162461bcd60e51b815260206004820152600b60248201527f656d70747920657865637300000000000000000000000000000000000000000060448201526064016106ac565b60018251613aa4919061546c565b67ffffffffffffffff811115613abc57613abc6145d4565b604051908082528060200260200182016040528015613af557816020015b613ae26144f6565b815260200190600190039081613ada5790505b50905060015b8251811015613b5a57828181518110613b1657613b166150f0565b602002602001015182600183613b2c919061546c565b81518110613b3c57613b3c6150f0565b60200260200101819052508080613b5290615483565b915050613afb565b50919050565b60008060ff60f81b838560405180602001613b7a906144e9565b6020820181038252601f19601f8201166040525080519060200120604051602001613bf494939291907fff0000000000000000000000000000000000000000000000000000000000000094909416845260609290921b6bffffffffffffffffffffffff191660018401526015830152603582015260550190565b60408051808303601f190181529190528051602090910120949350505050565b6020808501518051908201206000908152600390915260409020546001600160a01b0390811690613c489084168284613fce565b6060850151855160408088015190516324c9401b60e01b81526001600160a01b038516936324c9401b939092613c87928a9189918b91906004016158da565b60006040518083038185885af1158015613ca5573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052613cce9190810190615654565b505050505050565b60085460ff16610b445760405162461bcd60e51b815260206004820152601560248201527f4d53473a3a41424f52543a6e6f7420706175736564000000000000000000000060448201526064016106ac565b6001600160a01b0380841660009081526002602090815260408083206001600160e01b03198716845290915290205481169082168103613d905760405162461bcd60e51b815260206004820152600360248201526206e6f760ec1b60448201526064016106ac565b6001600160a01b0384811660008181526002602090815260408083206001600160e01b031989168085529083529281902080546001600160a01b03191695881695861790558051938452908301919091528101919091527f454003ca28aca3b395ad1720eedfe6ee23b22ae10af0a8bb39c206ca1ca5679b9060600160405180910390a150505050565b60008083851115613e3957613e2f848661546c565b9150839050613e3c565b50835b6006546001600160a01b0390811690841603613efb576005546040516000916001600160a01b03169083908381818185875af1925050503d8060008114613e9f576040519150601f19603f3d011682016040523d82523d6000602084013e613ea4565b606091505b5050905080613ef55760405162461bcd60e51b815260206004820152601260248201527f73656e64206e6174697665206661696c6564000000000000000000000000000060448201526064016106ac565b50613f15565b600554613f15906001600160a01b038581169116836117cd565b509392505050565b6060613f2c8484600085614080565b949350505050565b60208110613f6c5782518252613f4b602083615838565b9150613f58602084615838565b9250613f6560208261546c565b9050613f34565b80600003613f7957505050565b60006001613f8883602061546c565b613f9490610100615a00565b613f9e919061546c565b935183518516941916939093179091525050565b6000806000613fc185856141c8565b91509150613f158161420d565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa15801561401f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061404391906150d7565b61404d9190615838565b6040516001600160a01b038516602482015260448101829052909150611d8e90859063095ea7b360e01b906064016117f9565b6060824710156140f85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016106ac565b6001600160a01b0385163b61414f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106ac565b600080866001600160a01b0316858760405161416b9190615689565b60006040518083038185875af1925050503d80600081146141a8576040519150601f19603f3d011682016040523d82523d6000602084013e6141ad565b606091505b50915091506141bd8282866143c3565b979650505050505050565b60008082516041036141fe5760208301516040840151606085015160001a6141f2878285856143fc565b94509450505050614206565b506000905060025b9250929050565b600081600481111561422157614221614f1e565b036142295750565b600181600481111561423d5761423d614f1e565b0361428a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106ac565b600281600481111561429e5761429e614f1e565b036142eb5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106ac565b60038160048111156142ff576142ff614f1e565b036143575760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016106ac565b600481600481111561436b5761436b614f1e565b036107f85760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016106ac565b606083156143d2575081611a1d565b8251156143e25782518084602001fd5b8160405162461bcd60e51b81526004016106ac91906157f3565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561443357506000905060036144e0565b8460ff16601b1415801561444b57508460ff16601c14155b1561445c57506000905060046144e0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156144b0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166144d9576000600192509250506144e0565b9150600090505b94509492505050565b6101da80615a0d83390190565b604080516101408101909152600061010082019081526060610120830152819081526020016145506040518060800160405280600067ffffffffffffffff1681526020016060815260200160608152602001600081525090565b815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03811681146107f857600080fd5b80356145b281614592565b919050565b6000602082840312156145c957600080fd5b8135611a1d81614592565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561460d5761460d6145d4565b60405290565b6040516080810167ffffffffffffffff8111828210171561460d5761460d6145d4565b604051610100810167ffffffffffffffff8111828210171561460d5761460d6145d4565b6040516060810167ffffffffffffffff8111828210171561460d5761460d6145d4565b604051601f8201601f1916810167ffffffffffffffff811182821017156146a6576146a66145d4565b604052919050565b600067ffffffffffffffff8211156146c8576146c86145d4565b5060051b60200190565b67ffffffffffffffff811681146107f857600080fd5b600082601f8301126146f957600080fd5b8135602061470e614709836146ae565b61467d565b82815260059290921b8401810191818101908684111561472d57600080fd5b8286015b8481101561475157803561474481614592565b8352918301918301614731565b509695505050505050565b6000806040838503121561476f57600080fd5b823567ffffffffffffffff8082111561478757600080fd5b818501915085601f83011261479b57600080fd5b813560206147ab614709836146ae565b82815260059290921b840181019181810190898411156147ca57600080fd5b948201945b838610156147f15785356147e2816146d2565b825294820194908201906147cf565b9650508601359250508082111561480757600080fd5b50614814858286016146e8565b9150509250929050565b6000806000806060858703121561483457600080fd5b843561483f81614592565b935060208501359250604085013567ffffffffffffffff8082111561486357600080fd5b818701915087601f83011261487757600080fd5b81358181111561488657600080fd5b88602082850101111561489857600080fd5b95989497505060200194505050565b600067ffffffffffffffff8211156148c1576148c16145d4565b50601f01601f191660200190565b600082601f8301126148e057600080fd5b81356148ee614709826148a7565b81815284602083860101111561490357600080fd5b816020850160208301376000918101602001919091529392505050565b60006040828403121561493257600080fd5b61493a6145ea565b9050813561494781614592565b8152602082013567ffffffffffffffff81111561496357600080fd5b61496f848285016148cf565b60208301525092915050565b60006080828403121561498d57600080fd5b614995614613565b905081356149a2816146d2565b8152602082013567ffffffffffffffff808211156149bf57600080fd5b6149cb858386016148cf565b602084015260408401359150808211156149e457600080fd5b506149f1848285016148cf565b6040830152506060820135606082015292915050565b80151581146107f857600080fd5b80356145b281614a07565b600060c08284031215614a3257600080fd5b60405160c0810167ffffffffffffffff8282108183111715614a5657614a566145d4565b8160405282935084359150614a6a826146d2565b908252602084013590614a7c826146d2565b8160208401526040850135915080821115614a9657600080fd5b50614aa3858286016148cf565b604083015250606083013560608201526080830135614ac181614592565b6080820152614ad260a08401614a15565b60a08201525092915050565b600060408284031215614af057600080fd5b614af86145ea565b90508135614b0581614592565b81526020820135614b1581614a07565b602082015292915050565b600080600060808486031215614b3557600080fd5b833567ffffffffffffffff80821115614b4d57600080fd5b818601915086601f830112614b6157600080fd5b81356020614b71614709836146ae565b82815260059290921b8401810191818101908a841115614b9057600080fd5b8286015b84811015614c7057803586811115614bab57600080fd5b8701610100818e03601f19011215614bc257600080fd5b614bca614636565b8582013588811115614bdb57600080fd5b614be98f8883860101614920565b825250604082013588811115614bfe57600080fd5b614c0c8f888386010161497b565b8783015250614c1d606083016145a7565b6040820152614c2e608083016145a7565b606082015260a0820135608082015260c082013560a082015260e082013560c082015261010082013560e0820152808552505083830192508381019050614b94565b5097505087013592505080821115614c8757600080fd5b50614c9486828701614a20565b925050614ca48560408601614ade565b90509250925092565b600060208284031215614cbf57600080fd5b8135611a1d816146d2565b600082601f830112614cdb57600080fd5b81356020614ceb614709836146ae565b82815260059290921b84018101918181019086841115614d0a57600080fd5b8286015b8481101561475157803567ffffffffffffffff811115614d2e5760008081fd5b614d3c8986838b01016148cf565b845250918301918301614d0e565b600080600060608486031215614d5f57600080fd5b833567ffffffffffffffff80821115614d7757600080fd5b614d83878388016146e8565b94506020860135915080821115614d9957600080fd5b614da587838801614cca565b93506040860135915080821115614dbb57600080fd5b50614dc8868287016146e8565b9150509250925092565b60008060008060808587031215614de857600080fd5b8435614df381614592565b93506020850135614e0381614592565b92506040850135614e13816146d2565b91506060850135614e2381614592565b939692955090935050565b60008060408385031215614e4157600080fd5b8235614e4c81614592565b91506020830135614e5c81614592565b809150509250929050565b60008060408385031215614e7a57600080fd5b823567ffffffffffffffff80821115614e9257600080fd5b614e9e86838701614cca565b9350602085013591508082111561480757600080fd5b60008060008060808587031215614eca57600080fd5b8435614ed581614592565b93506020850135614ee5816146d2565b9250604085013567ffffffffffffffff811115614f0157600080fd5b614f0d878288016148cf565b9250506060850135614e2381614592565b634e487b7160e01b600052602160045260246000fd5b6020810160038310614f5657634e487b7160e01b600052602160045260246000fd5b91905290565b60008060408385031215614f6f57600080fd5b8235614f7a81614592565b915060208301356001600160e01b031981168114614e5c57600080fd5b6000806000806000806000806000806101408b8d031215614fb757600080fd5b614fc08b614a15565b9950614fce60208c016145a7565b9850614fdc60408c016145a7565b9750614fea60608c016145a7565b9650614ff860808c016145a7565b955060a08b013567ffffffffffffffff8082111561501557600080fd5b6150218e838f016146e8565b965060c08d013591508082111561503757600080fd5b6150438e838f01614cca565b955060e08d013591508082111561505957600080fd5b6150658e838f016146e8565b94506101008d013591508082111561507c57600080fd5b6150888e838f01614cca565b93506101208d013591508082111561509f57600080fd5b506150ac8d828e016146e8565b9150509295989b9194979a5092959850565b6000602082840312156150d057600080fd5b5035919050565b6000602082840312156150e957600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b80516145b281614592565b60005b8381101561512c578181015183820152602001615114565b83811115611d8e5750506000910152565b600061514b614709846148a7565b905082815283838301111561515f57600080fd5b611a1d836020830184615111565b600082601f83011261517e57600080fd5b611a1d8383516020850161513d565b60006040828403121561519f57600080fd5b6151a76145ea565b905081516151b481614592565b8152602082015167ffffffffffffffff8111156151d057600080fd5b61496f8482850161516d565b6000608082840312156151ee57600080fd5b6151f6614613565b90508151615203816146d2565b8152602082015167ffffffffffffffff8082111561522057600080fd5b818401915084601f83011261523457600080fd5b6152438583516020850161513d565b6020840152604084015191508082111561525c57600080fd5b506152698482850161516d565b6040830152506060820151606082015292915050565b60006040828403121561529157600080fd5b6152996145ea565b905081516152a681614592565b81526020820151614b1581614a07565b600060208083850312156152c957600080fd5b825167ffffffffffffffff808211156152e157600080fd5b90840190608082870312156152f557600080fd5b6152fd61465a565b82518152838301518281111561531257600080fd5b8301601f8101881361532357600080fd5b8051615331614709826146ae565b81815260059190911b8201860190868101908a83111561535057600080fd5b8784015b838110156154305780518781111561536b57600080fd5b8501610100818e03601f1901121561538257600080fd5b61538a614636565b8a8201518981111561539b57600080fd5b6153a98f8d8386010161518d565b8252506040820151898111156153be57600080fd5b6153cc8f8d838601016151dc565b8c830152506153dd60608301615106565b60408201526153ee60808301615106565b606082015260a0820151608082015260c082015160a082015260e082015160c082015261010082015160e0820152808552505088830192508881019050615354565b50808886015250505050615447876040850161527f565b60408201529695505050505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561547e5761547e615456565b500390565b60006001820161549557615495615456565b5060010190565b600081518084526020808501945080840160005b838110156154d55781516001600160a01b0316875295820195908201906001016154b0565b509495945050505050565b604080825283519082018190526000906020906060840190828701845b8281101561552357815167ffffffffffffffff16845292840192908401906001016154fd565b50505083810382850152615537818661549c565b9695505050505050565b805160208201516001600160e01b031980821692919060048310156155705780818460040360031b1b83161693505b505050919050565b60008151808452615590816020860160208601615111565b601f01601f19169290920160200192915050565b6001600160a01b0381511682526000602082015160406020850152613f2c6040850182615578565b602081526000611a1d60208301846155a4565b6000806000606084860312156155f457600080fd5b83519250602084015161560681614592565b604085015190925061561781614592565b809150509250925092565b6060815260006156356060830186615578565b90508360208301526001600160a01b0383166040830152949350505050565b60006020828403121561566657600080fd5b815167ffffffffffffffff81111561567d57600080fd5b613f2c8482850161516d565b6000825161569b818460208701615111565b9190910192915050565b6000602080835260a08084018551838601528286015160806040818189015283835180865260c09550858a019150858160051b8b0101888601955060005b828110156157c25760bf198c83030184528651610100815181855261570a828601826155a4565b9150508b8201518482038d86015267ffffffffffffffff81511682528c810151898e84015261573b8a840182615578565b9050888201518382038a8501526157528282615578565b915050606080830151818501528985015193506157798a8801856001600160a01b03169052565b808501516001600160a01b031690870152898401518a8701528c8401518d8701528b8401518c87015260e0938401519390950192909252505095890195928901926001016156e3565b5092909a015180516001600160a01b031660608b015260200151151560809099019890985298975050505050505050565b602081526000611a1d6020830184615578565b6001600160a01b038416815267ffffffffffffffff831660208201526060604082015260006125216060830184615578565b6000821982111561584b5761584b615456565b500190565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b838110156158a757605f19888703018552615895868351615578565b95509382019390820190600101615879565b505085840381870152505050612521818561549c565b6000602082840312156158cf57600080fd5b8151611a1d81614a07565b67ffffffffffffffff8616815260006001600160a01b03808716602084015285604084015280851660608401525060a060808301526141bd60a0830184615578565b600181815b8085111561595757816000190482111561593d5761593d615456565b8085161561594a57918102915b93841c9390800290615921565b509250929050565b60008261596e575060016138e6565b8161597b575060006138e6565b8160018114615991576002811461599b576159b7565b60019150506138e6565b60ff8411156159ac576159ac615456565b50506001821b6138e6565b5060208310610133831016604e8410600b84101617156159da575081810a6138e6565b6159e4838361591c565b80600019048211156159f8576159f8615456565b029392505050565b6000611a1d838361595f56fe608060405234801561001057600080fd5b506101ba806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063aad3ec9614610030575b600080fd5b61004361003e366004610104565b610045565b005b604080513360248201819052604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052915173ffffffffffffffffffffffffffffffffffffffff8516916100bc91610149565b6000604051808303816000865af19150503d80600081146100f9576040519150601f19603f3d011682016040523d82523d6000602084013e6100fe565b606091505b50505080ff5b6000806040838503121561011757600080fd5b823573ffffffffffffffffffffffffffffffffffffffff8116811461013b57600080fd5b946020939093013593505050565b6000825160005b8181101561016a5760208186018101518583015201610150565b81811115610179576000828501525b50919091019291505056fea2646970667358221220596a029e19ba353d69291cd33136a82a60ef181cd9690abbbe3fe4a98c3c68c064736f6c634300080f00334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122080e11f25b59e52050c1f2c4805063b5d086786b1951a72ea43dc6c68fbb98b0964736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106101e75760003560e01c80637228e5c4116101025780639c649fdf11610095578063cd9ea34211610064578063cd9ea342146105c2578063d3ac0fbc146105e3578063eeaaa65114610603578063f2fde38b1461063957600080fd5b80639c649fdf146105215780639e02c9f914610541578063a1a227fa14610582578063a591f97f146105a257600080fd5b806382dc1ec4116100d157806382dc1ec4146104ae5780638456cb59146104ce5780638da5cb5b146104e3578063918ead761461050157600080fd5b80637228e5c41461041e5780637a0f93561461043e5780637ae267731461045e57806380f51c121461047e57600080fd5b806346fbf68e1161017a5780635c975abb116101495780635c975abb146103b15780636b2c0f55146103c95780636c19e783146103e95780636ef8d66d1461040957600080fd5b806346fbf68e14610318578063478222c214610351578063547cad12146103715780635b5a66a71461039157600080fd5b8063289774a9116101b6578063289774a91461029a578063292e31ee146102ad5780633f4ba83a146102e3578063457bfa2f146102f857600080fd5b806306b4771c146101f35780631cfcc0fc1461021557806320be95f214610235578063238ac9331461026257600080fd5b366101ee57005b600080fd5b3480156101ff57600080fd5b5061021361020e3660046145b7565b610659565b005b34801561022157600080fd5b5061021361023036600461475c565b6107fb565b61024d61024336600461481e565b6000949350505050565b60405190151581526020015b60405180910390f35b34801561026e57600080fd5b50600454610282906001600160a01b031681565b6040516001600160a01b039091168152602001610259565b6102136102a8366004614b20565b61085c565b3480156102b957600080fd5b506102826102c8366004614cad565b600a602052600090815260409020546001600160a01b031681565b3480156102ef57600080fd5b50610213610add565b34801561030457600080fd5b50600654610282906001600160a01b031681565b34801561032457600080fd5b5061024d6103333660046145b7565b6001600160a01b031660009081526009602052604090205460ff1690565b34801561035d57600080fd5b50600554610282906001600160a01b031681565b34801561037d57600080fd5b5061021361038c3660046145b7565b610b46565b34801561039d57600080fd5b506102136103ac3660046145b7565b610bf2565b3480156103bd57600080fd5b5060085460ff1661024d565b3480156103d557600080fd5b506102136103e43660046145b7565b610c52565b3480156103f557600080fd5b506102136104043660046145b7565b610cb2565b34801561041557600080fd5b50610213610d12565b34801561042a57600080fd5b50610213610439366004614d4a565b610d1b565b34801561044a57600080fd5b50610213610459366004614dd2565b610d82565b34801561046a57600080fd5b50610213610479366004614e2e565b611084565b34801561048a57600080fd5b5061024d6104993660046145b7565b60096020526000908152604090205460ff1681565b3480156104ba57600080fd5b506102136104c93660046145b7565b6110f0565b3480156104da57600080fd5b50610213611150565b3480156104ef57600080fd5b506000546001600160a01b0316610282565b34801561050d57600080fd5b5061021361051c366004614e67565b6111b7565b61053461052f366004614eb4565b611218565b6040516102599190614f34565b34801561054d57600080fd5b5061028261055c366004614f5c565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b34801561058e57600080fd5b50600154610282906001600160a01b031681565b3480156105ae57600080fd5b506102136105bd3660046145b7565b6114f7565b3480156105ce57600080fd5b5060005461024d90600160b01b900460ff1681565b3480156105ef57600080fd5b506102136105fe366004614f97565b611557565b34801561060f57600080fd5b5061028261061e3660046150be565b6003602052600090815260409020546001600160a01b031681565b34801561064557600080fd5b506102136106543660046145b7565b6116f1565b3361066c6000546001600160a01b031690565b6001600160a01b0316146106b55760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064015b60405180910390fd5b6001600160a01b03811661076a57600080546040516001600160a01b039091169047908381818185875af1925050503d8060008114610710576040519150601f19603f3d011682016040523d82523d6000602084013e610715565b606091505b50509050806107665760405162461bcd60e51b815260206004820152601260248201527f73656e64206e6174697665206661696c6564000000000000000000000000000060448201526064016106ac565b5050565b6107f861077f6000546001600160a01b031690565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa1580156107c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e791906150d7565b6001600160a01b03841691906117cd565b50565b3361080e6000546001600160a01b031690565b6001600160a01b0316146108525760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b6107668282611845565b610864611971565b6002600754036108b65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106ac565b600260075582516108ef5760405162461bcd60e51b815260206004820152600360248201526206e6f760ec1b60448201526064016106ac565b60008260600151116109435760405162461bcd60e51b815260206004820152600860248201527f3020616d6f756e7400000000000000000000000000000000000000000000000060448201526064016106ac565b80516001600160a01b031661099a5760405162461bcd60e51b815260206004820152600a60248201527f302072656365697665720000000000000000000000000000000000000000000060448201526064016106ac565b60006109af33836000015185600001516119c4565b90506000846000815181106109c6576109c66150f0565b602002602001015190506001855111156109e4576109e48585611a24565b6000806109f086611d94565b9150915060008211610a445760405162461bcd60e51b815260206004820152600f60248201527f616d6f756e74206d757374203e2030000000000000000000000000000000000060448201526064016106ac565b825151829082906001600160a01b031615610abf578451600190610a69908686611f02565b9094509250905080610abd5760405162461bcd60e51b815260206004820152600960248201527f73776170206661696c000000000000000000000000000000000000000000000060448201526064016106ac565b505b610acc868a89848661223d565b505060016007555050505050505050565b3360009081526009602052604090205460ff16610b3c5760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f742070617573657200000000000000000000000060448201526064016106ac565b610b4461252a565b565b33610b596000546001600160a01b031690565b6001600160a01b031614610b9d5760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f3f8223bcd8b3b875473e9f9e14e1ad075451a2b5ffd31591655da9a01516bf5e906020015b60405180910390a150565b33610c056000546001600160a01b031690565b6001600160a01b031614610c495760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b6107f88161257c565b33610c656000546001600160a01b031690565b6001600160a01b031614610ca95760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b6107f8816125ca565b33610cc56000546001600160a01b031690565b6001600160a01b031614610d095760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b6107f881612683565b610b44336125ca565b33610d2e6000546001600160a01b031690565b6001600160a01b031614610d725760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b610d7d8383836126dd565b505050565b610d8a611971565b600260075403610ddc5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106ac565b6002600755336001600160a01b03841614610e395760405162461bcd60e51b815260206004820152601760248201527f6f6e6c792072656365697665722063616e20636c61696d00000000000000000060448201526064016106ac565b6000610e468585856119c4565b9050600081604051610e57906144e9565b8190604051809103906000f5905080158015610e77573d6000803e3d6000fd5b506040516370a0823160e01b81526001600160a01b0380831660048301529192506000918516906370a0823190602401602060405180830381865afa158015610ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee891906150d7565b90506001600160a01b0382163181151580610f035750600081115b610f4f5760405162461bcd60e51b815260206004820152600f60248201527f706f636b657420697320656d707479000000000000000000000000000000000060448201526064016106ac565b610f5a8386846127bc565b8115610f7457610f746001600160a01b03861688846117cd565b8015611024576000876001600160a01b03168261c35090604051600060405180830381858888f193505050503d8060008114610fcc576040519150601f19603f3d011682016040523d82523d6000602084013e610fd1565b606091505b50509050806110225760405162461bcd60e51b815260206004820152601560248201527f6661696c656420746f2073656e64206e6174697665000000000000000000000060448201526064016106ac565b505b604080516001600160a01b038981168252602082018590528716818301526060810183905290517f93792cbd2b72fa0c2850634d3177263b6f8dbe5c2245b5ad2522ef65b5a9b8d59181900360800190a150506001600755505050505050565b336110976000546001600160a01b031690565b6001600160a01b0316146110db5760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b6107666001600160a01b03831682600061295a565b336111036000546001600160a01b031690565b6001600160a01b0316146111475760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b6107f881612a76565b3360009081526009602052604090205460ff166111af5760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f742070617573657200000000000000000000000060448201526064016106ac565b610b44612b33565b336111ca6000546001600160a01b031690565b6001600160a01b03161461120e5760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b6107668282612b70565b6000611222612c83565b838561122e8282612cee565b611236611971565b6002600754036112885760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106ac565b600260075584516000906112a590870160209081019088016152b6565b90506000816020015151116112e25760405162461bcd60e51b815260206004820152600360248201526206e6f760ec1b60448201526064016106ac565b600034905060008260200151600081518110611300576113006150f0565b6020026020010151905060008061131b856000015184612d62565b915091508160000361138857845160408051918252600060208301526001600160a01b038316908201527f295612f9c20f128efb8df333990658b0f1b8083bc7b6dcf90750348cede4c299906060015b60405180910390a161137c846130b6565b975050505050506114e8565b82606001516001600160a01b0316816001600160a01b031603611402576113ba8183876040015160000151600061318b565b845160408051918252602082018490526001600160a01b038316908201527f295612f9c20f128efb8df333990658b0f1b8083bc7b6dcf90750348cede4c2999060600161136b565b825151829082906001600160a01b0316156114ab578451600190611427908686611f02565b90945092509050806114a95761144884868a6040015160000151600061318b565b875160408051918252602082018790526001600160a01b03861682820152517f295612f9c20f128efb8df333990658b0f1b8083bc7b6dcf90750348cede4c2999181900360600190a161149a876130b6565b9a5050505050505050506114e8565b505b60006114c6886000015189602001518a60400151858761223d565b90506114d2818861546c565b96506114dd876130b6565b9a5050505050505050505b50506001600755949350505050565b3361150a6000546001600160a01b031690565b6001600160a01b03161461154e5760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b6107f88161330e565b600054600160a81b900460ff161580801561157f57506000546001600160a01b90910460ff16105b806115a05750303b1580156115a05750600054600160a01b900460ff166001145b6116125760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016106ac565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b179055801561165a576000805460ff60a81b1916600160a81b1790555b611662613368565b61166c8b8b6133ca565b6116778686866134ce565b611681838361353b565b61168a876135a8565b61169388613615565b61169c89613682565b80156116e4576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b336117046000546001600160a01b031690565b6001600160a01b0316146117485760405162461bcd60e51b81526020600482018190526024820152600080516020615be783398151915260448201526064016106ac565b6001600160a01b0381166117c45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106ac565b6107f8816136ef565b6040516001600160a01b038316602482015260448101829052610d7d90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199093169290921790915261373f565b80518251146118965760405162461bcd60e51b815260206004820152601760248201527f72656d6f746573206c656e677468206d69736d6174636800000000000000000060448201526064016106ac565b60005b8251811015611933578181815181106118b4576118b46150f0565b6020026020010151600a60008584815181106118d2576118d26150f0565b602002602001015167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550808061192b90615483565b915050611899565b507fe000e6cd4a5421450046ea059588823e2c45d75255bc2ce0031a7c64d32f8c1682826040516119659291906154e0565b60405180910390a15050565b60085460ff1615610b445760405162461bcd60e51b815260206004820152601160248201527f4d53473a3a41424f52543a70617573656400000000000000000000000000000060448201526064016106ac565b6040516bffffffffffffffffffffffff19606085811b8216602084015284901b1660348201526001600160c01b031960c083901b1660488201526000906050016040516020818303038152906040528051906020012090505b9392505050565b42816020015167ffffffffffffffff1611611a815760405162461bcd60e51b815260206004820152601160248201527f646561646c696e6520657863656564656400000000000000000000000000000060448201526064016106ac565b600046826060015183608001518460200151604051602001611b0b94939291907f636861696e686f702071756f7465000000000000000000000000000000000000815260c094851b6001600160c01b0319908116600e830152601682019490945260609290921b6bffffffffffffffffffffffff1916603683015290921b16604a82015260520190565b60408051601f19818403018152919052905060015b8351811015611d2e576000848281518110611b3d57611b3d6150f0565b60200260200101519050600085600184611b57919061546c565b81518110611b6757611b676150f0565b602002602001015160200151905060006001600160a01b031682604001516001600160a01b031614158015611ba0575060008260800151115b8015611bb0575060008260c00151115b611bfc5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c69642065786563000000000000000000000000000000000000000060448201526064016106ac565b60608201516001600160a01b03161580611c29575060008260a00151118015611c29575060008260e00151115b611c755760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642066616c6c6261636b0000000000000000000000000000000060448201526064016106ac565b600081600001518360c0015184604001518560e001518660600151876020015160600151604051602001611cfa9695949392919060c09690961b6001600160c01b03191686526008860194909452606092831b6bffffffffffffffffffffffff199081166028870152603c86019290925290911b16605c830152607082015260900190565b60408051601f198184030181529190529050611d168582613824565b94505050508080611d2690615483565b915050611b20565b508051602080830191909120604080517f19457468657265756d205369676e6564204d6573736167653a0a33320000000081850152603c8082019390935281518082039093018352605c0190528051910120611d8e8184604001516138ec565b50505050565b6000808260a0015115611ec95760065460808401516001600160a01b03908116911614611e035760405162461bcd60e51b815260206004820152601660248201527f746f6b656e496e206e6f74206e6174697665577261700000000000000000000060448201526064016106ac565b8260600151341015611e575760405162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e74206e617469766520616d6f756e7400000000000060448201526064016106ac565b600660009054906101000a90046001600160a01b03166001600160a01b031663d0e30db084606001516040518263ffffffff1660e01b81526004016000604051808303818588803b158015611eab57600080fd5b505af1158015611ebf573d6000803e3d6000fd5b5050505050611ef1565b611ef13330856060015186608001516001600160a01b0316613958909392919063ffffffff16565b505060608101516080909101519091565b8251600090819081906001600160a01b0316611f2657506001915083905082612234565b60008660200151611f3690615541565b90506000611f48886000015183613990565b90506000816001600160a01b031663358f0e1c8a6040518263ffffffff1660e01b8152600401611f7891906155cc565b606060405180830381865afa158015611f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb991906155df565b95509150506001600160a01b03808216908816146120195760405162461bcd60e51b815260206004820152601260248201527f7377617020696e666f206d69736d61746368000000000000000000000000000060448201526064016106ac565b6020890151604051634c6da26960e01b81526000916001600160a01b03851691634c6da2699161204f918d903090600401615622565b600060405180830381865afa15801561206c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120949190810190615654565b8a519091506120ae906001600160a01b038416908b61295a565b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a0823190602401602060405180830381865afa1580156120f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211991906150d7565b905060008b600001516001600160a01b0316836040516121399190615689565b6000604051808303816000865af19150503d8060008114612176576040519150601f19603f3d011682016040523d82523d6000602084013e61217b565b606091505b50508c51909150612198906001600160a01b03861690600061295a565b806121af5760008098509850505050505050612234565b6040516370a0823160e01b81523060048201526000906001600160a01b038916906370a0823190602401602060405180830381865afa1580156121f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221a91906150d7565b90506001612228848361546c565b99509950505050505050505b93509350939050565b60008085600081518110612253576122536150f0565b6020026020010151905061226686613a43565b955085516000148015612286575060208101515167ffffffffffffffff16155b156122f15761229f84848760000151886020015161318b565b60408051888152602081018590526001600160a01b0386168183015290517f295612f9c20f128efb8df333990658b0f1b8083bc7b6dcf90750348cede4c2999181900360600190a16000915050612521565b84518651156124af576020808301515167ffffffffffffffff166000908152600a90915260409020546001600160a01b0316806123705760405162461bcd60e51b815260206004820152601060248201527f72656d6f7465206e6f7420666f756e640000000000000000000000000000000060448201526064016106ac565b61237a8982613b60565b9150600060405180606001604052808b81526020018a8152602001898152506040516020016123a991906156a5565b60408051601f198184030181529082905260015463299aee5160e11b83529092506000916001600160a01b0390911690635335dca2906123ed9085906004016157f3565b602060405180830381865afa15801561240a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242e91906150d7565b600154602087015151604051634f9e72ad60e11b81529293506001600160a01b0390911691639f3ce55a91849161246b9188918890600401615806565b6000604051808303818588803b15801561248457600080fd5b505af1158015612498573d6000803e3d6000fd5b505050505080866124a99190615838565b95505050505b6124bf8260200151828787613c14565b6020820151606001516124d29084615838565b604080518a8152602081018790526001600160a01b0388168183015290519194507f295612f9c20f128efb8df333990658b0f1b8083bc7b6dcf90750348cede4c299919081900360600190a150505b95945050505050565b612532613cd6565b6008805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600680546001600160a01b0319166001600160a01b0383169081179091556040519081527fb878cd71628ac64b2df1872301925e01164824535b02e8601077749eeeb88c3d90602001610be7565b6001600160a01b03811660009081526009602052604090205460ff166126325760405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f7420706175736572000000000000000000000060448201526064016106ac565b6001600160a01b038116600081815260096020908152604091829020805460ff1916905590519182527fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9101610be7565b600480546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f2d025324f0a785e8c12d0a0d91a9caa49df4ef20ff87e0df7213a1d4f3157beb9101611965565b815183511480156126ef575080518351145b61273b5760405162461bcd60e51b815260206004820152601660248201527f636f646563206c656e67746873206d69736d617463680000000000000000000060448201526064016106ac565b60005b8351811015611d8e57600083828151811061275b5761275b6150f0565b60200260200101518051906020012090506127a9858381518110612781576127816150f0565b60200260200101518285858151811061279c5761279c6150f0565b6020026020010151613d28565b50806127b481615483565b91505061273e565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015612803573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282791906150d7565b604051635569f64b60e11b81526001600160a01b038581166004830152602482018590529192509085169063aad3ec9690604401600060405180830381600087803b15801561287557600080fd5b505af1158015612889573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03861691506370a0823190602401602060405180830381865afa1580156128d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f891906150d7565b905082612905838361546c565b10156129535760405162461bcd60e51b815260206004820152601960248201527f696e73756666696369656e742066756e6420636c61696d65640000000000000060448201526064016106ac565b5050505050565b8015806129d45750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156129ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d291906150d7565b155b612a465760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016106ac565b6040516001600160a01b038316602482015260448101829052610d7d90849063095ea7b360e01b906064016117f9565b6001600160a01b03811660009081526009602052604090205460ff1615612adf5760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c7265616479207061757365720000000000000060448201526064016106ac565b6001600160a01b038116600081815260096020908152604091829020805460ff1916600117905590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89101610be7565b612b3b611971565b6008805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861255f3390565b8051825114612bc15760405162461bcd60e51b815260206004820152601460248201527f706172616d732073697a65206d69736d6174636800000000000000000000000060448201526064016106ac565b60005b8251811015612c5157818181518110612bdf57612bdf6150f0565b602002602001015160036000858481518110612bfd57612bfd6150f0565b602002602001015180519060200120815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508080612c4990615483565b915050612bc4565b507f68d2b5e14eb61b73f2dfa46a255dcba81a3b53259093a83c90da69c3ade70b968282604051611965929190615850565b600054600160b01b900460ff16610b44576001546001600160a01b03163314610b445760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d657373616765206275730000000000000060448201526064016106ac565b67ffffffffffffffff82166000908152600a60205260409020546001600160a01b038281169116146107665760405162461bcd60e51b815260206004820152600e60248201527f756e6b6e6f776e2072656d6f746500000000000000000000000000000000000060448201526064016106ac565b600080600084604051612d74906144e9565b8190604051809103906000f5905080158015612d94573d6000803e3d6000fd5b5060608501519091506000906001600160a01b031615612e215760608501516040516370a0823160e01b81526001600160a01b038481166004830152909116906370a0823190602401602060405180830381865afa158015612dfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1e91906150d7565b90505b60408086015190516370a0823160e01b81526001600160a01b03848116600483015260009216906370a0823190602401602060405180830381865afa158015612e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9291906150d7565b60a08701519091506001600160a01b0384163190831115612edd57612ebc848860600151856127bc565b612ecf838860e001518960600151613e1a565b9550866060015194506130ab565b8660800151821115612f1957612ef8848860400151846127bc565b612f0b828860c001518960400151613e1a565b9550866040015194506130ab565b866080015181111561306357604051635569f64b60e11b815260006004820181905260248201526001600160a01b0385169063aad3ec9690604401600060405180830381600087803b158015612f6e57600080fd5b505af1158015612f82573d6000803e3d6000fd5b505060065460408a01516001600160a01b039081169116149150612fea90505760405162461bcd60e51b815260206004820152601d60248201527f6272696467654f7574546f6b656e206e6f74206e61746976655772617000000060448201526064016106ac565b612ffd818860c001518960400151613e1a565b955086604001516001600160a01b031663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b15801561303e57600080fd5b505af1158015613052573d6000803e3d6000fd5b5050505050866040015194506130ab565b60405162461bcd60e51b815260206004820152601a60248201527f4d53473a3a41424f52543a706f636b657420697320656d70747900000000000060448201526064016106ac565b505050509250929050565b6000811561318357604051600090329061c35090859084818181858888f193505050503d8060008114613105576040519150601f19603f3d011682016040523d82523d6000602084013e61310a565b606091505b50509050806131815760405162461bcd60e51b815260206004820152602760248201527f6661696c656420746f20726566756e642072656d61696e696e67206e6174697660448201527f6520746f6b656e0000000000000000000000000000000000000000000000000060648201526084016106ac565b505b506001919050565b80156132fa576006546001600160a01b038581169116146131ee5760405162461bcd60e51b815260206004820152601760248201527f746f6b656e206973206e6f74206e61746976655772617000000000000000000060448201526064016106ac565b600654604051632e1a7d4d60e01b8152600481018590526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561323457600080fd5b505af1158015613248573d6000803e3d6000fd5b505050506000826001600160a01b03168461c35090604051600060405180830381858888f193505050503d806000811461329e576040519150601f19603f3d011682016040523d82523d6000602084013e6132a3565b606091505b50509050806132f45760405162461bcd60e51b815260206004820152600960248201527f73656e64206661696c000000000000000000000000000000000000000000000060448201526064016106ac565b50611d8e565b611d8e6001600160a01b03851683856117cd565b600580546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f47ffc4777a9849fd88ac272225845f7bbcfa9920f222b459c2e6b28156ce72499101611965565b6000546001600160a01b0316156133c15760405162461bcd60e51b815260206004820152601160248201527f6f776e657220616c72656164792073657400000000000000000000000000000060448201526064016106ac565b610b44336136ef565b600054600160a81b900460ff166134375760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ac565b811580613445575046617a69145b61344e57600080fd5b600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16600160b01b84151502179055600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f3f8223bcd8b3b875473e9f9e14e1ad075451a2b5ffd31591655da9a01516bf5e90602001611965565b600054600160a81b900460ff16610d725760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ac565b600054600160a81b900460ff1661120e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ac565b600054600160a81b900460ff1661154e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ac565b600054600160a81b900460ff16610d095760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ac565b600054600160a81b900460ff16610c495760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106ac565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000613794826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613f1d9092919063ffffffff16565b805190915015610d7d57808060200190518101906137b291906158bd565b610d7d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106ac565b60606000825184516138369190615838565b67ffffffffffffffff81111561384e5761384e6145d4565b6040519080825280601f01601f191660200182016040528015613878576020820181803683370190505b50905060008061388c868051602090910191565b915091506000806138a1878051602090910191565b9150915060006138b5868051602090910191565b50905060006138c48583615838565b90506138d1868387613f34565b6138dc848285613f34565b5094955050505050505b92915050565b60006138f88383613fb2565b6004549091506001600160a01b03808316911614610d7d5760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964207369676e657200000000000000000000000000000000000060448201526064016106ac565b6040516001600160a01b0380851660248301528316604482015260648101829052611d8e9085906323b872dd60e01b906084016117f9565b6001600160a01b0382811660009081526002602090815260408083206001600160e01b031986168452909152812054909116613a0e5760405162461bcd60e51b815260206004820152600f60248201527f756e737570706f7274656420646578000000000000000000000000000000000060448201526064016106ac565b506001600160a01b0391821660009081526002602090815260408083206001600160e01b031994909416835292905220541690565b60606000825111613a965760405162461bcd60e51b815260206004820152600b60248201527f656d70747920657865637300000000000000000000000000000000000000000060448201526064016106ac565b60018251613aa4919061546c565b67ffffffffffffffff811115613abc57613abc6145d4565b604051908082528060200260200182016040528015613af557816020015b613ae26144f6565b815260200190600190039081613ada5790505b50905060015b8251811015613b5a57828181518110613b1657613b166150f0565b602002602001015182600183613b2c919061546c565b81518110613b3c57613b3c6150f0565b60200260200101819052508080613b5290615483565b915050613afb565b50919050565b60008060ff60f81b838560405180602001613b7a906144e9565b6020820181038252601f19601f8201166040525080519060200120604051602001613bf494939291907fff0000000000000000000000000000000000000000000000000000000000000094909416845260609290921b6bffffffffffffffffffffffff191660018401526015830152603582015260550190565b60408051808303601f190181529190528051602090910120949350505050565b6020808501518051908201206000908152600390915260409020546001600160a01b0390811690613c489084168284613fce565b6060850151855160408088015190516324c9401b60e01b81526001600160a01b038516936324c9401b939092613c87928a9189918b91906004016158da565b60006040518083038185885af1158015613ca5573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052613cce9190810190615654565b505050505050565b60085460ff16610b445760405162461bcd60e51b815260206004820152601560248201527f4d53473a3a41424f52543a6e6f7420706175736564000000000000000000000060448201526064016106ac565b6001600160a01b0380841660009081526002602090815260408083206001600160e01b03198716845290915290205481169082168103613d905760405162461bcd60e51b815260206004820152600360248201526206e6f760ec1b60448201526064016106ac565b6001600160a01b0384811660008181526002602090815260408083206001600160e01b031989168085529083529281902080546001600160a01b03191695881695861790558051938452908301919091528101919091527f454003ca28aca3b395ad1720eedfe6ee23b22ae10af0a8bb39c206ca1ca5679b9060600160405180910390a150505050565b60008083851115613e3957613e2f848661546c565b9150839050613e3c565b50835b6006546001600160a01b0390811690841603613efb576005546040516000916001600160a01b03169083908381818185875af1925050503d8060008114613e9f576040519150601f19603f3d011682016040523d82523d6000602084013e613ea4565b606091505b5050905080613ef55760405162461bcd60e51b815260206004820152601260248201527f73656e64206e6174697665206661696c6564000000000000000000000000000060448201526064016106ac565b50613f15565b600554613f15906001600160a01b038581169116836117cd565b509392505050565b6060613f2c8484600085614080565b949350505050565b60208110613f6c5782518252613f4b602083615838565b9150613f58602084615838565b9250613f6560208261546c565b9050613f34565b80600003613f7957505050565b60006001613f8883602061546c565b613f9490610100615a00565b613f9e919061546c565b935183518516941916939093179091525050565b6000806000613fc185856141c8565b91509150613f158161420d565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa15801561401f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061404391906150d7565b61404d9190615838565b6040516001600160a01b038516602482015260448101829052909150611d8e90859063095ea7b360e01b906064016117f9565b6060824710156140f85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016106ac565b6001600160a01b0385163b61414f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106ac565b600080866001600160a01b0316858760405161416b9190615689565b60006040518083038185875af1925050503d80600081146141a8576040519150601f19603f3d011682016040523d82523d6000602084013e6141ad565b606091505b50915091506141bd8282866143c3565b979650505050505050565b60008082516041036141fe5760208301516040840151606085015160001a6141f2878285856143fc565b94509450505050614206565b506000905060025b9250929050565b600081600481111561422157614221614f1e565b036142295750565b600181600481111561423d5761423d614f1e565b0361428a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106ac565b600281600481111561429e5761429e614f1e565b036142eb5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106ac565b60038160048111156142ff576142ff614f1e565b036143575760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016106ac565b600481600481111561436b5761436b614f1e565b036107f85760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016106ac565b606083156143d2575081611a1d565b8251156143e25782518084602001fd5b8160405162461bcd60e51b81526004016106ac91906157f3565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561443357506000905060036144e0565b8460ff16601b1415801561444b57508460ff16601c14155b1561445c57506000905060046144e0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156144b0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166144d9576000600192509250506144e0565b9150600090505b94509492505050565b6101da80615a0d83390190565b604080516101408101909152600061010082019081526060610120830152819081526020016145506040518060800160405280600067ffffffffffffffff1681526020016060815260200160608152602001600081525090565b815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03811681146107f857600080fd5b80356145b281614592565b919050565b6000602082840312156145c957600080fd5b8135611a1d81614592565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561460d5761460d6145d4565b60405290565b6040516080810167ffffffffffffffff8111828210171561460d5761460d6145d4565b604051610100810167ffffffffffffffff8111828210171561460d5761460d6145d4565b6040516060810167ffffffffffffffff8111828210171561460d5761460d6145d4565b604051601f8201601f1916810167ffffffffffffffff811182821017156146a6576146a66145d4565b604052919050565b600067ffffffffffffffff8211156146c8576146c86145d4565b5060051b60200190565b67ffffffffffffffff811681146107f857600080fd5b600082601f8301126146f957600080fd5b8135602061470e614709836146ae565b61467d565b82815260059290921b8401810191818101908684111561472d57600080fd5b8286015b8481101561475157803561474481614592565b8352918301918301614731565b509695505050505050565b6000806040838503121561476f57600080fd5b823567ffffffffffffffff8082111561478757600080fd5b818501915085601f83011261479b57600080fd5b813560206147ab614709836146ae565b82815260059290921b840181019181810190898411156147ca57600080fd5b948201945b838610156147f15785356147e2816146d2565b825294820194908201906147cf565b9650508601359250508082111561480757600080fd5b50614814858286016146e8565b9150509250929050565b6000806000806060858703121561483457600080fd5b843561483f81614592565b935060208501359250604085013567ffffffffffffffff8082111561486357600080fd5b818701915087601f83011261487757600080fd5b81358181111561488657600080fd5b88602082850101111561489857600080fd5b95989497505060200194505050565b600067ffffffffffffffff8211156148c1576148c16145d4565b50601f01601f191660200190565b600082601f8301126148e057600080fd5b81356148ee614709826148a7565b81815284602083860101111561490357600080fd5b816020850160208301376000918101602001919091529392505050565b60006040828403121561493257600080fd5b61493a6145ea565b9050813561494781614592565b8152602082013567ffffffffffffffff81111561496357600080fd5b61496f848285016148cf565b60208301525092915050565b60006080828403121561498d57600080fd5b614995614613565b905081356149a2816146d2565b8152602082013567ffffffffffffffff808211156149bf57600080fd5b6149cb858386016148cf565b602084015260408401359150808211156149e457600080fd5b506149f1848285016148cf565b6040830152506060820135606082015292915050565b80151581146107f857600080fd5b80356145b281614a07565b600060c08284031215614a3257600080fd5b60405160c0810167ffffffffffffffff8282108183111715614a5657614a566145d4565b8160405282935084359150614a6a826146d2565b908252602084013590614a7c826146d2565b8160208401526040850135915080821115614a9657600080fd5b50614aa3858286016148cf565b604083015250606083013560608201526080830135614ac181614592565b6080820152614ad260a08401614a15565b60a08201525092915050565b600060408284031215614af057600080fd5b614af86145ea565b90508135614b0581614592565b81526020820135614b1581614a07565b602082015292915050565b600080600060808486031215614b3557600080fd5b833567ffffffffffffffff80821115614b4d57600080fd5b818601915086601f830112614b6157600080fd5b81356020614b71614709836146ae565b82815260059290921b8401810191818101908a841115614b9057600080fd5b8286015b84811015614c7057803586811115614bab57600080fd5b8701610100818e03601f19011215614bc257600080fd5b614bca614636565b8582013588811115614bdb57600080fd5b614be98f8883860101614920565b825250604082013588811115614bfe57600080fd5b614c0c8f888386010161497b565b8783015250614c1d606083016145a7565b6040820152614c2e608083016145a7565b606082015260a0820135608082015260c082013560a082015260e082013560c082015261010082013560e0820152808552505083830192508381019050614b94565b5097505087013592505080821115614c8757600080fd5b50614c9486828701614a20565b925050614ca48560408601614ade565b90509250925092565b600060208284031215614cbf57600080fd5b8135611a1d816146d2565b600082601f830112614cdb57600080fd5b81356020614ceb614709836146ae565b82815260059290921b84018101918181019086841115614d0a57600080fd5b8286015b8481101561475157803567ffffffffffffffff811115614d2e5760008081fd5b614d3c8986838b01016148cf565b845250918301918301614d0e565b600080600060608486031215614d5f57600080fd5b833567ffffffffffffffff80821115614d7757600080fd5b614d83878388016146e8565b94506020860135915080821115614d9957600080fd5b614da587838801614cca565b93506040860135915080821115614dbb57600080fd5b50614dc8868287016146e8565b9150509250925092565b60008060008060808587031215614de857600080fd5b8435614df381614592565b93506020850135614e0381614592565b92506040850135614e13816146d2565b91506060850135614e2381614592565b939692955090935050565b60008060408385031215614e4157600080fd5b8235614e4c81614592565b91506020830135614e5c81614592565b809150509250929050565b60008060408385031215614e7a57600080fd5b823567ffffffffffffffff80821115614e9257600080fd5b614e9e86838701614cca565b9350602085013591508082111561480757600080fd5b60008060008060808587031215614eca57600080fd5b8435614ed581614592565b93506020850135614ee5816146d2565b9250604085013567ffffffffffffffff811115614f0157600080fd5b614f0d878288016148cf565b9250506060850135614e2381614592565b634e487b7160e01b600052602160045260246000fd5b6020810160038310614f5657634e487b7160e01b600052602160045260246000fd5b91905290565b60008060408385031215614f6f57600080fd5b8235614f7a81614592565b915060208301356001600160e01b031981168114614e5c57600080fd5b6000806000806000806000806000806101408b8d031215614fb757600080fd5b614fc08b614a15565b9950614fce60208c016145a7565b9850614fdc60408c016145a7565b9750614fea60608c016145a7565b9650614ff860808c016145a7565b955060a08b013567ffffffffffffffff8082111561501557600080fd5b6150218e838f016146e8565b965060c08d013591508082111561503757600080fd5b6150438e838f01614cca565b955060e08d013591508082111561505957600080fd5b6150658e838f016146e8565b94506101008d013591508082111561507c57600080fd5b6150888e838f01614cca565b93506101208d013591508082111561509f57600080fd5b506150ac8d828e016146e8565b9150509295989b9194979a5092959850565b6000602082840312156150d057600080fd5b5035919050565b6000602082840312156150e957600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b80516145b281614592565b60005b8381101561512c578181015183820152602001615114565b83811115611d8e5750506000910152565b600061514b614709846148a7565b905082815283838301111561515f57600080fd5b611a1d836020830184615111565b600082601f83011261517e57600080fd5b611a1d8383516020850161513d565b60006040828403121561519f57600080fd5b6151a76145ea565b905081516151b481614592565b8152602082015167ffffffffffffffff8111156151d057600080fd5b61496f8482850161516d565b6000608082840312156151ee57600080fd5b6151f6614613565b90508151615203816146d2565b8152602082015167ffffffffffffffff8082111561522057600080fd5b818401915084601f83011261523457600080fd5b6152438583516020850161513d565b6020840152604084015191508082111561525c57600080fd5b506152698482850161516d565b6040830152506060820151606082015292915050565b60006040828403121561529157600080fd5b6152996145ea565b905081516152a681614592565b81526020820151614b1581614a07565b600060208083850312156152c957600080fd5b825167ffffffffffffffff808211156152e157600080fd5b90840190608082870312156152f557600080fd5b6152fd61465a565b82518152838301518281111561531257600080fd5b8301601f8101881361532357600080fd5b8051615331614709826146ae565b81815260059190911b8201860190868101908a83111561535057600080fd5b8784015b838110156154305780518781111561536b57600080fd5b8501610100818e03601f1901121561538257600080fd5b61538a614636565b8a8201518981111561539b57600080fd5b6153a98f8d8386010161518d565b8252506040820151898111156153be57600080fd5b6153cc8f8d838601016151dc565b8c830152506153dd60608301615106565b60408201526153ee60808301615106565b606082015260a0820151608082015260c082015160a082015260e082015160c082015261010082015160e0820152808552505088830192508881019050615354565b50808886015250505050615447876040850161527f565b60408201529695505050505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561547e5761547e615456565b500390565b60006001820161549557615495615456565b5060010190565b600081518084526020808501945080840160005b838110156154d55781516001600160a01b0316875295820195908201906001016154b0565b509495945050505050565b604080825283519082018190526000906020906060840190828701845b8281101561552357815167ffffffffffffffff16845292840192908401906001016154fd565b50505083810382850152615537818661549c565b9695505050505050565b805160208201516001600160e01b031980821692919060048310156155705780818460040360031b1b83161693505b505050919050565b60008151808452615590816020860160208601615111565b601f01601f19169290920160200192915050565b6001600160a01b0381511682526000602082015160406020850152613f2c6040850182615578565b602081526000611a1d60208301846155a4565b6000806000606084860312156155f457600080fd5b83519250602084015161560681614592565b604085015190925061561781614592565b809150509250925092565b6060815260006156356060830186615578565b90508360208301526001600160a01b0383166040830152949350505050565b60006020828403121561566657600080fd5b815167ffffffffffffffff81111561567d57600080fd5b613f2c8482850161516d565b6000825161569b818460208701615111565b9190910192915050565b6000602080835260a08084018551838601528286015160806040818189015283835180865260c09550858a019150858160051b8b0101888601955060005b828110156157c25760bf198c83030184528651610100815181855261570a828601826155a4565b9150508b8201518482038d86015267ffffffffffffffff81511682528c810151898e84015261573b8a840182615578565b9050888201518382038a8501526157528282615578565b915050606080830151818501528985015193506157798a8801856001600160a01b03169052565b808501516001600160a01b031690870152898401518a8701528c8401518d8701528b8401518c87015260e0938401519390950192909252505095890195928901926001016156e3565b5092909a015180516001600160a01b031660608b015260200151151560809099019890985298975050505050505050565b602081526000611a1d6020830184615578565b6001600160a01b038416815267ffffffffffffffff831660208201526060604082015260006125216060830184615578565b6000821982111561584b5761584b615456565b500190565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b838110156158a757605f19888703018552615895868351615578565b95509382019390820190600101615879565b505085840381870152505050612521818561549c565b6000602082840312156158cf57600080fd5b8151611a1d81614a07565b67ffffffffffffffff8616815260006001600160a01b03808716602084015285604084015280851660608401525060a060808301526141bd60a0830184615578565b600181815b8085111561595757816000190482111561593d5761593d615456565b8085161561594a57918102915b93841c9390800290615921565b509250929050565b60008261596e575060016138e6565b8161597b575060006138e6565b8160018114615991576002811461599b576159b7565b60019150506138e6565b60ff8411156159ac576159ac615456565b50506001821b6138e6565b5060208310610133831016604e8410600b84101617156159da575081810a6138e6565b6159e4838361591c565b80600019048211156159f8576159f8615456565b029392505050565b6000611a1d838361595f56fe608060405234801561001057600080fd5b506101ba806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063aad3ec9614610030575b600080fd5b61004361003e366004610104565b610045565b005b604080513360248201819052604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052915173ffffffffffffffffffffffffffffffffffffffff8516916100bc91610149565b6000604051808303816000865af19150503d80600081146100f9576040519150601f19603f3d011682016040523d82523d6000602084013e6100fe565b606091505b50505080ff5b6000806040838503121561011757600080fd5b823573ffffffffffffffffffffffffffffffffffffffff8116811461013b57600080fd5b946020939093013593505050565b6000825160005b8181101561016a5760208186018101518583015201610150565b81811115610179576000828501525b50919091019291505056fea2646970667358221220596a029e19ba353d69291cd33136a82a60ef181cd9690abbbe3fe4a98c3c68c064736f6c634300080f00334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122080e11f25b59e52050c1f2c4805063b5d086786b1951a72ea43dc6c68fbb98b0964736f6c634300080f0033",
  "devdoc": {
    "author": "Chainhop Dex TeamPadoriku",
    "kind": "dev",
    "methods": {
      "executeMessage(address,uint64,bytes,address)": {
        "params": {
          "_message": "the message that contains the remaining swap-bridge combos to be executed"
        },
        "returns": {
          "_0": "executionStatus always success if no reverts to let the MessageBus know that the message is processed"
        }
      },
      "executeMessageWithTransferRefund(address,uint256,bytes)": {
        "params": {
          "_amount": "The amount of the original transfer",
          "_message": "The same message associated with the original transfer",
          "_token": "The token address of the original transfer"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "resecueFund(address)": {
        "details": "since bridged funds are sent to the pocket contract, and fees are sent to the fee vault, normally there should be no residue funds in this contract. but in case someone mistakenly send tokens directly to this contract, this function can be used to access these funds.",
        "params": {
          "_token": "the token to extract, use address(0) for native token"
        }
      },
      "revokeAllowance(address,address)": {
        "details": "normally, all allowances are revoked from a dex after swapping. this function exists mainly to handle a historical issue where allowance is stuck at a non-zero value at a dex",
        "params": {
          "_spender": "for which spender to revoke allowance",
          "_token": "for which token to revoke allowance"
        }
      },
      "srcExecute(((address,bytes),(uint64,string,bytes,uint256),address,address,uint256,uint256,uint256,uint256)[],(uint64,uint64,bytes,uint256,address,bool),(address,bool))": {
        "params": {
          "_dst": "the receiving info of the entire operation",
          "_execs": "contains info that tells this contract how to collect a part of the bridge token received as fee and how to swap can be omitted on the source chain if there is no swaps to execute",
          "_src": "info that is processed on the source chain. only required on the source chain and should not be populated on subsequent hops"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "a route execution contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "StepExecuted(bytes32,uint256,address)": {
        "notice": "Emitted when operations on dst chain is done."
      }
    },
    "kind": "user",
    "methods": {
      "executeMessage(address,uint64,bytes,address)": {
        "notice": "called by cBridge MessageBus. processes the execution info and carry on the executions"
      },
      "executeMessageWithTransferRefund(address,uint256,bytes)": {
        "notice": "Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract"
      },
      "resecueFund(address)": {
        "notice": "allows the owner to extract stuck funds from this contract and sent to _receiver"
      },
      "revokeAllowance(address,address)": {
        "notice": "sets allowance to 0 for a token and spender"
      },
      "srcExecute(((address,bytes),(uint64,string,bytes,uint256),address,address,uint256,uint256,uint256,uint256)[],(uint64,uint64,bytes,uint256,address,bool),(address,bool))": {
        "notice": "executes a swap-bridge combo and relays the next swap-bridge combo to the next chain (if any)"
      }
    },
    "notice": "a few key concepts about how the chain of execution works: - a \"swap-bridge execution combo\" (Types.ExecutionInfo) is a node in the execution chain - a node be swap-only, bridge-only, or swap-bridge - a message is an edge in the execution chain, it carries the remaining swap-bridge combos to the next node - execute() executes a swap-bridge combo and determines if the current node is the final one by looking at Types.DestinationInfo - executeMessage() is called on the intermediate nodes by chainhop's executor. it simply calls execute() to advance the execution chain - a \"pocket\" is a counterfactual contract of which the address is determined at quote-time by chainhop's pathfinder server with using the id as salt. the actual pocket contract deployment is done at execution time by the the ExecutionNode on that chain",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9770,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 119,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 122,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9016,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "testMode",
        "offset": 22,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9018,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "messageBus",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10348,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "dexFunc2Codec",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_bytes4,t_address))"
      },
      {
        "astId": 10235,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "bridges",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_contract(IBridgeAdapter)7545)"
      },
      {
        "astId": 4283,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "signer",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 10539,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "feeVault",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 9708,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "nativeWrap",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 382,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "_status",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 9890,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "_paused",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 9992,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "pausers",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10602,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "remotes",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint64,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IBridgeAdapter)7545": {
        "encoding": "inplace",
        "label": "contract IBridgeAdapter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_address)"
      },
      "t_mapping(t_bytes32,t_contract(IBridgeAdapter)7545)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => contract IBridgeAdapter)",
        "numberOfBytes": "32",
        "value": "t_contract(IBridgeAdapter)7545"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint64,t_address)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}