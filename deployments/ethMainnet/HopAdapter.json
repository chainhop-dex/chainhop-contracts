{
  "address": "0x259bAeF0a44AC4E7913EcEA71B583414AfA2Ae03",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_bridges",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "_isL1",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_nativeWrap",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "bridges",
          "type": "address[]"
        }
      ],
      "name": "BridgeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nativeWrap",
          "type": "address"
        }
      ],
      "name": "NativeWrapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_bridgeParams",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "bridgeResp",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bridges",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isL1",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeWrap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_bridges",
          "type": "address[]"
        }
      ],
      "name": "setBridges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nativeWrap",
          "type": "address"
        }
      ],
      "name": "setNativeWrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0bdcff691b57b005403f81abe4edc6bab27fe1a2ac7edd31e58c1fecbdbe25d8",
  "receipt": {
    "to": null,
    "from": "0x8b5F94a2c2e23eE8cC0Ff56872aF973243eF7628",
    "contractAddress": "0x259bAeF0a44AC4E7913EcEA71B583414AfA2Ae03",
    "transactionIndex": 64,
    "gasUsed": "1420888",
    "logsBloom": "0x
    "blockHash": "0xc83d9a31526336f878d77e57ccd49937b86f1adfe736e2bc061b7e41166da63f",
    "transactionHash": "0x0bdcff691b57b005403f81abe4edc6bab27fe1a2ac7edd31e58c1fecbdbe25d8",
    "logs": [
      {
        "transactionIndex": 64,
        "blockNumber": 15794815,
        "transactionHash": "0x0bdcff691b57b005403f81abe4edc6bab27fe1a2ac7edd31e58c1fecbdbe25d8",
        "address": "0x259bAeF0a44AC4E7913EcEA71B583414AfA2Ae03",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b5f94a2c2e23ee8cc0ff56872af973243ef7628"
        ],
        "data": "0x",
        "logIndex": 205,
        "blockHash": "0xc83d9a31526336f878d77e57ccd49937b86f1adfe736e2bc061b7e41166da63f"
      },
      {
        "transactionIndex": 64,
        "blockNumber": 15794815,
        "transactionHash": "0x0bdcff691b57b005403f81abe4edc6bab27fe1a2ac7edd31e58c1fecbdbe25d8",
        "address": "0x259bAeF0a44AC4E7913EcEA71B583414AfA2Ae03",
        "topics": [
          "0xe6f8b37160fcd8da316f0f1af6909be686dfdb00300ad6bb0727b8ca058df2f7"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000007000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000007d1afa7b718fb893db30a3abc0cfc608aacfebb00000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000c011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f00000000000000000000000000000000000000000000000000000000000000070000000000000000000000003666f603cc164936c1b87e207f36beba4ac5f18a0000000000000000000000003e4a3a4796d16c0cd582c382691998f7c06420b600000000000000000000000022b1cbb8d98a01a3b71d034bb899775a76eb1cc20000000000000000000000003d4cc8a61c7528fd86c55cfe061a78dcba48edd1000000000000000000000000b8901acb165ed027e32754e0ffe830802919727f000000000000000000000000b98454270065a31d71bf635f6f7ee6a518dfb849000000000000000000000000893246facf345c99e4235e5a7bbee7404c988b96",
        "logIndex": 206,
        "blockHash": "0xc83d9a31526336f878d77e57ccd49937b86f1adfe736e2bc061b7e41166da63f"
      }
    ],
    "blockNumber": 15794815,
    "cumulativeGasUsed": "8669333",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
      "0xdAC17F958D2ee523a2206206994597C13D831ec7",
      "0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0",
      "0x6B175474E89094C44Da98b954EedeAC495271d0F",
      "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
      "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
      "0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f"
    ],
    [
      "0x3666f603Cc164936C1b87e207F36BEBa4AC5f18a",
      "0x3E4a3a4796d16c0Cd582C382691998f7c06420B6",
      "0x22B1Cbb8D98a01a3B71D034BB899775A76Eb1cc2",
      "0x3d4Cc8A61c7528Fd86C55cfe061a78dCBA48EDd1",
      "0xb8901acB165ed027E32754E0FFe830802919727f",
      "0xb98454270065A31D71Bf635F6F7Ee6A518dFb849",
      "0x893246FACF345c99e4235E5A7bbEE7404c988b96"
    ],
    true,
    "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
  ],
  "numDeployments": 2,
  "solcInputHash": "f2f5fa5b00bbc60f5963b7d08566a290",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_bridges\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_isL1\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_nativeWrap\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bridges\",\"type\":\"address[]\"}],\"name\":\"BridgeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nativeWrap\",\"type\":\"address\"}],\"name\":\"NativeWrapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_bridgeParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"bridgeResp\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bridges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isL1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeWrap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_bridges\",\"type\":\"address[]\"}],\"name\":\"setBridges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nativeWrap\",\"type\":\"address\"}],\"name\":\"setNativeWrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridges/HopAdapter.sol\":\"HopAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/bridges/HopAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../interfaces/IBridgeAdapter.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../interfaces/IHopBridge.sol\\\";\\nimport \\\"../lib/NativeWrap.sol\\\";\\n\\ncontract HopAdapter is IBridgeAdapter, NativeWrap {\\n    using SafeERC20 for IERC20;\\n\\n    bool public immutable isL1;\\n\\n    mapping(address => address) public bridges;\\n\\n    event BridgeUpdated(address[] tokens, address[] bridges);\\n\\n    constructor(\\n        address[] memory _tokens,\\n        address[] memory _bridges,\\n        bool _isL1,\\n        address _nativeWrap\\n    ) NativeWrap(_nativeWrap) {\\n        isL1 = _isL1;\\n        _setBridges(_tokens, _bridges);\\n    }\\n\\n    struct BridgeParams {\\n        uint256 bonderFee;\\n        uint256 deadline;\\n        uint256 amountOutMin;\\n        uint256 dstDeadline;\\n        uint256 dstAmountOutMin;\\n    }\\n\\n    function bridge(\\n        uint64 _dstChainId,\\n        address _receiver,\\n        uint256 _amount,\\n        address _token,\\n        bytes memory _bridgeParams,\\n        bytes memory //_requestMessage\\n    ) external payable returns (bytes memory bridgeResp) {\\n        BridgeParams memory p = abi.decode(_bridgeParams, (BridgeParams));\\n        address _bridge = bridges[_token];\\n        require(_bridge != address(0), \\\"bridge not found\\\");\\n\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        if (isL1) {\\n            uint256 value;\\n            if (_token == nativeWrap) {\\n                IWETH(_token).withdraw(_amount);\\n                value = _amount;\\n            } else {\\n                IERC20(_token).safeIncreaseAllowance(_bridge, _amount);\\n            }\\n            IHopBridge(_bridge).sendToL2{value: value}(\\n                _dstChainId,\\n                _receiver,\\n                _amount,\\n                p.amountOutMin,\\n                p.deadline,\\n                address(0),\\n                0\\n            );\\n        } else {\\n            uint256 value;\\n            if (_token == nativeWrap && IHopBridge(_bridge).l2CanonicalTokenIsEth()) {\\n                IWETH(_token).withdraw(_amount);\\n                value = _amount;\\n            } else {\\n                IERC20(_token).safeIncreaseAllowance(_bridge, _amount);\\n            }\\n            IHopBridge(_bridge).swapAndSend{value: value}(\\n                _dstChainId,\\n                _receiver,\\n                _amount,\\n                p.bonderFee,\\n                p.amountOutMin,\\n                p.deadline,\\n                p.dstAmountOutMin,\\n                p.dstDeadline\\n            );\\n        }\\n        return bridgeResp;\\n    }\\n\\n    function setBridges(address[] calldata _tokens, address[] calldata _bridges) external onlyOwner {\\n        _setBridges(_tokens, _bridges);\\n    }\\n\\n    function _setBridges(address[] memory _tokens, address[] memory _bridges) private {\\n        require(_tokens.length == _bridges.length, \\\"len mismatch\\\");\\n        for (uint8 i = 0; i < _tokens.length; i++) {\\n            bridges[_tokens[i]] = _bridges[i];\\n        }\\n        emit BridgeUpdated(_tokens, _bridges);\\n    }\\n}\\n\",\"keccak256\":\"0xd03f0a8bfeddd01362d60bb894dd0a58346cf583a97598dfd3bc314d73b4952b\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IBridgeAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\ninterface IBridgeAdapter {\\n    function bridge(\\n        uint64 _dstChainId,\\n        // the address that the fund is transfered to on the destination chain\\n        address _receiver,\\n        uint256 _amount,\\n        address _token,\\n        // Bridge transfers quoted and abi encoded by chainhop backend server.\\n        // Bridge adapter implementations need to decode this themselves.\\n        bytes memory _bridgeParams,\\n        // The message to be bridged alongside the transfer.\\n        // Note if the bridge adapter doesn't support message passing, the call should revert when\\n        // this field is set.\\n        bytes memory _requestMessage\\n    ) external payable returns (bytes memory bridgeResp);\\n}\\n\",\"keccak256\":\"0x83846dd37f0913ef77647a711ff8b1c53cbd72f6a0fc51d88ef1ad62412ee045\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IHopBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IHopBridge {\\n    // functions in Hop's L1Bridge\\n    function sendToL2(\\n        uint256 chainId,\\n        address recipient,\\n        uint256 amount,\\n        uint256 amountOutMin,\\n        uint256 deadline,\\n        address relayer,\\n        uint256 relayerFee\\n    ) external payable;\\n\\n    // functions in Hop's AMM wrapper\\n    function l2CanonicalTokenIsEth() external view returns (bool);\\n\\n    function swapAndSend(\\n        uint256 chainId,\\n        address recipient,\\n        uint256 amount,\\n        uint256 bonderFee,\\n        uint256 amountOutMin,\\n        uint256 deadline,\\n        uint256 destinationAmountOutMin,\\n        uint256 destinationDeadline\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x06cd939d2743f0cb4daf67a264157e31a9e30320daf88ba215e041af68d2874a\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x4af2aca7cbf87734e6ae30d3027baaddba6351f46e1ddbd155887a07ec85c2c2\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/NativeWrap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title A codec registry that maps swap function selectors to corresponding codec addresses\\n * @author Padoriku\\n */\\nabstract contract NativeWrap is Ownable {\\n    address public nativeWrap;\\n\\n    event NativeWrapUpdated(address nativeWrap);\\n\\n    constructor(address _nativeWrap) {\\n        require(_nativeWrap != address(0), \\\"zero native wrap\\\");\\n        nativeWrap = _nativeWrap;\\n    }\\n\\n    function setNativeWrap(address _nativeWrap) external onlyOwner {\\n        nativeWrap = _nativeWrap;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xc35b0866d35111b003332aba6ca8147e59b3502ecc5282d5789945ff8cc83d96\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001a0338038062001a03833981016040819052620000349162000384565b806200004033620000ae565b6001600160a01b038116620000725760405162461bcd60e51b8152600401620000699062000453565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055811515608052620000a48484620000fe565b5050505062000585565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051825114620001225760405162461bcd60e51b8152600401620000699062000489565b60005b82518160ff161015620001d057818160ff16815181106200014a576200014a6200049b565b602002602001015160026000858460ff16815181106200016e576200016e6200049b565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508080620001c790620004c7565b91505062000125565b507fe6f8b37160fcd8da316f0f1af6909be686dfdb00300ad6bb0727b8ca058df2f78282604051620002049291906200055c565b60405180910390a15050565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b03821117156200024e576200024e62000210565b6040525050565b60006200026160405190565b90506200026f828262000226565b919050565b60006001600160401b0382111562000290576200029062000210565b5060209081020190565b60006001600160a01b0382165b92915050565b620002b8816200029a565b8114620002c457600080fd5b50565b8051620002a781620002ad565b6000620002eb620002e58462000274565b62000255565b838152905060208082019084028301858111156200030c576200030c600080fd5b835b81811015620003345780620003248882620002c7565b845250602092830192016200030e565b5050509392505050565b600082601f830112620003545762000354600080fd5b815162000366848260208601620002d4565b949350505050565b801515620002b8565b8051620002a7816200036e565b600080600080608085870312156200039f576200039f600080fd5b84516001600160401b03811115620003ba57620003ba600080fd5b620003c8878288016200033e565b94505060208501516001600160401b03811115620003e957620003e9600080fd5b620003f7878288016200033e565b93505060406200040a8782880162000377565b92505060606200041d87828801620002c7565b91505092959194509250565b601081526000602082016f07a65726f206e617469766520777261760841b815291505b5060200190565b60208082528101620002a78162000429565b600c81526000602082016b0d8cadc40dad2e6dac2e8c6d60a31b815291506200044c565b60208082528101620002a78162000465565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60ff16600060fe198201620004e057620004e0620004b1565b5060010190565b620004f2816200029a565b82525050565b6000620005068383620004e7565b505060200190565b600062000519825190565b80845260209384019383018060005b83811015620005515781516200053f8882620004f8565b97506020830192505060010162000528565b509495945050505050565b604080825281016200056f81856200050e565b905081810360208301526200036681846200050e565b60805161145c620005a76000396000818160b80152610341015261145c6000f3fe60806040526004361061009a5760003560e01c8063715018a6116100695780638da5cb5b1161004e5780638da5cb5b14610194578063ced67f0c146101b2578063f2fde38b146101e857600080fd5b8063715018a61461015f578063834bc3ea1461017457600080fd5b80631974932b146100a65780633509c148146100f0578063457bfa2f146101125780635b5a66a71461013f57600080fd5b366100a157005b600080fd5b3480156100b257600080fd5b506100da7f000000000000000000000000000000000000000000000000000000000000000081565b6040516100e79190610a97565b60405180910390f35b3480156100fc57600080fd5b5061011061010b366004610afd565b610208565b005b34801561011e57600080fd5b50600154610132906001600160a01b031681565b6040516100e79190610b90565b34801561014b57600080fd5b5061011061015a366004610bbd565b610283565b34801561016b57600080fd5b506101106102ba565b610187610182366004610d05565b6102ce565b6040516100e79190610e23565b3480156101a057600080fd5b506000546001600160a01b0316610132565b3480156101be57600080fd5b506101326101cd366004610bbd565b6002602052600090815260409020546001600160a01b031681565b3480156101f457600080fd5b50610110610203366004610bbd565b6105fd565b610210610637565b61027d8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080880282810182019093528782529093508792508691829185019084908082843760009201919091525061066192505050565b50505050565b61028b610637565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6102c2610637565b6102cc6000610764565b565b60606000838060200190518101906102e69190610ec5565b6001600160a01b03808716600090815260026020526040902054919250168061032a5760405162461bcd60e51b815260040161032190610f1d565b60405180910390fd5b61033f6001600160a01b03871633308a6107c1565b7f000000000000000000000000000000000000000000000000000000000000000015610472576001546000906001600160a01b03908116908816036103e457604051632e1a7d4d60e01b81526001600160a01b03881690632e1a7d4d906103aa908b90600401610f33565b600060405180830381600087803b1580156103c457600080fd5b505af11580156103d8573d6000803e3d6000fd5b505050508790506103f8565b6103f86001600160a01b038816838a610846565b816001600160a01b031663deace8f5828c8c8c886040015189602001516000806040518963ffffffff1660e01b815260040161043a9796959493929190610f78565b6000604051808303818588803b15801561045357600080fd5b505af1158015610467573d6000803e3d6000fd5b5050505050506105f1565b6001546000906001600160a01b0388811691161480156104ef5750816001600160a01b031663285551256040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ef9190610ff3565b1561055a57604051632e1a7d4d60e01b81526001600160a01b03881690632e1a7d4d90610520908b90600401610f33565b600060405180830381600087803b15801561053a57600080fd5b505af115801561054e573d6000803e3d6000fd5b5050505087905061056e565b61056e6001600160a01b038816838a610846565b816001600160a01b031663eea0d7b2828c8c8c886000015189604001518a602001518b608001518c606001516040518a63ffffffff1660e01b81526004016105bd989796959493929190611014565b6000604051808303818588803b1580156105d657600080fd5b505af11580156105ea573d6000803e3d6000fd5b5050505050505b50509695505050505050565b610605610637565b6001600160a01b03811661062b5760405162461bcd60e51b8152600401610321906110e8565b61063481610764565b50565b6000546001600160a01b031633146102cc5760405162461bcd60e51b81526004016103219061112a565b80518251146106825760405162461bcd60e51b81526004016103219061116e565b60005b82518160ff16101561072657818160ff16815181106106a6576106a661117e565b602002602001015160026000858460ff16815181106106c7576106c761117e565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550808061071e906111aa565b915050610685565b507fe6f8b37160fcd8da316f0f1af6909be686dfdb00300ad6bb0727b8ca058df2f78282604051610758929190611224565b60405180910390a15050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61027d846323b872dd60e01b8585856040516024016107e293929190611249565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526108e3565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401610877929190611271565b602060405180830381865afa158015610894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b8919061128c565b6108c291906112ad565b905061027d8463095ea7b360e01b85846040516024016107e29291906112c5565b6000610938826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109779092919063ffffffff16565b80519091501561097257808060200190518101906109569190610ff3565b6109725760405162461bcd60e51b81526004016103219061133a565b505050565b60606109868484600085610990565b90505b9392505050565b6060824710156109b25760405162461bcd60e51b8152600401610321906113a4565b6001600160a01b0385163b6109d95760405162461bcd60e51b8152600401610321906113e8565b600080866001600160a01b031685876040516109f5919061141a565b60006040518083038185875af1925050503d8060008114610a32576040519150601f19603f3d011682016040523d82523d6000602084013e610a37565b606091505b5091509150610a47828286610a54565b925050505b949350505050565b60608315610a63575081610989565b825115610a735782518084602001fd5b8160405162461bcd60e51b81526004016103219190610e23565b8015155b82525050565b60208101610aa58284610a8d565b92915050565b60008083601f840112610ac057610ac0600080fd5b50813567ffffffffffffffff811115610adb57610adb600080fd5b602083019150836020820283011115610af657610af6600080fd5b9250929050565b60008060008060408587031215610b1657610b16600080fd5b843567ffffffffffffffff811115610b3057610b30600080fd5b610b3c87828801610aab565b9450945050602085013567ffffffffffffffff811115610b5e57610b5e600080fd5b610b6a87828801610aab565b95989497509550505050565b60006001600160a01b038216610aa5565b610a9181610b76565b60208101610aa58284610b87565b610ba781610b76565b811461063457600080fd5b8035610aa581610b9e565b600060208284031215610bd257610bd2600080fd5b6000610a4c8484610bb2565b67ffffffffffffffff8116610ba7565b8035610aa581610bde565b80610ba7565b8035610aa581610bf9565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610c4657610c46610c0a565b6040525050565b6000610c5860405190565b9050610c648282610c20565b919050565b600067ffffffffffffffff821115610c8357610c83610c0a565b601f19601f83011660200192915050565b82818337506000910152565b6000610cb3610cae84610c69565b610c4d565b905082815260208101848484011115610cce57610cce600080fd5b610cd9848285610c94565b509392505050565b600082601f830112610cf557610cf5600080fd5b8135610a4c848260208601610ca0565b60008060008060008060c08789031215610d2157610d21600080fd5b6000610d2d8989610bee565b9650506020610d3e89828a01610bb2565b9550506040610d4f89828a01610bff565b9450506060610d6089828a01610bb2565b935050608087013567ffffffffffffffff811115610d8057610d80600080fd5b610d8c89828a01610ce1565b92505060a087013567ffffffffffffffff811115610dac57610dac600080fd5b610db889828a01610ce1565b9150509295509295509295565b60005b83811015610de0578181015183820152602001610dc8565b8381111561027d5750506000910152565b6000610dfb825190565b808452602084019350610e12818560208601610dc5565b601f01601f19169290920192915050565b602080825281016109898184610df1565b8051610aa581610bf9565b600060a08284031215610e5457610e54600080fd5b610e5e60a0610c4d565b90506000610e6c8484610e34565b8252506020610e7d84848301610e34565b6020830152506040610e9184828501610e34565b6040830152506060610ea584828501610e34565b6060830152506080610eb984828501610e34565b60808301525092915050565b600060a08284031215610eda57610eda600080fd5b6000610a4c8484610e3f565b601081526000602082017f627269646765206e6f7420666f756e6400000000000000000000000000000000815291505b5060200190565b60208082528101610aa581610ee6565b80610a91565b60208101610aa58284610f2d565b6000610aa5610f5767ffffffffffffffff841681565b90565b610a9181610f41565b6000610aa5610f578381565b610a9181610f63565b60e08101610f86828a610f5a565b610f936020830189610b87565b610fa06040830188610f2d565b610fad6060830187610f2d565b610fba6080830186610f2d565b610fc760a0830185610b87565b610fd460c0830184610f6f565b98975050505050505050565b801515610ba7565b8051610aa581610fe0565b60006020828403121561100857611008600080fd5b6000610a4c8484610fe8565b6101008101611023828b610f5a565b611030602083018a610b87565b61103d6040830189610f2d565b61104a6060830188610f2d565b6110576080830187610f2d565b61106460a0830186610f2d565b61107160c0830185610f2d565b61107e60e0830184610f2d565b9998505050505050505050565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015291505b5060400190565b60208082528101610aa58161108b565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000610f16565b60208082528101610aa5816110f8565b600c81526000602082017f6c656e206d69736d61746368000000000000000000000000000000000000000081529150610f16565b60208082528101610aa58161113a565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60ff16600060fe1982016111c0576111c0611194565b5060010190565b60006111d38383610b87565b505060200190565b60006111e5825190565b80845260209384019383018060005b8381101561121957815161120888826111c7565b9750602083019250506001016111f4565b509495945050505050565b6040808252810161123581856111db565b9050818103602083015261098681846111db565b606081016112578286610b87565b6112646020830185610b87565b610a4c6040830184610f2d565b6040810161127f8285610b87565b6109896020830184610b87565b6000602082840312156112a1576112a1600080fd5b6000610a4c8484610e34565b600082198211156112c0576112c0611194565b500190565b604081016112d38285610b87565b6109896020830184610f2d565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f74207375636365656400000000000000000000000000000000000000000000602082015291506110e1565b60208082528101610aa5816112e0565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f81527f722063616c6c0000000000000000000000000000000000000000000000000000602082015291506110e1565b60208082528101610aa58161134a565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150610f16565b60208082528101610aa5816113b4565b6000611402825190565b611410818560208601610dc5565b9290920192915050565b600061098982846113f856fea2646970667358221220e9c39e1af474500d1789a5f93740a1654126b0d72f5b548a87c338e9bff58fb864736f6c634300080f0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/bridges/HopAdapter.sol:HopAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9942,
        "contract": "contracts/bridges/HopAdapter.sol:HopAdapter",
        "label": "nativeWrap",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5434,
        "contract": "contracts/bridges/HopAdapter.sol:HopAdapter",
        "label": "bridges",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}