{
  "address": "0xF762C3fC745948fF49a3dA00CCdC6b755e44305e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "mainContract",
          "type": "address"
        }
      ],
      "name": "MainContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "messageBus",
          "type": "address"
        }
      ],
      "name": "MessageBusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_bridgeParams",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_requestMessage",
          "type": "bytes"
        }
      ],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "bridgeResp",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "executeMessage",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransfer",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransferFallback",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransferRefund",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mainContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageBus",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        }
      ],
      "name": "setMessageBus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mainContract",
          "type": "address"
        }
      ],
      "name": "updateMainContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x00de9d7b7eb7a909922416ae2f275f5e0ce54ae775c75d46a1af8031cdce2715",
  "receipt": {
    "to": null,
    "from": "0x8b5F94a2c2e23eE8cC0Ff56872aF973243eF7628",
    "contractAddress": "0xF762C3fC745948fF49a3dA00CCdC6b755e44305e",
    "transactionIndex": 128,
    "gasUsed": "1961674",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000001000000000000200000000000000000000000020000000000000000000800800000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000020000000000000000000000000010000000000000000000000000000000000000000",
    "blockHash": "0xc0a604d1cdca7b8f04a6a3b94ac66804452b9c4b851f54459cc96672b22ea7bf",
    "transactionHash": "0x00de9d7b7eb7a909922416ae2f275f5e0ce54ae775c75d46a1af8031cdce2715",
    "logs": [
      {
        "transactionIndex": 128,
        "blockNumber": 15774119,
        "transactionHash": "0x00de9d7b7eb7a909922416ae2f275f5e0ce54ae775c75d46a1af8031cdce2715",
        "address": "0xF762C3fC745948fF49a3dA00CCdC6b755e44305e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b5f94a2c2e23ee8cc0ff56872af973243ef7628"
        ],
        "data": "0x",
        "logIndex": 334,
        "blockHash": "0xc0a604d1cdca7b8f04a6a3b94ac66804452b9c4b851f54459cc96672b22ea7bf"
      }
    ],
    "blockNumber": 15774119,
    "cumulativeGasUsed": "18376460",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4066d196a423b2b3b8b054f4f40efb47a74e200c"
  ],
  "numDeployments": 3,
  "solcInputHash": "1fabf771bf87ca53a7315bc65ffe47fc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mainContract\",\"type\":\"address\"}],\"name\":\"MainContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messageBus\",\"type\":\"address\"}],\"name\":\"MessageBusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_bridgeParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_requestMessage\",\"type\":\"bytes\"}],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"bridgeResp\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransfer\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransferFallback\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransferRefund\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"name\":\"setMessageBus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainContract\",\"type\":\"address\"}],\"name\":\"updateMainContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeMessage(address,uint64,bytes,address)\":{\"params\":{\"_executor\":\"Address who called the MessageBus execution function\",\"_message\":\"Arbitrary message bytes originated from and encoded by the source app contract\",\"_sender\":\"The address of the source app contract\",\"_srcChainId\":\"The source chain ID where the transfer is originated from\"}},\"executeMessageWithTransfer(address,address,uint256,uint64,bytes,address)\":{\"params\":{\"_amount\":\"The amount of tokens received at this contract through the cross-chain bridge.        the contract that implements this contract can safely assume that the tokens will arrive before this        function is called.\",\"_executor\":\"Address who called the MessageBus execution function\",\"_message\":\"Arbitrary message bytes originated from and encoded by the source app contract\",\"_sender\":\"The address of the source app contract\",\"_srcChainId\":\"The source chain ID where the transfer is originated from\",\"_token\":\"The address of the token that comes out of the bridge\"}},\"executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)\":{\"params\":{\"_amount\":\"The amount of tokens received at this contract through the cross-chain bridge.        the contract that implements this contract can safely assume that the tokens will arrive before this        function is called.\",\"_executor\":\"Address who called the MessageBus execution function\",\"_message\":\"Arbitrary message bytes originated from and encoded by the source app contract\",\"_sender\":\"The address of the source app contract\",\"_srcChainId\":\"The source chain ID where the transfer is originated from\",\"_token\":\"The address of the token that comes out of the bridge\"}},\"executeMessageWithTransferRefund(address,uint256,bytes,address)\":{\"details\":\"only MessageBus can call this function, this requires the user to get sigs of the message from SGNBridge contract *always* sends native token to its receiver (this contract) even though the _token field is always an ERC20 token\",\"params\":{\"_amount\":\"the amount of token received by this contract\",\"_token\":\"the token received by this contract\"},\"returns\":{\"_0\":\"ok whether the processing is successful\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMessage(address,uint64,bytes,address)\":{\"notice\":\"Called by MessageBus (MessageBusReceiver)\"},\"executeMessageWithTransfer(address,address,uint256,uint64,bytes,address)\":{\"notice\":\"Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\"},\"executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)\":{\"notice\":\"Only called by MessageBus (MessageBusReceiver) if         1. executeMessageWithTransfer reverts, or         2. executeMessageWithTransfer returns ExecutionStatus.Fail\"},\"executeMessageWithTransferRefund(address,uint256,bytes,address)\":{\"notice\":\"Used to trigger refund when bridging fails due to large slippage\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridges/CBridgeAdapter.sol\":\"CBridgeAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/bridges/CBridgeAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../lib/MessageSenderLib.sol\\\";\\nimport \\\"../lib/MessageReceiverApp.sol\\\";\\nimport \\\"../interfaces/IBridgeAdapter.sol\\\";\\nimport \\\"../interfaces/ITransferSwapper.sol\\\";\\nimport \\\"../interfaces/IIntermediaryOriginalToken.sol\\\";\\n\\ncontract CBridgeAdapter is MessageReceiverApp, IBridgeAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    address public mainContract;\\n\\n    event MainContractUpdated(address mainContract);\\n\\n    modifier onlyMainContract() {\\n        require(msg.sender == mainContract, \\\"caller is not main contract\\\");\\n        _;\\n    }\\n\\n    constructor(address _messageBus) {\\n        messageBus = _messageBus;\\n    }\\n\\n    struct CBridgeParams {\\n        // type of the bridge in cBridge to use (i.e. liquidity bridge, pegged token bridge, etc.)\\n        MsgDataTypes.BridgeSendType bridgeType;\\n        // user defined maximum allowed slippage (pip) at bridge\\n        uint32 maxSlippage;\\n        // if this field is set, this contract attempts to wrap the input OR src bridge out token\\n        // (as specified in the tokenIn field OR the output token in src SwapDescription[]) before\\n        // sending to the bridge. This field is determined by the backend when searching for routes\\n        address wrappedBridgeToken;\\n        // a unique identifier that cBridge uses to dedup transfers\\n        // this value is the a timestamp sent from frontend, but in theory can be any unique number\\n        uint64 nonce;\\n    }\\n\\n    function bridge(\\n        uint64 _dstChainId,\\n        address _receiver,\\n        uint256 _amount,\\n        address _token,\\n        bytes memory _bridgeParams,\\n        bytes memory _requestMessage\\n    ) external payable onlyMainContract returns (bytes memory bridgeResp) {\\n        CBridgeParams memory params = abi.decode((_bridgeParams), (CBridgeParams));\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        if (params.wrappedBridgeToken != address(0)) {\\n            address canonical = IIntermediaryOriginalToken(params.wrappedBridgeToken).canonical();\\n            require(canonical == _token, \\\"canonical != _token\\\");\\n            // non-standard implementation: actual token wrapping is done inside the token contract's\\n            // transferFrom(). Approving the wrapper token contract to pull the token we intend to\\n            // send so that when bridge contract calls wrapper.transferFrom() it automatically pulls\\n            // the original token from this contract, wraps it, then transfer the wrapper token from\\n            // this contract to bridge.\\n            IERC20(_token).safeApprove(params.wrappedBridgeToken, _amount);\\n            _token = params.wrappedBridgeToken;\\n        }\\n        bytes32 transferId = MessageSenderLib.sendMessageWithTransfer(\\n            _receiver,\\n            _token,\\n            _amount,\\n            _dstChainId,\\n            params.nonce,\\n            params.maxSlippage,\\n            _requestMessage,\\n            params.bridgeType,\\n            messageBus,\\n            msg.value\\n        );\\n        if (params.wrappedBridgeToken != address(0)) {\\n            IERC20(IIntermediaryOriginalToken(params.wrappedBridgeToken).canonical()).safeApprove(\\n                params.wrappedBridgeToken,\\n                0\\n            );\\n        }\\n        return abi.encodePacked(transferId);\\n    }\\n\\n    function updateMainContract(address _mainContract) external onlyOwner {\\n        mainContract = _mainContract;\\n        emit MainContractUpdated(_mainContract);\\n    }\\n\\n    /**\\n     * @notice Used to trigger refund when bridging fails due to large slippage\\n     * @dev only MessageBus can call this function, this requires the user to get sigs of the message from SGN\\n     * @dev Bridge contract *always* sends native token to its receiver (this contract) even though the _token field is always an ERC20 token\\n     * @param _token the token received by this contract\\n     * @param _amount the amount of token received by this contract\\n     * @return ok whether the processing is successful\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\\n        uint256 nativeAmt = 0;\\n        ITransferSwapper main = ITransferSwapper(mainContract);\\n        if (_token != main.nativeWrap()) {\\n            IERC20(_token).safeApprove(mainContract, _amount);\\n        } else {\\n            nativeAmt = _amount;\\n        }\\n        ExecutionStatus status = main.executeMessageWithTransferRefundFromAdapter{value: nativeAmt}(\\n            _token,\\n            _amount,\\n            _message,\\n            _executor\\n        );\\n        if (_token != main.nativeWrap()) {\\n            IERC20(_token).safeApprove(mainContract, 0);\\n        }\\n        return status;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x5aa8dd53d7b89d5d127385400c44f29e98363b221eb789a95f8fbaeaf6ee9459\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IBridgeAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\ninterface IBridgeAdapter {\\n    function bridge(\\n        uint64 _dstChainId,\\n        // the address that the fund is transfered to on the destination chain\\n        address _receiver,\\n        uint256 _amount,\\n        address _token,\\n        // Bridge transfers quoted and abi encoded by chainhop backend server.\\n        // Bridge adapter implementations need to decode this themselves.\\n        bytes memory _bridgeParams,\\n        // The message to be bridged alongside the transfer.\\n        // Note if the bridge adapter doesn't support message passing, the call should revert when\\n        // this field is set.\\n        bytes memory _requestMessage\\n    ) external payable returns (bytes memory bridgeResp);\\n}\\n\",\"keccak256\":\"0x83846dd37f0913ef77647a711ff8b1c53cbd72f6a0fc51d88ef1ad62412ee045\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IBridgeCeler.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\ninterface IBridgeCeler {\\n    // common\\n    function delayThresholds(address token) external view returns (uint256);\\n\\n    function delayPeriod() external view returns (uint256);\\n\\n    function epochVolumes(address token) external view returns (uint256);\\n\\n    function epochVolumeCaps(address token) external view returns (uint256);\\n\\n    // liquidity bridge\\n    function minSend(address token) external view returns (uint256);\\n\\n    function maxSend(address token) external view returns (uint256);\\n\\n    // peg vault v0/v2\\n    function minDeposit(address token) external view returns (uint256);\\n\\n    function maxDeposit(address token) external view returns (uint256);\\n\\n    // peg bridge v0/v2\\n    function minBurn(address token) external view returns (uint256);\\n\\n    function maxBurn(address token) external view returns (uint256);\\n\\n    function nativeWrap() external view returns (address);\\n\\n    function send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external;\\n\\n    function relay(\\n        bytes calldata _relayRequest,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function transfers(bytes32 transferId) external view returns (bool);\\n\\n    function withdraws(bytes32 withdrawId) external view returns (bool);\\n\\n    function withdraw(\\n        bytes calldata _wdmsg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x5a5eb6a4a3e53654a58083e850a9d425e80b268bbedc5aa39ae616223d2c11e9\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IIntermediaryOriginalToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\ninterface IIntermediaryOriginalToken {\\n    function canonical() external view returns (address);\\n}\\n\",\"keccak256\":\"0xce3d7764e268fedc09f719f4172e42c8ae18fc109301b227a75e2450a3126d28\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IMessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../lib/MsgDataTypes.sol\\\";\\n\\ninterface IMessageBus {\\n    function liquidityBridge() external view returns (address);\\n\\n    function pegBridge() external view returns (address);\\n\\n    function pegBridgeV2() external view returns (address);\\n\\n    function pegVault() external view returns (address);\\n\\n    function pegVaultV2() external view returns (address);\\n\\n    function feeBase() external view returns (uint256);\\n\\n    function feePerByte() external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the required fee for the message.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     @ @return The required fee.\\n     */\\n    function calcFee(bytes calldata _message) external view returns (uint256);\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native gas token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Sends a message associated with a transfer to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _srcBridge The bridge contract to send the transfer with.\\n     * @param _srcTransferId The transfer ID.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        address _srcBridge,\\n        bytes32 _srcTransferId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdrawFee(\\n        address _account,\\n        uint256 _cumulativeFee,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Execute a message with a successful transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransfer(\\n        bytes calldata _message,\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message with a refunded transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransferRefund(\\n        bytes calldata _message, // the same message associated with the original transfer\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message not associated with a transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessage(\\n        bytes calldata _message,\\n        MsgDataTypes.RouteInfo calldata _route,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x35e06417d8892519f158bc1344a598529d8e5969cd63723e7cb8054d3227d0b9\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IMessageReceiverApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessageReceiverApp {\\n    enum ExecutionStatus {\\n        Fail, // execution failed, finalized\\n        Success, // execution succeeded, finalized\\n        Retry // execution rejected, can retry later\\n    }\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s\\n     *         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Only called by MessageBus (MessageBusReceiver) if\\n     *         1. executeMessageWithTransfer reverts, or\\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferFallback(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver)\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n}\\n\",\"keccak256\":\"0x9e4d6ec7303c40c1a8c897655c3d6ef6ae1f9fa7e8c806e7c6878ff01b51e67b\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IOriginalTokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVault {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x94892c0bcf78d1d1de33a9c9e84b91a2b437f29ac2c457c0b3d8d340d62a4778\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IOriginalTokenVaultV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVaultV2 {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd920df6f6662b62f72b33685c4695b603bbce3f0ad32337c6bda0981ba058dd1\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IPeggedTokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridge {\\n    /**\\n     * @notice Burn tokens to trigger withdrawal at a remote chain's OriginalTokenVault\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _withdrawAccount account who withdraw original tokens on the remote chain\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        address _withdrawAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa01de97f0a810add87abada16e8449c606289d144762bebea8244f517d55c2b9\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IPeggedTokenBridgeV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridgeV2 {\\n    /**\\n     * @notice Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's\\n     * OriginalTokenVault, or mint at another remote chain\\n     * @param _token The pegged token address.\\n     * @param _amount The amount to burn.\\n     * @param _toChainId If zero, withdraw from original vault; otherwise, the remote chain to mint tokens.\\n     * @param _toAccount The account to receive tokens on the remote chain\\n     * @param _nonce A number to guarantee unique depositId. Can be timestamp in practice.\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    // same with `burn` above, use openzeppelin ERC20Burnable interface\\n    function burnFrom(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\n     * @param _request The serialized Mint protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xea5828630c131a1c7017360d4c1729c71bdeb5eaf366a30c9637c82795cea9d5\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ITransferSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"./IMessageReceiverApp.sol\\\";\\n\\ninterface ITransferSwapper {\\n    function nativeWrap() external view returns (address);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferRefundFromAdapter(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (IMessageReceiverApp.ExecutionStatus);\\n}\\n\",\"keccak256\":\"0xc691ddef90e6af8c4a4f1a262f7ed95c5a4559a927f12cf9bd7052f77faa6789\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/MessageBusAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract MessageBusAddress is Ownable {\\n    event MessageBusUpdated(address messageBus);\\n\\n    address public messageBus;\\n\\n    function setMessageBus(address _messageBus) public onlyOwner {\\n        messageBus = _messageBus;\\n        emit MessageBusUpdated(messageBus);\\n    }\\n}\\n\",\"keccak256\":\"0x44ad6d31920c6046e4bf72c74454e3f4b1ff22b0fb67d585dc288c68730ede74\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/MessageReceiverApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../interfaces/IMessageReceiverApp.sol\\\";\\nimport \\\"./MessageBusAddress.sol\\\";\\n\\nabstract contract MessageReceiverApp is IMessageReceiverApp, MessageBusAddress {\\n    // testMode is used for the ease of testing functions with the \\\"onlyMessageBus\\\" modifier.\\n    // WARNING: when testMode is true, ANYONE can call executeMessageXXX functions\\n    // this variable can only be set during contract construction and is always not set on mainnets\\n    bool public testMode;\\n\\n    modifier onlyMessageBus() {\\n        if (!testMode) {\\n            require(msg.sender == messageBus, \\\"caller is not message bus\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s\\n     *         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    /**\\n     * @notice Only called by MessageBus (MessageBusReceiver) if\\n     *         1. executeMessageWithTransfer reverts, or\\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferFallback(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver)\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n}\\n\",\"keccak256\":\"0x00e0d1b3f7396ee7984768a27516f24367d770708eba2dc02eb3e2cbe21c8a82\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/MessageSenderLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IBridgeCeler.sol\\\";\\nimport \\\"../interfaces/IOriginalTokenVault.sol\\\";\\nimport \\\"../interfaces/IOriginalTokenVaultV2.sol\\\";\\nimport \\\"../interfaces/IPeggedTokenBridge.sol\\\";\\nimport \\\"../interfaces/IPeggedTokenBridgeV2.sol\\\";\\nimport \\\"../interfaces/IMessageBus.sol\\\";\\nimport \\\"./MsgDataTypes.sol\\\";\\n\\nlibrary MessageSenderLib {\\n    using SafeERC20 for IERC20;\\n\\n    // ============== Internal library functions called by apps ==============\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal {\\n        IMessageBus(_messageBus).sendMessage{value: _fee}(_receiver, _dstChainId, _message);\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded. Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        bytes memory _message,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        (bytes32 transferId, address bridge) = sendTokenTransfer(\\n            _receiver,\\n            _token,\\n            _amount,\\n            _dstChainId,\\n            _nonce,\\n            _maxSlippage,\\n            _bridgeSendType,\\n            _messageBus\\n        );\\n        if (_message.length > 0) {\\n            IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\\n                _receiver,\\n                _dstChainId,\\n                bridge,\\n                transferId,\\n                _message\\n            );\\n        }\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Sends a token transfer via a bridge.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\\n     */\\n    function sendTokenTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _messageBus\\n    ) internal returns (bytes32 transferId, address bridge) {\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\\n            bridge = IMessageBus(_messageBus).liquidityBridge();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            IBridgeCeler(bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\\n            transferId = computeLiqBridgeTransferId(_receiver, _token, _amount, _dstChainId, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\\n            bridge = IMessageBus(_messageBus).pegVault();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            IOriginalTokenVault(bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n            transferId = computePegV1DepositId(_receiver, _token, _amount, _dstChainId, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\\n            bridge = IMessageBus(_messageBus).pegBridge();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            IPeggedTokenBridge(bridge).burn(_token, _amount, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(bridge, 0);\\n            transferId = computePegV1BurnId(_receiver, _token, _amount, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit) {\\n            bridge = IMessageBus(_messageBus).pegVaultV2();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            transferId = IOriginalTokenVaultV2(bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn) {\\n            bridge = IMessageBus(_messageBus).pegBridgeV2();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            transferId = IPeggedTokenBridgeV2(bridge).burn(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(bridge, 0);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2BurnFrom) {\\n            bridge = IMessageBus(_messageBus).pegBridgeV2();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            transferId = IPeggedTokenBridgeV2(bridge).burnFrom(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(bridge, 0);\\n        } else {\\n            revert(\\\"bridge type not supported\\\");\\n        }\\n    }\\n\\n    function computeLiqBridgeTransferId(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(address(this), _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\\n            );\\n    }\\n\\n    function computePegV1DepositId(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(address(this), _token, _amount, _dstChainId, _receiver, _nonce, uint64(block.chainid))\\n            );\\n    }\\n\\n    function computePegV1BurnId(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _nonce\\n    ) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(address(this), _token, _amount, _receiver, _nonce, uint64(block.chainid)));\\n    }\\n}\\n\",\"keccak256\":\"0xc4ed85967a775ba4262ffef61f2ac47e258045443d9b1967db34dc826c3a8739\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/MsgDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nlibrary MsgDataTypes {\\n    // bridge operation type at the sender side (src chain)\\n    enum BridgeSendType {\\n        Null,\\n        Liquidity,\\n        PegDeposit,\\n        PegBurn,\\n        PegV2Deposit,\\n        PegV2Burn,\\n        PegV2BurnFrom\\n    }\\n\\n    // bridge operation type at the receiver side (dst chain)\\n    enum TransferType {\\n        Null,\\n        LqRelay, // relay through liquidity bridge\\n        LqWithdraw, // withdraw from liquidity bridge\\n        PegMint, // mint through pegged token bridge\\n        PegWithdraw, // withdraw from original token vault\\n        PegV2Mint, // mint through pegged token bridge v2\\n        PegV2Withdraw // withdraw from original token vault v2\\n    }\\n\\n    enum MsgType {\\n        MessageWithTransfer,\\n        MessageOnly\\n    }\\n\\n    enum TxStatus {\\n        Null,\\n        Success,\\n        Fail,\\n        Fallback,\\n        Pending // transient state within a transaction\\n    }\\n\\n    struct TransferInfo {\\n        TransferType t;\\n        address sender;\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        uint64 wdseq; // only needed for LqWithdraw (refund)\\n        uint64 srcChainId;\\n        bytes32 refId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct RouteInfo {\\n        address sender;\\n        address receiver;\\n        uint64 srcChainId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct MsgWithTransferExecutionParams {\\n        bytes message;\\n        TransferInfo transfer;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n\\n    struct BridgeTransferParams {\\n        bytes request;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n}\\n\",\"keccak256\":\"0x4a815c72988c56480d9b3e18f3f067a000d287342a58dc419a7a0c402994d05b\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620022d0380380620022d08339810160408190526200003491620000ef565b6200003f3362000065565b600180546001600160a01b0319166001600160a01b03929092169190911790556200011c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006001600160a01b0382165b92915050565b620000d381620000b5565b8114620000df57600080fd5b50565b8051620000c281620000c8565b600060208284031215620001065762000106600080fd5b6000620001148484620000e2565b949350505050565b6121a4806200012c6000396000f3fe6080604052600436106100d65760003560e01c80638da5cb5b1161007f578063cd9ea34211610059578063cd9ea342146101cf578063d270e7ab146101fd578063df8bbc591461021d578063f2fde38b1461023d57600080fd5b80638da5cb5b146101755780639c649fdf1461019c578063a1a227fa146101af57600080fd5b8063715018a6116100b0578063715018a6146101405780637cd2bffc1461012d578063834bc3ea1461015557600080fd5b80630bcb4982146100e2578063547cad121461010b5780635ab7afc61461012d57600080fd5b366100dd57005b600080fd5b6100f56100f036600461143c565b61025d565b604051610102919061150f565b60405180910390f35b34801561011757600080fd5b5061012b61012636600461151d565b61046f565b005b6100f561013b366004611559565b6104db565b34801561014c57600080fd5b5061012b610524565b6101686101633660046116fa565b610538565b604051610102919061181a565b34801561018157600080fd5b506000546001600160a01b03165b6040516101029190611834565b6100f56101aa366004611842565b61075d565b3480156101bb57600080fd5b5060015461018f906001600160a01b031681565b3480156101db57600080fd5b506001546101f090600160a01b900460ff1681565b6040516101029190611882565b34801561020957600080fd5b5060025461018f906001600160a01b031681565b34801561022957600080fd5b5061012b61023836600461151d565b61079b565b34801561024957600080fd5b5061012b61025836600461151d565b6107fb565b600154600090600160a01b900460ff166102a4576001546001600160a01b031633146102a45760405162461bcd60e51b815260040161029b906118c7565b60405180910390fd5b6002546040805163457bfa2f60e01b815290516000926001600160a01b031691829163457bfa2f916004808201926020929091908290030181865afa1580156102f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031591906118e2565b6001600160a01b0316886001600160a01b03161461034c57600254610347906001600160a01b038a8116911689610835565b610350565b8691505b6000816001600160a01b031663fb453787848b8b8b8b8b6040518763ffffffff1660e01b815260040161038795949392919061192c565b60206040518083038185885af11580156103a5573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906103ca9190611981565b9050816001600160a01b031663457bfa2f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561040a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042e91906118e2565b6001600160a01b0316896001600160a01b03161461046157600254610461906001600160a01b038b811691166000610835565b925050505b95945050505050565b610477610952565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f3f8223bcd8b3b875473e9f9e14e1ad075451a2b5ffd31591655da9a01516bf5e916104d091611834565b60405180910390a150565b600154600090600160a01b900460ff16610519576001546001600160a01b031633146105195760405162461bcd60e51b815260040161029b906118c7565b979650505050505050565b61052c610952565b610536600061097c565b565b6002546060906001600160a01b031633146105655760405162461bcd60e51b815260040161029b906119d6565b60008380602001905181019061057b9190611a92565b90506105926001600160a01b0386163330896109d9565b60408101516001600160a01b03161561066357600081604001516001600160a01b03166326afaadd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d91906118e2565b9050856001600160a01b0316816001600160a01b0316146106405760405162461bcd60e51b815260040161029b90611ae7565b604082015161065a906001600160a01b0388169089610835565b81604001519550505b60006106988887898c866060015187602001518a8960000151600160009054906101000a90046001600160a01b031634610a00565b60408301519091506001600160a01b03161561072e5761072e8260400151600084604001516001600160a01b03166326afaadd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071e91906118e2565b6001600160a01b03169190610835565b8060405160200161073f9190611afa565b604051602081830303815290604052925050505b9695505050505050565b600154600090600160a01b900460ff16610466576001546001600160a01b031633146104665760405162461bcd60e51b815260040161029b906118c7565b6107a3610952565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556040517f50d0cbf2750e0276715bec254c588e057e0b05e87927eab7ebbad47fe1e88b4b906104d0908390611834565b610803610952565b6001600160a01b0381166108295760405162461bcd60e51b815260040161029b90611b6c565b6108328161097c565b50565b8015806108ae5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9061086b9030908690600401611b7c565b602060405180830381865afa158015610888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ac9190611ba2565b155b6108ca5760405162461bcd60e51b815260040161029b90611c1d565b61094d8363095ea7b360e01b84846040516024016108e9929190611c2d565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610a99565b505050565b6000546001600160a01b031633146105365760405162461bcd60e51b815260040161029b90611c7a565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6109fa846323b872dd60e01b8585856040516024016108e993929190611c8a565b50505050565b6000806000610a158d8d8d8d8d8d8c8c610b28565b8851919350915015610a8957846001600160a01b0316634289fbb3858f8d85878d6040518763ffffffff1660e01b8152600401610a56959493929190611cd1565b6000604051808303818588803b158015610a6f57600080fd5b505af1158015610a83573d6000803e3d6000fd5b50505050505b509b9a5050505050505050505050565b6000610aee826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111699092919063ffffffff16565b80519091501561094d5780806020019051810190610b0c9190611d2b565b61094d5760405162461bcd60e51b815260040161029b90611da6565b6000806001846006811115610b3f57610b3f6114c0565b03610c3857826001600160a01b03166382980dc46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba691906118e2565b9050610bbc6001600160a01b038a16828a611182565b60405163a5977fbb60e01b81526001600160a01b0382169063a5977fbb90610bf2908d908d908d908d908d908d90600401611dd2565b600060405180830381600087803b158015610c0c57600080fd5b505af1158015610c20573d6000803e3d6000fd5b50505050610c318a8a8a8a8a61121f565b915061115c565b6002846006811115610c4c57610c4c6114c0565b03610d3c57826001600160a01b031663d8257d176040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb391906118e2565b9050610cc96001600160a01b038a16828a611182565b806001600160a01b031663234636248a8a8a8e8b6040518663ffffffff1660e01b8152600401610cfd959493929190611e21565b600060405180830381600087803b158015610d1757600080fd5b505af1158015610d2b573d6000803e3d6000fd5b50505050610c318a8a8a8a8a61125f565b6003846006811115610d5057610d506114c0565b03610e5357826001600160a01b031663dfa2dbaf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db791906118e2565b9050610dcd6001600160a01b038a16828a611182565b604051636f3c863f60e11b81526001600160a01b0382169063de790c7e90610dff908c908c908f908c90600401611e63565b600060405180830381600087803b158015610e1957600080fd5b505af1158015610e2d573d6000803e3d6000fd5b50610e47925050506001600160a01b038a16826000610835565b610c318a8a8a8961127e565b6004846006811115610e6757610e676114c0565b03610f5b57826001600160a01b031663c66a9c5a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ece91906118e2565b9050610ee46001600160a01b038a16828a611182565b806001600160a01b031663234636248a8a8a8e8b6040518663ffffffff1660e01b8152600401610f18959493929190611e21565b6020604051808303816000875af1158015610f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c319190611ba2565b6005846006811115610f6f57610f6f6114c0565b0361107f57826001600160a01b03166395b12c276040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd691906118e2565b9050610fec6001600160a01b038a16828a611182565b806001600160a01b031663a00293018a8a8a8e8b6040518663ffffffff1660e01b8152600401611020959493929190611e21565b6020604051808303816000875af115801561103f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110639190611ba2565b915061107a6001600160a01b038a16826000610835565b61115c565b6006846006811115611093576110936114c0565b0361114457826001600160a01b03166395b12c276040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fa91906118e2565b90506111106001600160a01b038a16828a611182565b806001600160a01b0316639e422c338a8a8a8e8b6040518663ffffffff1660e01b8152600401611020959493929190611e21565b60405162461bcd60e51b815260040161029b90611ecc565b9850989650505050505050565b606061117884846000856112bc565b90505b9392505050565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b81526004016111b3929190611b7c565b602060405180830381865afa1580156111d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f49190611ba2565b6111fe9190611ef2565b90506109fa8463095ea7b360e01b85846040516024016108e9929190611c2d565b60003086868686864660405160200161123e9796959493929190611f51565b60405160208183030381529060405280519060200120905095945050505050565b60003085858589864660405160200161123e9796959493929190611fcc565b600030848487854660405160200161129b96959493929190612028565b6040516020818303038152906040528051906020012090505b949350505050565b6060824710156112de5760405162461bcd60e51b815260040161029b906120ec565b6001600160a01b0385163b6113055760405162461bcd60e51b815260040161029b90612130565b600080866001600160a01b031685876040516113219190612162565b60006040518083038185875af1925050503d806000811461135e576040519150601f19603f3d011682016040523d82523d6000602084013e611363565b606091505b50915091506105198282866060831561137d57508161117b565b82511561138d5782518084602001fd5b8160405162461bcd60e51b815260040161029b919061181a565b60006001600160a01b0382165b92915050565b6113c3816113a7565b811461083257600080fd5b80356113b4816113ba565b806113c3565b80356113b4816113d9565b60008083601f8401126113ff576113ff600080fd5b50813567ffffffffffffffff81111561141a5761141a600080fd5b60208301915083600182028301111561143557611435600080fd5b9250929050565b60008060008060006080868803121561145757611457600080fd5b600061146388886113ce565b9550506020611474888289016113df565b945050604086013567ffffffffffffffff81111561149457611494600080fd5b6114a0888289016113ea565b935093505060606114b3888289016113ce565b9150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b60038110610832576108326114c0565b806114f0816114d6565b919050565b60006113b4826114e6565b611509816114f5565b82525050565b602081016113b48284611500565b60006020828403121561153257611532600080fd5b60006112b484846113ce565b67ffffffffffffffff81166113c3565b80356113b48161153e565b600080600080600080600060c0888a03121561157757611577600080fd5b60006115838a8a6113ce565b97505060206115948a828b016113ce565b96505060406115a58a828b016113df565b95505060606115b68a828b0161154e565b945050608088013567ffffffffffffffff8111156115d6576115d6600080fd5b6115e28a828b016113ea565b935093505060a06115f58a828b016113ce565b91505092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171561164057611640611604565b6040525050565b600061165260405190565b90506114f0828261161a565b600067ffffffffffffffff82111561167857611678611604565b601f19601f83011660200192915050565b82818337506000910152565b60006116a86116a38461165e565b611647565b9050828152602081018484840111156116c3576116c3600080fd5b6116ce848285611689565b509392505050565b600082601f8301126116ea576116ea600080fd5b81356112b4848260208601611695565b60008060008060008060c0878903121561171657611716600080fd5b6000611722898961154e565b965050602061173389828a016113ce565b955050604061174489828a016113df565b945050606061175589828a016113ce565b935050608087013567ffffffffffffffff81111561177557611775600080fd5b61178189828a016116d6565b92505060a087013567ffffffffffffffff8111156117a1576117a1600080fd5b6117ad89828a016116d6565b9150509295509295509295565b60005b838110156117d55781810151838201526020016117bd565b838111156109fa5750506000910152565b60006117f0825190565b8084526020840193506118078185602086016117ba565b601f19601f8201165b9093019392505050565b6020808252810161117b81846117e6565b611509816113a7565b602081016113b4828461182b565b60008060008060006080868803121561185d5761185d600080fd5b600061186988886113ce565b95505060206114748882890161154e565b801515611509565b602081016113b4828461187a565b601981526000602082017f63616c6c6572206973206e6f74206d6573736167652062757300000000000000815291505b5060200190565b602080825281016113b481611890565b80516113b4816113ba565b6000602082840312156118f7576118f7600080fd5b60006112b484846118d7565b80611509565b818352600060208401935061191f838584611689565b601f19601f840116611810565b6080810161193a828861182b565b6119476020830187611903565b818103604083015261195a818587611909565b9050610753606083018461182b565b6003811061083257600080fd5b80516113b481611969565b60006020828403121561199657611996600080fd5b60006112b48484611976565b601b81526000602082017f63616c6c6572206973206e6f74206d61696e20636f6e74726163740000000000815291506118c0565b602080825281016113b4816119a2565b6007811061083257600080fd5b80516113b4816119e6565b63ffffffff81166113c3565b80516113b4816119fe565b80516113b48161153e565b600060808284031215611a3557611a35600080fd5b611a3f6080611647565b90506000611a4d84846119f3565b8252506020611a5e84848301611a0a565b6020830152506040611a72848285016118d7565b6040830152506060611a8684828501611a15565b60608301525092915050565b600060808284031215611aa757611aa7600080fd5b60006112b48484611a20565b601381526000602082017f63616e6f6e6963616c20213d205f746f6b656e00000000000000000000000000815291506118c0565b602080825281016113b481611ab3565b90565b6000611b068284611903565b50602001919050565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015291505b5060400190565b602080825281016113b481611b0f565b60408101611b8a828561182b565b61117b602083018461182b565b80516113b4816113d9565b600060208284031215611bb757611bb7600080fd5b60006112b48484611b97565b603681526000602082017f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060208201529150611b65565b602080825281016113b481611bc3565b60408101611c3b828561182b565b61117b6020830184611903565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260006118c0565b602080825281016113b481611c48565b60608101611c98828661182b565b611ca5602083018561182b565b6112b46040830184611903565b60006113b4611af767ffffffffffffffff841681565b61150981611cb2565b60a08101611cdf828861182b565b611cec6020830187611cc8565b611cf9604083018661182b565b611d066060830185611903565b818103608083015261051981846117e6565b8015156113c3565b80516113b481611d18565b600060208284031215611d4057611d40600080fd5b60006112b48484611d20565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f7420737563636565640000000000000000000000000000000000000000000060208201529150611b65565b602080825281016113b481611d4c565b67ffffffffffffffff8116611509565b63ffffffff8116611509565b60c08101611de0828961182b565b611ded602083018861182b565b611dfa6040830187611903565b611e076060830186611db6565b611e146080830185611db6565b61051960a0830184611dc6565b60a08101611e2f828861182b565b611e3c6020830187611903565b611e496040830186611db6565b611e56606083018561182b565b6107536080830184611db6565b60808101611e71828761182b565b611e7e6020830186611903565b611e8b604083018561182b565b6104666060830184611db6565b601981526000602082017f6272696467652074797065206e6f7420737570706f7274656400000000000000815291506118c0565b602080825281016113b481611e98565b634e487b7160e01b600052601160045260246000fd5b60008219821115611f0557611f05611edc565b500190565b60006113b48260601b90565b60006113b482611f0a565b611509611f2d826113a7565b611f16565b60006113b48260c01b90565b61150967ffffffffffffffff8216611f32565b6000611f5d828a611f21565b601482019150611f6d8289611f21565b601482019150611f7d8288611f21565b601482019150611f8d8287611903565b602082019150611f9d8286611f3e565b600882019150611fad8285611f3e565b600882019150611fbd8284611f3e565b50600801979650505050505050565b6000611fd8828a611f21565b601482019150611fe88289611f21565b601482019150611ff88288611903565b6020820191506120088287611f3e565b6008820191506120188286611f21565b601482019150611fad8285611f3e565b60006120348289611f21565b6014820191506120448288611f21565b6014820191506120548287611903565b6020820191506120648286611f21565b6014820191506120748285611f3e565b6008820191506120848284611f3e565b506008019695505050505050565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f81527f722063616c6c000000000000000000000000000000000000000000000000000060208201529150611b65565b602080825281016113b481612092565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815291506118c0565b602080825281016113b4816120fc565b600061214a825190565b6121588185602086016117ba565b9290920192915050565b600061117b828461214056fea2646970667358221220cd79e76d0fac0912a4f37e1571bbae256c897b7df8c71c3508fcf38a4927011e64736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106100d65760003560e01c80638da5cb5b1161007f578063cd9ea34211610059578063cd9ea342146101cf578063d270e7ab146101fd578063df8bbc591461021d578063f2fde38b1461023d57600080fd5b80638da5cb5b146101755780639c649fdf1461019c578063a1a227fa146101af57600080fd5b8063715018a6116100b0578063715018a6146101405780637cd2bffc1461012d578063834bc3ea1461015557600080fd5b80630bcb4982146100e2578063547cad121461010b5780635ab7afc61461012d57600080fd5b366100dd57005b600080fd5b6100f56100f036600461143c565b61025d565b604051610102919061150f565b60405180910390f35b34801561011757600080fd5b5061012b61012636600461151d565b61046f565b005b6100f561013b366004611559565b6104db565b34801561014c57600080fd5b5061012b610524565b6101686101633660046116fa565b610538565b604051610102919061181a565b34801561018157600080fd5b506000546001600160a01b03165b6040516101029190611834565b6100f56101aa366004611842565b61075d565b3480156101bb57600080fd5b5060015461018f906001600160a01b031681565b3480156101db57600080fd5b506001546101f090600160a01b900460ff1681565b6040516101029190611882565b34801561020957600080fd5b5060025461018f906001600160a01b031681565b34801561022957600080fd5b5061012b61023836600461151d565b61079b565b34801561024957600080fd5b5061012b61025836600461151d565b6107fb565b600154600090600160a01b900460ff166102a4576001546001600160a01b031633146102a45760405162461bcd60e51b815260040161029b906118c7565b60405180910390fd5b6002546040805163457bfa2f60e01b815290516000926001600160a01b031691829163457bfa2f916004808201926020929091908290030181865afa1580156102f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031591906118e2565b6001600160a01b0316886001600160a01b03161461034c57600254610347906001600160a01b038a8116911689610835565b610350565b8691505b6000816001600160a01b031663fb453787848b8b8b8b8b6040518763ffffffff1660e01b815260040161038795949392919061192c565b60206040518083038185885af11580156103a5573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906103ca9190611981565b9050816001600160a01b031663457bfa2f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561040a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042e91906118e2565b6001600160a01b0316896001600160a01b03161461046157600254610461906001600160a01b038b811691166000610835565b925050505b95945050505050565b610477610952565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f3f8223bcd8b3b875473e9f9e14e1ad075451a2b5ffd31591655da9a01516bf5e916104d091611834565b60405180910390a150565b600154600090600160a01b900460ff16610519576001546001600160a01b031633146105195760405162461bcd60e51b815260040161029b906118c7565b979650505050505050565b61052c610952565b610536600061097c565b565b6002546060906001600160a01b031633146105655760405162461bcd60e51b815260040161029b906119d6565b60008380602001905181019061057b9190611a92565b90506105926001600160a01b0386163330896109d9565b60408101516001600160a01b03161561066357600081604001516001600160a01b03166326afaadd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d91906118e2565b9050856001600160a01b0316816001600160a01b0316146106405760405162461bcd60e51b815260040161029b90611ae7565b604082015161065a906001600160a01b0388169089610835565b81604001519550505b60006106988887898c866060015187602001518a8960000151600160009054906101000a90046001600160a01b031634610a00565b60408301519091506001600160a01b03161561072e5761072e8260400151600084604001516001600160a01b03166326afaadd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071e91906118e2565b6001600160a01b03169190610835565b8060405160200161073f9190611afa565b604051602081830303815290604052925050505b9695505050505050565b600154600090600160a01b900460ff16610466576001546001600160a01b031633146104665760405162461bcd60e51b815260040161029b906118c7565b6107a3610952565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556040517f50d0cbf2750e0276715bec254c588e057e0b05e87927eab7ebbad47fe1e88b4b906104d0908390611834565b610803610952565b6001600160a01b0381166108295760405162461bcd60e51b815260040161029b90611b6c565b6108328161097c565b50565b8015806108ae5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9061086b9030908690600401611b7c565b602060405180830381865afa158015610888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ac9190611ba2565b155b6108ca5760405162461bcd60e51b815260040161029b90611c1d565b61094d8363095ea7b360e01b84846040516024016108e9929190611c2d565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610a99565b505050565b6000546001600160a01b031633146105365760405162461bcd60e51b815260040161029b90611c7a565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6109fa846323b872dd60e01b8585856040516024016108e993929190611c8a565b50505050565b6000806000610a158d8d8d8d8d8d8c8c610b28565b8851919350915015610a8957846001600160a01b0316634289fbb3858f8d85878d6040518763ffffffff1660e01b8152600401610a56959493929190611cd1565b6000604051808303818588803b158015610a6f57600080fd5b505af1158015610a83573d6000803e3d6000fd5b50505050505b509b9a5050505050505050505050565b6000610aee826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111699092919063ffffffff16565b80519091501561094d5780806020019051810190610b0c9190611d2b565b61094d5760405162461bcd60e51b815260040161029b90611da6565b6000806001846006811115610b3f57610b3f6114c0565b03610c3857826001600160a01b03166382980dc46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba691906118e2565b9050610bbc6001600160a01b038a16828a611182565b60405163a5977fbb60e01b81526001600160a01b0382169063a5977fbb90610bf2908d908d908d908d908d908d90600401611dd2565b600060405180830381600087803b158015610c0c57600080fd5b505af1158015610c20573d6000803e3d6000fd5b50505050610c318a8a8a8a8a61121f565b915061115c565b6002846006811115610c4c57610c4c6114c0565b03610d3c57826001600160a01b031663d8257d176040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb391906118e2565b9050610cc96001600160a01b038a16828a611182565b806001600160a01b031663234636248a8a8a8e8b6040518663ffffffff1660e01b8152600401610cfd959493929190611e21565b600060405180830381600087803b158015610d1757600080fd5b505af1158015610d2b573d6000803e3d6000fd5b50505050610c318a8a8a8a8a61125f565b6003846006811115610d5057610d506114c0565b03610e5357826001600160a01b031663dfa2dbaf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db791906118e2565b9050610dcd6001600160a01b038a16828a611182565b604051636f3c863f60e11b81526001600160a01b0382169063de790c7e90610dff908c908c908f908c90600401611e63565b600060405180830381600087803b158015610e1957600080fd5b505af1158015610e2d573d6000803e3d6000fd5b50610e47925050506001600160a01b038a16826000610835565b610c318a8a8a8961127e565b6004846006811115610e6757610e676114c0565b03610f5b57826001600160a01b031663c66a9c5a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ece91906118e2565b9050610ee46001600160a01b038a16828a611182565b806001600160a01b031663234636248a8a8a8e8b6040518663ffffffff1660e01b8152600401610f18959493929190611e21565b6020604051808303816000875af1158015610f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c319190611ba2565b6005846006811115610f6f57610f6f6114c0565b0361107f57826001600160a01b03166395b12c276040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd691906118e2565b9050610fec6001600160a01b038a16828a611182565b806001600160a01b031663a00293018a8a8a8e8b6040518663ffffffff1660e01b8152600401611020959493929190611e21565b6020604051808303816000875af115801561103f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110639190611ba2565b915061107a6001600160a01b038a16826000610835565b61115c565b6006846006811115611093576110936114c0565b0361114457826001600160a01b03166395b12c276040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fa91906118e2565b90506111106001600160a01b038a16828a611182565b806001600160a01b0316639e422c338a8a8a8e8b6040518663ffffffff1660e01b8152600401611020959493929190611e21565b60405162461bcd60e51b815260040161029b90611ecc565b9850989650505050505050565b606061117884846000856112bc565b90505b9392505050565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b81526004016111b3929190611b7c565b602060405180830381865afa1580156111d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f49190611ba2565b6111fe9190611ef2565b90506109fa8463095ea7b360e01b85846040516024016108e9929190611c2d565b60003086868686864660405160200161123e9796959493929190611f51565b60405160208183030381529060405280519060200120905095945050505050565b60003085858589864660405160200161123e9796959493929190611fcc565b600030848487854660405160200161129b96959493929190612028565b6040516020818303038152906040528051906020012090505b949350505050565b6060824710156112de5760405162461bcd60e51b815260040161029b906120ec565b6001600160a01b0385163b6113055760405162461bcd60e51b815260040161029b90612130565b600080866001600160a01b031685876040516113219190612162565b60006040518083038185875af1925050503d806000811461135e576040519150601f19603f3d011682016040523d82523d6000602084013e611363565b606091505b50915091506105198282866060831561137d57508161117b565b82511561138d5782518084602001fd5b8160405162461bcd60e51b815260040161029b919061181a565b60006001600160a01b0382165b92915050565b6113c3816113a7565b811461083257600080fd5b80356113b4816113ba565b806113c3565b80356113b4816113d9565b60008083601f8401126113ff576113ff600080fd5b50813567ffffffffffffffff81111561141a5761141a600080fd5b60208301915083600182028301111561143557611435600080fd5b9250929050565b60008060008060006080868803121561145757611457600080fd5b600061146388886113ce565b9550506020611474888289016113df565b945050604086013567ffffffffffffffff81111561149457611494600080fd5b6114a0888289016113ea565b935093505060606114b3888289016113ce565b9150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b60038110610832576108326114c0565b806114f0816114d6565b919050565b60006113b4826114e6565b611509816114f5565b82525050565b602081016113b48284611500565b60006020828403121561153257611532600080fd5b60006112b484846113ce565b67ffffffffffffffff81166113c3565b80356113b48161153e565b600080600080600080600060c0888a03121561157757611577600080fd5b60006115838a8a6113ce565b97505060206115948a828b016113ce565b96505060406115a58a828b016113df565b95505060606115b68a828b0161154e565b945050608088013567ffffffffffffffff8111156115d6576115d6600080fd5b6115e28a828b016113ea565b935093505060a06115f58a828b016113ce565b91505092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171561164057611640611604565b6040525050565b600061165260405190565b90506114f0828261161a565b600067ffffffffffffffff82111561167857611678611604565b601f19601f83011660200192915050565b82818337506000910152565b60006116a86116a38461165e565b611647565b9050828152602081018484840111156116c3576116c3600080fd5b6116ce848285611689565b509392505050565b600082601f8301126116ea576116ea600080fd5b81356112b4848260208601611695565b60008060008060008060c0878903121561171657611716600080fd5b6000611722898961154e565b965050602061173389828a016113ce565b955050604061174489828a016113df565b945050606061175589828a016113ce565b935050608087013567ffffffffffffffff81111561177557611775600080fd5b61178189828a016116d6565b92505060a087013567ffffffffffffffff8111156117a1576117a1600080fd5b6117ad89828a016116d6565b9150509295509295509295565b60005b838110156117d55781810151838201526020016117bd565b838111156109fa5750506000910152565b60006117f0825190565b8084526020840193506118078185602086016117ba565b601f19601f8201165b9093019392505050565b6020808252810161117b81846117e6565b611509816113a7565b602081016113b4828461182b565b60008060008060006080868803121561185d5761185d600080fd5b600061186988886113ce565b95505060206114748882890161154e565b801515611509565b602081016113b4828461187a565b601981526000602082017f63616c6c6572206973206e6f74206d6573736167652062757300000000000000815291505b5060200190565b602080825281016113b481611890565b80516113b4816113ba565b6000602082840312156118f7576118f7600080fd5b60006112b484846118d7565b80611509565b818352600060208401935061191f838584611689565b601f19601f840116611810565b6080810161193a828861182b565b6119476020830187611903565b818103604083015261195a818587611909565b9050610753606083018461182b565b6003811061083257600080fd5b80516113b481611969565b60006020828403121561199657611996600080fd5b60006112b48484611976565b601b81526000602082017f63616c6c6572206973206e6f74206d61696e20636f6e74726163740000000000815291506118c0565b602080825281016113b4816119a2565b6007811061083257600080fd5b80516113b4816119e6565b63ffffffff81166113c3565b80516113b4816119fe565b80516113b48161153e565b600060808284031215611a3557611a35600080fd5b611a3f6080611647565b90506000611a4d84846119f3565b8252506020611a5e84848301611a0a565b6020830152506040611a72848285016118d7565b6040830152506060611a8684828501611a15565b60608301525092915050565b600060808284031215611aa757611aa7600080fd5b60006112b48484611a20565b601381526000602082017f63616e6f6e6963616c20213d205f746f6b656e00000000000000000000000000815291506118c0565b602080825281016113b481611ab3565b90565b6000611b068284611903565b50602001919050565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015291505b5060400190565b602080825281016113b481611b0f565b60408101611b8a828561182b565b61117b602083018461182b565b80516113b4816113d9565b600060208284031215611bb757611bb7600080fd5b60006112b48484611b97565b603681526000602082017f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060208201529150611b65565b602080825281016113b481611bc3565b60408101611c3b828561182b565b61117b6020830184611903565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260006118c0565b602080825281016113b481611c48565b60608101611c98828661182b565b611ca5602083018561182b565b6112b46040830184611903565b60006113b4611af767ffffffffffffffff841681565b61150981611cb2565b60a08101611cdf828861182b565b611cec6020830187611cc8565b611cf9604083018661182b565b611d066060830185611903565b818103608083015261051981846117e6565b8015156113c3565b80516113b481611d18565b600060208284031215611d4057611d40600080fd5b60006112b48484611d20565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f7420737563636565640000000000000000000000000000000000000000000060208201529150611b65565b602080825281016113b481611d4c565b67ffffffffffffffff8116611509565b63ffffffff8116611509565b60c08101611de0828961182b565b611ded602083018861182b565b611dfa6040830187611903565b611e076060830186611db6565b611e146080830185611db6565b61051960a0830184611dc6565b60a08101611e2f828861182b565b611e3c6020830187611903565b611e496040830186611db6565b611e56606083018561182b565b6107536080830184611db6565b60808101611e71828761182b565b611e7e6020830186611903565b611e8b604083018561182b565b6104666060830184611db6565b601981526000602082017f6272696467652074797065206e6f7420737570706f7274656400000000000000815291506118c0565b602080825281016113b481611e98565b634e487b7160e01b600052601160045260246000fd5b60008219821115611f0557611f05611edc565b500190565b60006113b48260601b90565b60006113b482611f0a565b611509611f2d826113a7565b611f16565b60006113b48260c01b90565b61150967ffffffffffffffff8216611f32565b6000611f5d828a611f21565b601482019150611f6d8289611f21565b601482019150611f7d8288611f21565b601482019150611f8d8287611903565b602082019150611f9d8286611f3e565b600882019150611fad8285611f3e565b600882019150611fbd8284611f3e565b50600801979650505050505050565b6000611fd8828a611f21565b601482019150611fe88289611f21565b601482019150611ff88288611903565b6020820191506120088287611f3e565b6008820191506120188286611f21565b601482019150611fad8285611f3e565b60006120348289611f21565b6014820191506120448288611f21565b6014820191506120548287611903565b6020820191506120648286611f21565b6014820191506120748285611f3e565b6008820191506120848284611f3e565b506008019695505050505050565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f81527f722063616c6c000000000000000000000000000000000000000000000000000060208201529150611b65565b602080825281016113b481612092565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815291506118c0565b602080825281016113b4816120fc565b600061214a825190565b6121588185602086016117ba565b9290920192915050565b600061117b828461214056fea2646970667358221220cd79e76d0fac0912a4f37e1571bbae256c897b7df8c71c3508fcf38a4927011e64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeMessage(address,uint64,bytes,address)": {
        "params": {
          "_executor": "Address who called the MessageBus execution function",
          "_message": "Arbitrary message bytes originated from and encoded by the source app contract",
          "_sender": "The address of the source app contract",
          "_srcChainId": "The source chain ID where the transfer is originated from"
        }
      },
      "executeMessageWithTransfer(address,address,uint256,uint64,bytes,address)": {
        "params": {
          "_amount": "The amount of tokens received at this contract through the cross-chain bridge.        the contract that implements this contract can safely assume that the tokens will arrive before this        function is called.",
          "_executor": "Address who called the MessageBus execution function",
          "_message": "Arbitrary message bytes originated from and encoded by the source app contract",
          "_sender": "The address of the source app contract",
          "_srcChainId": "The source chain ID where the transfer is originated from",
          "_token": "The address of the token that comes out of the bridge"
        }
      },
      "executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)": {
        "params": {
          "_amount": "The amount of tokens received at this contract through the cross-chain bridge.        the contract that implements this contract can safely assume that the tokens will arrive before this        function is called.",
          "_executor": "Address who called the MessageBus execution function",
          "_message": "Arbitrary message bytes originated from and encoded by the source app contract",
          "_sender": "The address of the source app contract",
          "_srcChainId": "The source chain ID where the transfer is originated from",
          "_token": "The address of the token that comes out of the bridge"
        }
      },
      "executeMessageWithTransferRefund(address,uint256,bytes,address)": {
        "details": "only MessageBus can call this function, this requires the user to get sigs of the message from SGNBridge contract *always* sends native token to its receiver (this contract) even though the _token field is always an ERC20 token",
        "params": {
          "_amount": "the amount of token received by this contract",
          "_token": "the token received by this contract"
        },
        "returns": {
          "_0": "ok whether the processing is successful"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeMessage(address,uint64,bytes,address)": {
        "notice": "Called by MessageBus (MessageBusReceiver)"
      },
      "executeMessageWithTransfer(address,address,uint256,uint64,bytes,address)": {
        "notice": "Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address."
      },
      "executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)": {
        "notice": "Only called by MessageBus (MessageBusReceiver) if         1. executeMessageWithTransfer reverts, or         2. executeMessageWithTransfer returns ExecutionStatus.Fail"
      },
      "executeMessageWithTransferRefund(address,uint256,bytes,address)": {
        "notice": "Used to trigger refund when bridging fails due to large slippage"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/bridges/CBridgeAdapter.sol:CBridgeAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9213,
        "contract": "contracts/bridges/CBridgeAdapter.sol:CBridgeAdapter",
        "label": "messageBus",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9240,
        "contract": "contracts/bridges/CBridgeAdapter.sol:CBridgeAdapter",
        "label": "testMode",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 5143,
        "contract": "contracts/bridges/CBridgeAdapter.sol:CBridgeAdapter",
        "label": "mainContract",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}