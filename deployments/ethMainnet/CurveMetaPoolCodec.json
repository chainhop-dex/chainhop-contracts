{
  "address": "0x49C17dAc0709B9259C5dc815E1867A4e6071F32c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_poolTokens",
          "type": "address[][]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[][]",
          "name": "poolTokens",
          "type": "address[][]"
        }
      ],
      "name": "PoolTokensSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "dex",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICodec.SwapDescription",
          "name": "_swap",
          "type": "tuple"
        }
      ],
      "name": "decodeCalldata",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amountInOverride",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiverOverride",
          "type": "address"
        }
      ],
      "name": "encodeCalldataWithOverride",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "swapCalldata",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolToTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_poolTokens",
          "type": "address[][]"
        }
      ],
      "name": "setPoolTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1afecefd6b243f5c93cb6b443683976bab2839abbf107cab596b8daf8fdc11bc",
  "receipt": {
    "to": null,
    "from": "0x8b5F94a2c2e23eE8cC0Ff56872aF973243eF7628",
    "contractAddress": "0x49C17dAc0709B9259C5dc815E1867A4e6071F32c",
    "transactionIndex": 104,
    "gasUsed": "1531883",
    "logsBloom": "0x
    "blockHash": "0x0596258e9c68931b7ec36e93d3ea0d745bffcc2930dc159e49e329b916328aac",
    "transactionHash": "0x1afecefd6b243f5c93cb6b443683976bab2839abbf107cab596b8daf8fdc11bc",
    "logs": [
      {
        "transactionIndex": 104,
        "blockNumber": 15716290,
        "transactionHash": "0x1afecefd6b243f5c93cb6b443683976bab2839abbf107cab596b8daf8fdc11bc",
        "address": "0x49C17dAc0709B9259C5dc815E1867A4e6071F32c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b5f94a2c2e23ee8cc0ff56872af973243ef7628"
        ],
        "data": "0x",
        "logIndex": 208,
        "blockHash": "0x0596258e9c68931b7ec36e93d3ea0d745bffcc2930dc159e49e329b916328aac"
      },
      {
        "transactionIndex": 104,
        "blockNumber": 15716290,
        "transactionHash": "0x1afecefd6b243f5c93cb6b443683976bab2839abbf107cab596b8daf8fdc11bc",
        "address": "0x49C17dAc0709B9259C5dc815E1867A4e6071F32c",
        "topics": [
          "0x38a931c26f20e9b16579a20bed4b3da2a2c983babd8b2988381a242462e9d42e"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000d632f22692fac7611d2aa1c0d552930d43caed3b0000000000000000000000005a6a4d54456819380173272a5e8e9b9904bdf41b000000000000000000000000ceaf7747579696a2f0bb206a14210e3c9e6fb269000000000000000000000000ed279fdd11ca84beef15af5d39bb4d4bee23f0ca0000000000000000000000004807862aa8b2bf68830e4c8dc86d0e9a998e085a000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000853d955acef822db058eb8505911ed77f175b99e0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000000000000000400000000000000000000000099d8a9c45b2eca8864373a26d1459e3dff1e17f30000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000000000000000000000004000000000000000000000000a693b19d2931d498c5b318df961919bb4aee87a50000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000000000000000000000000000000000000000000040000000000000000000000005f98805a4e8be255a32880fdec7f6728c6568ba00000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000000000000000000000000000000000000000000040000000000000000000000004fabb145d64652a948d72533023f6e7a623c7c530000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7",
        "logIndex": 209,
        "blockHash": "0x0596258e9c68931b7ec36e93d3ea0d745bffcc2930dc159e49e329b916328aac"
      }
    ],
    "blockNumber": 15716290,
    "cumulativeGasUsed": "13394435",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xd632f22692FaC7611d2AA1C0D552930D43CAEd3B",
      "0x5a6A4D54456819380173272A5E8E9B9904BdF41B",
      "0xCEAF7747579696A2F0bb206a14210e3c9e6fB269",
      "0xEd279fDD11cA84bEef15AF5D39BB4d4bEE23F0cA",
      "0x4807862AA8b2bF68830e4C8dc86D0e9A998e085a"
    ],
    [
      [
        "0x853d955aCEf822Db058eb8505911ED77F175b99e",
        "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "0xdAC17F958D2ee523a2206206994597C13D831ec7"
      ],
      [
        "0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3",
        "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "0xdAC17F958D2ee523a2206206994597C13D831ec7"
      ],
      [
        "0xa693B19d2931d498c5B318dF961919BB4aee87a5",
        "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "0xdAC17F958D2ee523a2206206994597C13D831ec7"
      ],
      [
        "0x5f98805a4e8be255a32880fdec7f6728c6568ba0",
        "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "0xdAC17F958D2ee523a2206206994597C13D831ec7"
      ],
      [
        "0x4Fabb145d64652a948d72533023f6E7A623C7C53",
        "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "0xdAC17F958D2ee523a2206206994597C13D831ec7"
      ]
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "d83e2d523869ea8322f78889151bc01d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_poolTokens\",\"type\":\"address[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[][]\",\"name\":\"poolTokens\",\"type\":\"address[][]\"}],\"name\":\"PoolTokensSet\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICodec.SwapDescription\",\"name\":\"_swap\",\"type\":\"tuple\"}],\"name\":\"decodeCalldata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amountInOverride\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiverOverride\",\"type\":\"address\"}],\"name\":\"encodeCalldataWithOverride\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"swapCalldata\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolToTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_poolTokens\",\"type\":\"address[][]\"}],\"name\":\"setPoolTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/codecs/CurveMetaPoolCodec.sol\":\"CurveMetaPoolCodec\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/codecs/CurveMetaPoolCodec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ICodec.sol\\\";\\nimport \\\"../interfaces/ICurvePool.sol\\\";\\nimport \\\"./CurveTokenAddresses.sol\\\";\\n\\ncontract CurveMetaPoolCodec is ICodec, CurveTokenAddresses {\\n    struct SwapCalldata {\\n        int128 i;\\n        int128 j;\\n        uint256 dx;\\n        uint256 min_dy;\\n        address _receiver;\\n    }\\n\\n    constructor(address[] memory _pools, address[][] memory _poolTokens) CurveTokenAddresses(_pools, _poolTokens) {}\\n\\n    function decodeCalldata(ICodec.SwapDescription calldata _swap)\\n        external\\n        view\\n        returns (\\n            uint256 amountIn,\\n            address tokenIn,\\n            address tokenOut\\n        )\\n    {\\n        SwapCalldata memory data = abi.decode((_swap.data[4:]), (SwapCalldata));\\n        amountIn = data.dx;\\n        uint256 i = uint256(int256(data.i));\\n        uint256 j = uint256(int256(data.j));\\n        address[] memory tokens = poolToTokens[_swap.dex];\\n        tokenIn = tokens[i];\\n        tokenOut = tokens[j];\\n    }\\n\\n    function encodeCalldataWithOverride(\\n        bytes calldata _data,\\n        uint256 _amountInOverride,\\n        address _receiverOverride\\n    ) external pure returns (bytes memory swapCalldata) {\\n        bytes4 selector = bytes4(_data);\\n        SwapCalldata memory data = abi.decode((_data[4:]), (SwapCalldata));\\n        data.dx = _amountInOverride;\\n        data._receiver = _receiverOverride;\\n        return abi.encodeWithSelector(selector, data);\\n    }\\n}\\n\",\"keccak256\":\"0xeebca3e526de5ca5bb6bc6af8132843cad71bb6f4778774d6e8c6fa8fa626671\",\"license\":\"GPL-3.0-only\"},\"contracts/codecs/CurveTokenAddresses.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract CurveTokenAddresses is Ownable {\\n    event PoolTokensSet(address[] pools, address[][] poolTokens);\\n\\n    // Pool address to *underlying* token addresses. position sensitive.\\n    // This is needed because some of the metapools fail to implement curve's underlying_coins() spec,\\n    // therefore no consistant way to query token addresses by their indices.\\n    mapping(address => address[]) public poolToTokens;\\n\\n    constructor(address[] memory _pools, address[][] memory _poolTokens) {\\n        _setPoolTokens(_pools, _poolTokens);\\n    }\\n\\n    function setPoolTokens(address[] calldata _pools, address[][] calldata _poolTokens) external onlyOwner {\\n        _setPoolTokens(_pools, _poolTokens);\\n    }\\n\\n    function _setPoolTokens(address[] memory _pools, address[][] memory _poolTokens) private {\\n        require(_pools.length == _poolTokens.length, \\\"len mm\\\");\\n        for (uint256 i = 0; i < _pools.length; i++) {\\n            poolToTokens[_pools[i]] = _poolTokens[i];\\n        }\\n        emit PoolTokensSet(_pools, _poolTokens);\\n    }\\n}\\n\",\"keccak256\":\"0xf43f2d925b2fa56a85b42c9fd6b2c55dc2f3569cb2c9b38e21ef2dc78d2bd435\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ICodec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface ICodec {\\n    struct SwapDescription {\\n        address dex; // the DEX to use for the swap, zero address implies no swap needed\\n        bytes data; // the data to call the dex with\\n    }\\n\\n    function decodeCalldata(SwapDescription calldata swap)\\n        external\\n        view\\n        returns (\\n            uint256 amountIn,\\n            address tokenIn,\\n            address tokenOut\\n        );\\n\\n    function encodeCalldataWithOverride(\\n        bytes calldata data,\\n        uint256 amountInOverride,\\n        address receiverOverride\\n    ) external pure returns (bytes memory swapCalldata);\\n}\\n\",\"keccak256\":\"0x3c063f0ffd87df3df38998c78273bc00ac835331905be997c7e3c6aa3bdbdcc4\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\ninterface ICurvePool {\\n    function coins(uint256 i) external view returns (address);\\n\\n    function underlying_coins(uint256 i) external view returns (address);\\n\\n    // plain & meta pool\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    // meta pool\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    // plain & meta pool\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    // meta pool\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    // special function signature that is only used by the sUSD pool on Ethereum 0xA5407eAE9Ba41422680e2e00537571bcC53efBfD\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2be669549b0da2b01608c060c7ae85d3eb4f2deb42e0b12d99c7ee8a7f8fa6a3\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200159a3803806200159a833981016040819052620000349162000429565b8181620000413362000057565b6200004d8282620000a7565b5050505062000673565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051825114620000d45760405162461bcd60e51b8152600401620000cb90620004a3565b60405180910390fd5b60005b82518110156200016a57818181518110620000f657620000f6620004c8565b602002602001015160016000858481518110620001175762000117620004c8565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020908051906020019062000154929190620001aa565b50806200016181620004f4565b915050620000d7565b507f38a931c26f20e9b16579a20bed4b3da2a2c983babd8b2988381a242462e9d42e82826040516200019e9291906200064a565b60405180910390a15050565b82805482825590600052602060002090810192821562000202579160200282015b828111156200020257825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620001cb565b506200021092915062000214565b5090565b5b8082111562000210576000815560010162000215565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b03821117156200026957620002696200022b565b6040525050565b60006200027c60405190565b90506200028a828262000241565b919050565b60006001600160401b03821115620002ab57620002ab6200022b565b5060209081020190565b60006001600160a01b0382165b92915050565b620002d381620002b5565b8114620002df57600080fd5b50565b8051620002c281620002c8565b60006200030662000300846200028f565b62000270565b83815290506020808201908402830185811115620003275762000327600080fd5b835b818110156200034f57806200033f8882620002e2565b8452506020928301920162000329565b5050509392505050565b600082601f8301126200036f576200036f600080fd5b815162000381848260208601620002ef565b949350505050565b60006200039a62000300846200028f565b83815290506020808201908402830185811115620003bb57620003bb600080fd5b835b818110156200034f5780516001600160401b03811115620003e157620003e1600080fd5b808601620003f0898262000359565b8552505060209283019201620003bd565b600082601f830112620004175762000417600080fd5b81516200038184826020860162000389565b60008060408385031215620004415762000441600080fd5b82516001600160401b038111156200045c576200045c600080fd5b6200046a8582860162000359565b92505060208301516001600160401b038111156200048b576200048b600080fd5b620004998582860162000401565b9150509250929050565b60208082528101620002c28160068152656c656e206d6d60d01b602082015260400190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982036200050a576200050a620004de565b5060010190565b6200051c81620002b5565b82525050565b600062000530838362000511565b505060200190565b600062000543825190565b80845260209384019383018060005b838110156200057b57815162000569888262000522565b97506020830192505060010162000552565b509495945050505050565b600062000591825190565b80845260209384019383018060005b838110156200057b578151620005b7888262000522565b975060208301925050600101620005a0565b6000620005d7838362000586565b9392505050565b6000620005e9825190565b80845260208401935083602082028501620006048560200190565b8060005b858110156200063d5784840389528151620006248582620005c9565b94506020830160209a909a019992505060010162000608565b5091979650505050505050565b604080825281016200065d818562000538565b90508181036020830152620003818184620005de565b610f1780620006836000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100d75780639c20a863146100f1578063f2fde38b14610104578063ffe3fd301461011757600080fd5b8063358f0e1c146100825780634c6da269146100ad578063715018a6146100cd575b600080fd5b6100956100903660046105e8565b61012a565b6040516100a493929190610647565b60405180910390f35b6100c06100bb3660046106ed565b610246565b6040516100a491906107ba565b6100d56102f1565b005b6000546001600160a01b03165b6040516100a491906107d2565b6100e46100ff3660046107e0565b610305565b6100d561011236600461081d565b61033d565b6100d5610125366004610889565b610380565b600080808061013c6020860186610902565b61014a916004908290610961565b8101906101579190610a8b565b60408101518151602080840151929750929350600f90810b9291900b906000906001908290610188908b018b61081d565b6001600160a01b03166001600160a01b031681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156101fc57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101de575b5050505050905080838151811061021557610215610aac565b6020026020010151955080828151811061023157610231610aac565b60200260200101519450505050509193909250565b606060006102548587610ac2565b90506000610265866004818a610961565b8101906102729190610a8b565b60408082018790526001600160a01b038616608083015251909150829061029d908390602401610b64565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152925050505b949350505050565b6102f96103d6565b6103036000610400565b565b6001602052816000526040600020818154811061032157600080fd5b6000918252602090912001546001600160a01b03169150829050565b6103456103d6565b6001600160a01b0381166103745760405162461bcd60e51b815260040161036b90610b72565b60405180910390fd5b61037d81610400565b50565b6103886103d6565b6103d08484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506103cb9250859150869050610ce9565b61045d565b50505050565b6000546001600160a01b031633146103035760405162461bcd60e51b815260040161036b90610d2b565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805182511461047e5760405162461bcd60e51b815260040161036b90610d6f565b60005b82518110156105085781818151811061049c5761049c610aac565b6020026020010151600160008584815181106104ba576104ba610aac565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002090805190602001906104f5929190610546565b508061050081610d95565b915050610481565b507f38a931c26f20e9b16579a20bed4b3da2a2c983babd8b2988381a242462e9d42e828260405161053a929190610ebc565b60405180910390a15050565b8280548282559060005260206000209081019282156105a8579160200282015b828111156105a8578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909116178255602090920191600190910190610566565b506105b49291506105b8565b5090565b5b808211156105b457600081556001016105b9565b6000604082840312156105e2576105e2600080fd5b50919050565b6000602082840312156105fd576105fd600080fd5b813567ffffffffffffffff81111561061757610617600080fd5b6102e9848285016105cd565b805b82525050565b60006001600160a01b0382165b92915050565b6106258161062b565b606081016106558286610623565b610662602083018561063e565b6102e9604083018461063e565b60008083601f84011261068457610684600080fd5b50813567ffffffffffffffff81111561069f5761069f600080fd5b6020830191508360018202830111156106ba576106ba600080fd5b9250929050565b805b811461037d57600080fd5b8035610638816106c1565b6106c38161062b565b8035610638816106d9565b6000806000806060858703121561070657610706600080fd5b843567ffffffffffffffff81111561072057610720600080fd5b61072c8782880161066f565b9450945050602061073f878288016106ce565b9250506040610750878288016106e2565b91505092959194509250565b60005b8381101561077757818101518382015260200161075f565b838111156103d05750506000910152565b6000610792825190565b8084526020840193506107a981856020860161075c565b601f01601f19169290920192915050565b602080825281016107cb8184610788565b9392505050565b60208101610638828461063e565b600080604083850312156107f6576107f6600080fd5b600061080285856106e2565b9250506020610813858286016106ce565b9150509250929050565b60006020828403121561083257610832600080fd5b60006102e984846106e2565b60008083601f84011261085357610853600080fd5b50813567ffffffffffffffff81111561086e5761086e600080fd5b6020830191508360208202830111156106ba576106ba600080fd5b600080600080604085870312156108a2576108a2600080fd5b843567ffffffffffffffff8111156108bc576108bc600080fd5b6108c88782880161083e565b9450945050602085013567ffffffffffffffff8111156108ea576108ea600080fd5b6108f68782880161083e565b95989497509550505050565b6000808335601e193685900301811261091d5761091d600080fd5b80840192508235915067ffffffffffffffff82111561093e5761093e600080fd5b60208301925060018202360383131561095957610959600080fd5b509250929050565b6000808585111561097457610974600080fd5b8386111561098457610984600080fd5b5050820193919092039150565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156109cd576109cd610991565b6040525050565b60006109df60405190565b90506109eb82826109a7565b919050565b6106c381600f0b90565b8035610638816109f0565b600060a08284031215610a1a57610a1a600080fd5b610a2460a06109d4565b90506000610a3284846109fa565b8252506020610a43848483016109fa565b6020830152506040610a57848285016106ce565b6040830152506060610a6b848285016106ce565b6060830152506080610a7f848285016106e2565b60808301525092915050565b600060a08284031215610aa057610aa0600080fd5b60006102e98484610a05565b634e487b7160e01b600052603260045260246000fd5b80356001600160e01b03191682826004821015610af557610af06001600160e01b0319836004036008021b90565b831692505b505092915050565b61062581600f0b90565b805160a0830190610b188482610afd565b506020820151610b2b6020850182610afd565b506040820151610b3e6040850182610623565b506060820151610b516060850182610623565b5060808201516103d0608085018261063e565b60a081016106388284610b07565b6020808252810161063881602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b600067ffffffffffffffff821115610bed57610bed610991565b5060209081020190565b6000610c0a610c0584610bd3565b6109d4565b83815290506020808201908402830185811115610c2957610c29600080fd5b835b81811015610c4d5780610c3e88826106e2565b84525060209283019201610c2b565b5050509392505050565b600082601f830112610c6b57610c6b600080fd5b81356102e9848260208601610bf7565b6000610c89610c0584610bd3565b83815290506020808201908402830185811115610ca857610ca8600080fd5b835b81811015610c4d57803567ffffffffffffffff811115610ccc57610ccc600080fd5b808601610cd98982610c57565b8552505060209283019201610caa565b60006107cb368484610c7b565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b6020808252810161063881610cf6565b600681526000602082017f6c656e206d6d000000000000000000000000000000000000000000000000000081529150610d24565b6020808252810161063881610d3b565b634e487b7160e01b600052601160045260246000fd5b60006000198203610da857610da8610d7f565b5060010190565b6000610dbb838361063e565b505060200190565b6000610dcd825190565b80845260209384019383018060005b83811015610e01578151610df08882610daf565b975060208301925050600101610ddc565b509495945050505050565b6000610e16825190565b80845260209384019383018060005b83811015610e01578151610e398882610daf565b975060208301925050600101610e25565b60006107cb8383610e0c565b6000610e60825190565b80845260208401935083602082028501610e7a8560200190565b8060005b85811015610eaf5784840389528151610e978582610e4a565b94506020830160209a909a0199925050600101610e7e565b5091979650505050505050565b60408082528101610ecd8185610dc3565b905081810360208301526102e98184610e5656fea2646970667358221220cb54b2ff1b63b725a3c4cb918d50b5b2d9d61643a4d7d30469cc417eac6fda9664736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100d75780639c20a863146100f1578063f2fde38b14610104578063ffe3fd301461011757600080fd5b8063358f0e1c146100825780634c6da269146100ad578063715018a6146100cd575b600080fd5b6100956100903660046105e8565b61012a565b6040516100a493929190610647565b60405180910390f35b6100c06100bb3660046106ed565b610246565b6040516100a491906107ba565b6100d56102f1565b005b6000546001600160a01b03165b6040516100a491906107d2565b6100e46100ff3660046107e0565b610305565b6100d561011236600461081d565b61033d565b6100d5610125366004610889565b610380565b600080808061013c6020860186610902565b61014a916004908290610961565b8101906101579190610a8b565b60408101518151602080840151929750929350600f90810b9291900b906000906001908290610188908b018b61081d565b6001600160a01b03166001600160a01b031681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156101fc57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101de575b5050505050905080838151811061021557610215610aac565b6020026020010151955080828151811061023157610231610aac565b60200260200101519450505050509193909250565b606060006102548587610ac2565b90506000610265866004818a610961565b8101906102729190610a8b565b60408082018790526001600160a01b038616608083015251909150829061029d908390602401610b64565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152925050505b949350505050565b6102f96103d6565b6103036000610400565b565b6001602052816000526040600020818154811061032157600080fd5b6000918252602090912001546001600160a01b03169150829050565b6103456103d6565b6001600160a01b0381166103745760405162461bcd60e51b815260040161036b90610b72565b60405180910390fd5b61037d81610400565b50565b6103886103d6565b6103d08484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506103cb9250859150869050610ce9565b61045d565b50505050565b6000546001600160a01b031633146103035760405162461bcd60e51b815260040161036b90610d2b565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805182511461047e5760405162461bcd60e51b815260040161036b90610d6f565b60005b82518110156105085781818151811061049c5761049c610aac565b6020026020010151600160008584815181106104ba576104ba610aac565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002090805190602001906104f5929190610546565b508061050081610d95565b915050610481565b507f38a931c26f20e9b16579a20bed4b3da2a2c983babd8b2988381a242462e9d42e828260405161053a929190610ebc565b60405180910390a15050565b8280548282559060005260206000209081019282156105a8579160200282015b828111156105a8578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909116178255602090920191600190910190610566565b506105b49291506105b8565b5090565b5b808211156105b457600081556001016105b9565b6000604082840312156105e2576105e2600080fd5b50919050565b6000602082840312156105fd576105fd600080fd5b813567ffffffffffffffff81111561061757610617600080fd5b6102e9848285016105cd565b805b82525050565b60006001600160a01b0382165b92915050565b6106258161062b565b606081016106558286610623565b610662602083018561063e565b6102e9604083018461063e565b60008083601f84011261068457610684600080fd5b50813567ffffffffffffffff81111561069f5761069f600080fd5b6020830191508360018202830111156106ba576106ba600080fd5b9250929050565b805b811461037d57600080fd5b8035610638816106c1565b6106c38161062b565b8035610638816106d9565b6000806000806060858703121561070657610706600080fd5b843567ffffffffffffffff81111561072057610720600080fd5b61072c8782880161066f565b9450945050602061073f878288016106ce565b9250506040610750878288016106e2565b91505092959194509250565b60005b8381101561077757818101518382015260200161075f565b838111156103d05750506000910152565b6000610792825190565b8084526020840193506107a981856020860161075c565b601f01601f19169290920192915050565b602080825281016107cb8184610788565b9392505050565b60208101610638828461063e565b600080604083850312156107f6576107f6600080fd5b600061080285856106e2565b9250506020610813858286016106ce565b9150509250929050565b60006020828403121561083257610832600080fd5b60006102e984846106e2565b60008083601f84011261085357610853600080fd5b50813567ffffffffffffffff81111561086e5761086e600080fd5b6020830191508360208202830111156106ba576106ba600080fd5b600080600080604085870312156108a2576108a2600080fd5b843567ffffffffffffffff8111156108bc576108bc600080fd5b6108c88782880161083e565b9450945050602085013567ffffffffffffffff8111156108ea576108ea600080fd5b6108f68782880161083e565b95989497509550505050565b6000808335601e193685900301811261091d5761091d600080fd5b80840192508235915067ffffffffffffffff82111561093e5761093e600080fd5b60208301925060018202360383131561095957610959600080fd5b509250929050565b6000808585111561097457610974600080fd5b8386111561098457610984600080fd5b5050820193919092039150565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156109cd576109cd610991565b6040525050565b60006109df60405190565b90506109eb82826109a7565b919050565b6106c381600f0b90565b8035610638816109f0565b600060a08284031215610a1a57610a1a600080fd5b610a2460a06109d4565b90506000610a3284846109fa565b8252506020610a43848483016109fa565b6020830152506040610a57848285016106ce565b6040830152506060610a6b848285016106ce565b6060830152506080610a7f848285016106e2565b60808301525092915050565b600060a08284031215610aa057610aa0600080fd5b60006102e98484610a05565b634e487b7160e01b600052603260045260246000fd5b80356001600160e01b03191682826004821015610af557610af06001600160e01b0319836004036008021b90565b831692505b505092915050565b61062581600f0b90565b805160a0830190610b188482610afd565b506020820151610b2b6020850182610afd565b506040820151610b3e6040850182610623565b506060820151610b516060850182610623565b5060808201516103d0608085018261063e565b60a081016106388284610b07565b6020808252810161063881602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b600067ffffffffffffffff821115610bed57610bed610991565b5060209081020190565b6000610c0a610c0584610bd3565b6109d4565b83815290506020808201908402830185811115610c2957610c29600080fd5b835b81811015610c4d5780610c3e88826106e2565b84525060209283019201610c2b565b5050509392505050565b600082601f830112610c6b57610c6b600080fd5b81356102e9848260208601610bf7565b6000610c89610c0584610bd3565b83815290506020808201908402830185811115610ca857610ca8600080fd5b835b81811015610c4d57803567ffffffffffffffff811115610ccc57610ccc600080fd5b808601610cd98982610c57565b8552505060209283019201610caa565b60006107cb368484610c7b565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b6020808252810161063881610cf6565b600681526000602082017f6c656e206d6d000000000000000000000000000000000000000000000000000081529150610d24565b6020808252810161063881610d3b565b634e487b7160e01b600052601160045260246000fd5b60006000198203610da857610da8610d7f565b5060010190565b6000610dbb838361063e565b505060200190565b6000610dcd825190565b80845260209384019383018060005b83811015610e01578151610df08882610daf565b975060208301925050600101610ddc565b509495945050505050565b6000610e16825190565b80845260209384019383018060005b83811015610e01578151610e398882610daf565b975060208301925050600101610e25565b60006107cb8383610e0c565b6000610e60825190565b80845260208401935083602082028501610e7a8560200190565b8060005b85811015610eaf5784840389528151610e978582610e4a565b94506020830160209a909a0199925050600101610e7e565b5091979650505050505050565b60408082528101610ecd8185610dc3565b905081810360208301526102e98184610e5656fea2646970667358221220cb54b2ff1b63b725a3c4cb918d50b5b2d9d61643a4d7d30469cc417eac6fda9664736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/codecs/CurveMetaPoolCodec.sol:CurveMetaPoolCodec",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6835,
        "contract": "contracts/codecs/CurveMetaPoolCodec.sol:CurveMetaPoolCodec",
        "label": "poolToTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      }
    }
  }
}