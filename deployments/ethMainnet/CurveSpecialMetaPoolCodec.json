{
  "address": "0x3BEbc3a0a97F7de155c978CA76954Ad9C284Bab9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_poolTokens",
          "type": "address[][]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[][]",
          "name": "poolTokens",
          "type": "address[][]"
        }
      ],
      "name": "PoolTokensSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "dex",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICodec.SwapDescription",
          "name": "_swap",
          "type": "tuple"
        }
      ],
      "name": "decodeCalldata",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amountInOverride",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "encodeCalldataWithOverride",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "swapCalldata",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolToTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_poolTokens",
          "type": "address[][]"
        }
      ],
      "name": "setPoolTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7e89776d655477f0f715d5a8f4170dde260ad0fd8f4a076bd02f7e88fe9712c5",
  "receipt": {
    "to": null,
    "from": "0x8b5F94a2c2e23eE8cC0Ff56872aF973243eF7628",
    "contractAddress": "0x3BEbc3a0a97F7de155c978CA76954Ad9C284Bab9",
    "transactionIndex": 99,
    "gasUsed": "1117666",
    "logsBloom": "0x
    "blockHash": "0x25f344bb2a7732164707641f0de075c59e0f140896b3ad5a949f8906dea46538",
    "transactionHash": "0x7e89776d655477f0f715d5a8f4170dde260ad0fd8f4a076bd02f7e88fe9712c5",
    "logs": [
      {
        "transactionIndex": 99,
        "blockNumber": 15716288,
        "transactionHash": "0x7e89776d655477f0f715d5a8f4170dde260ad0fd8f4a076bd02f7e88fe9712c5",
        "address": "0x3BEbc3a0a97F7de155c978CA76954Ad9C284Bab9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b5f94a2c2e23ee8cc0ff56872af973243ef7628"
        ],
        "data": "0x",
        "logIndex": 151,
        "blockHash": "0x25f344bb2a7732164707641f0de075c59e0f140896b3ad5a949f8906dea46538"
      },
      {
        "transactionIndex": 99,
        "blockNumber": 15716288,
        "transactionHash": "0x7e89776d655477f0f715d5a8f4170dde260ad0fd8f4a076bd02f7e88fe9712c5",
        "address": "0x3BEbc3a0a97F7de155c978CA76954Ad9C284Bab9",
        "topics": [
          "0x38a931c26f20e9b16579a20bed4b3da2a2c983babd8b2988381a242462e9d42e"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a5407eae9ba41422680e2e00537571bcc53efbfd0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000040000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000057ab1ec28d129707052df4df418d58a2d46d5f51",
        "logIndex": 152,
        "blockHash": "0x25f344bb2a7732164707641f0de075c59e0f140896b3ad5a949f8906dea46538"
      }
    ],
    "blockNumber": 15716288,
    "cumulativeGasUsed": "11194475",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xA5407eAE9Ba41422680e2e00537571bcC53efBfD"
    ],
    [
      [
        "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "0xdAC17F958D2ee523a2206206994597C13D831ec7",
        "0x57Ab1ec28D129707052df4dF418D58a2D46d5f51"
      ]
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "d83e2d523869ea8322f78889151bc01d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_poolTokens\",\"type\":\"address[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[][]\",\"name\":\"poolTokens\",\"type\":\"address[][]\"}],\"name\":\"PoolTokensSet\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICodec.SwapDescription\",\"name\":\"_swap\",\"type\":\"tuple\"}],\"name\":\"decodeCalldata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amountInOverride\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"encodeCalldataWithOverride\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"swapCalldata\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolToTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_poolTokens\",\"type\":\"address[][]\"}],\"name\":\"setPoolTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"padoriku\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"a special codec for pools that implement exchange_underlying() slightly differently than others. e.g. \\\"sUSD\\\" pool on Ethereum and \\\"aave\\\" on Polygon\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"encode/decode calldata\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/codecs/CurveSpecialMetaPoolCodec.sol\":\"CurveSpecialMetaPoolCodec\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/codecs/CurveSpecialMetaPoolCodec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ICodec.sol\\\";\\nimport \\\"../interfaces/ICurvePool.sol\\\";\\nimport \\\"./CurveTokenAddresses.sol\\\";\\n\\n/**\\n * @title a special codec for pools that implement exchange_underlying() slightly differently than others.\\n * e.g. \\\"sUSD\\\" pool on Ethereum and \\\"aave\\\" on Polygon\\n * @author padoriku\\n * @notice encode/decode calldata\\n */\\ncontract CurveSpecialMetaPoolCodec is ICodec, CurveTokenAddresses {\\n    struct SwapCalldata {\\n        int128 i;\\n        int128 j;\\n        uint256 dx;\\n        uint256 min_dy;\\n    }\\n\\n    constructor(address[] memory _pools, address[][] memory _poolTokens) CurveTokenAddresses(_pools, _poolTokens) {}\\n\\n    function decodeCalldata(ICodec.SwapDescription calldata _swap)\\n        external\\n        view\\n        returns (\\n            uint256 amountIn,\\n            address tokenIn,\\n            address tokenOut\\n        )\\n    {\\n        SwapCalldata memory data = abi.decode((_swap.data[4:]), (SwapCalldata));\\n        amountIn = data.dx;\\n        uint256 i = uint256(uint128(data.i));\\n        uint256 j = uint256(uint128(data.j));\\n\\n        address[] memory tokens = poolToTokens[_swap.dex];\\n        if (tokens.length > 0) {\\n            // some pool(sUSD)'s implementation of underlying_coins takes uint128 instead of uint256 as input\\n            // register these pool's token addresses manually to workaround this.\\n            tokenIn = tokens[i];\\n            tokenOut = tokens[j];\\n        } else {\\n            tokenIn = ICurvePool(_swap.dex).underlying_coins(i);\\n            tokenOut = ICurvePool(_swap.dex).underlying_coins(j);\\n        }\\n    }\\n\\n    function encodeCalldataWithOverride(\\n        bytes calldata _data,\\n        uint256 _amountInOverride,\\n        address // _receiverOverride\\n    ) external pure returns (bytes memory swapCalldata) {\\n        bytes4 selector = bytes4(_data);\\n        SwapCalldata memory data = abi.decode((_data[4:]), (SwapCalldata));\\n        data.dx = _amountInOverride;\\n        return abi.encodeWithSelector(selector, data);\\n    }\\n}\\n\",\"keccak256\":\"0x9f08c8e2dc7d64fcb2259f08c589795a66ac62a616bb3774e5ae83d3ecda8417\",\"license\":\"GPL-3.0-only\"},\"contracts/codecs/CurveTokenAddresses.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract CurveTokenAddresses is Ownable {\\n    event PoolTokensSet(address[] pools, address[][] poolTokens);\\n\\n    // Pool address to *underlying* token addresses. position sensitive.\\n    // This is needed because some of the metapools fail to implement curve's underlying_coins() spec,\\n    // therefore no consistant way to query token addresses by their indices.\\n    mapping(address => address[]) public poolToTokens;\\n\\n    constructor(address[] memory _pools, address[][] memory _poolTokens) {\\n        _setPoolTokens(_pools, _poolTokens);\\n    }\\n\\n    function setPoolTokens(address[] calldata _pools, address[][] calldata _poolTokens) external onlyOwner {\\n        _setPoolTokens(_pools, _poolTokens);\\n    }\\n\\n    function _setPoolTokens(address[] memory _pools, address[][] memory _poolTokens) private {\\n        require(_pools.length == _poolTokens.length, \\\"len mm\\\");\\n        for (uint256 i = 0; i < _pools.length; i++) {\\n            poolToTokens[_pools[i]] = _poolTokens[i];\\n        }\\n        emit PoolTokensSet(_pools, _poolTokens);\\n    }\\n}\\n\",\"keccak256\":\"0xf43f2d925b2fa56a85b42c9fd6b2c55dc2f3569cb2c9b38e21ef2dc78d2bd435\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ICodec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface ICodec {\\n    struct SwapDescription {\\n        address dex; // the DEX to use for the swap, zero address implies no swap needed\\n        bytes data; // the data to call the dex with\\n    }\\n\\n    function decodeCalldata(SwapDescription calldata swap)\\n        external\\n        view\\n        returns (\\n            uint256 amountIn,\\n            address tokenIn,\\n            address tokenOut\\n        );\\n\\n    function encodeCalldataWithOverride(\\n        bytes calldata data,\\n        uint256 amountInOverride,\\n        address receiverOverride\\n    ) external pure returns (bytes memory swapCalldata);\\n}\\n\",\"keccak256\":\"0x3c063f0ffd87df3df38998c78273bc00ac835331905be997c7e3c6aa3bdbdcc4\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\ninterface ICurvePool {\\n    function coins(uint256 i) external view returns (address);\\n\\n    function underlying_coins(uint256 i) external view returns (address);\\n\\n    // plain & meta pool\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    // meta pool\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    // plain & meta pool\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    // meta pool\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    // special function signature that is only used by the sUSD pool on Ethereum 0xA5407eAE9Ba41422680e2e00537571bcC53efBfD\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2be669549b0da2b01608c060c7ae85d3eb4f2deb42e0b12d99c7ee8a7f8fa6a3\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620016b2380380620016b2833981016040819052620000349162000429565b8181620000413362000057565b6200004d8282620000a7565b5050505062000673565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051825114620000d45760405162461bcd60e51b8152600401620000cb90620004a3565b60405180910390fd5b60005b82518110156200016a57818181518110620000f657620000f6620004c8565b602002602001015160016000858481518110620001175762000117620004c8565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020908051906020019062000154929190620001aa565b50806200016181620004f4565b915050620000d7565b507f38a931c26f20e9b16579a20bed4b3da2a2c983babd8b2988381a242462e9d42e82826040516200019e9291906200064a565b60405180910390a15050565b82805482825590600052602060002090810192821562000202579160200282015b828111156200020257825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620001cb565b506200021092915062000214565b5090565b5b8082111562000210576000815560010162000215565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b03821117156200026957620002696200022b565b6040525050565b60006200027c60405190565b90506200028a828262000241565b919050565b60006001600160401b03821115620002ab57620002ab6200022b565b5060209081020190565b60006001600160a01b0382165b92915050565b620002d381620002b5565b8114620002df57600080fd5b50565b8051620002c281620002c8565b60006200030662000300846200028f565b62000270565b83815290506020808201908402830185811115620003275762000327600080fd5b835b818110156200034f57806200033f8882620002e2565b8452506020928301920162000329565b5050509392505050565b600082601f8301126200036f576200036f600080fd5b815162000381848260208601620002ef565b949350505050565b60006200039a62000300846200028f565b83815290506020808201908402830185811115620003bb57620003bb600080fd5b835b818110156200034f5780516001600160401b03811115620003e157620003e1600080fd5b808601620003f0898262000359565b8552505060209283019201620003bd565b600082601f830112620004175762000417600080fd5b81516200038184826020860162000389565b60008060408385031215620004415762000441600080fd5b82516001600160401b038111156200045c576200045c600080fd5b6200046a8582860162000359565b92505060208301516001600160401b038111156200048b576200048b600080fd5b620004998582860162000401565b9150509250929050565b60208082528101620002c28160068152656c656e206d6d60d01b602082015260400190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982036200050a576200050a620004de565b5060010190565b6200051c81620002b5565b82525050565b600062000530838362000511565b505060200190565b600062000543825190565b80845260209384019383018060005b838110156200057b57815162000569888262000522565b97506020830192505060010162000552565b509495945050505050565b600062000591825190565b80845260209384019383018060005b838110156200057b578151620005b7888262000522565b975060208301925050600101620005a0565b6000620005d7838362000586565b9392505050565b6000620005e9825190565b80845260208401935083602082028501620006048560200190565b8060005b858110156200063d5784840389528151620006248582620005c9565b94506020830160209a909a019992505060010162000608565b5091979650505050505050565b604080825281016200065d818562000538565b90508181036020830152620003818184620005de565b61102f80620006836000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100d75780639c20a863146100f1578063f2fde38b14610104578063ffe3fd301461011757600080fd5b8063358f0e1c146100825780634c6da269146100ad578063715018a6146100cd575b600080fd5b6100956100903660046106ed565b61012a565b6040516100a49392919061074c565b60405180910390f35b6100c06100bb3660046107f2565b61035a565b6040516100a491906108bf565b6100d56103f6565b005b6000546001600160a01b03165b6040516100a491906108d7565b6100e46100ff3660046108e5565b61040a565b6100d5610112366004610922565b610442565b6100d561012536600461098e565b610485565b600080808061013c6020860186610a07565b61014a916004908290610a66565b8101906101579190610b7c565b604081015181516020808401519297509293506fffffffffffffffffffffffffffffffff908116929116906000906001908290610196908b018b610922565b6001600160a01b03166001600160a01b0316815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561020a57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101ec575b505050505090506000815111156102585780838151811061022d5761022d610b9d565b6020026020010151955080828151811061024957610249610b9d565b6020026020010151945061034f565b6102656020890189610922565b6001600160a01b031663b9947eb0846040518263ffffffff1660e01b81526004016102909190610bb3565b602060405180830381865afa1580156102ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d19190610bcc565b95506102e06020890189610922565b6001600160a01b031663b9947eb0836040518263ffffffff1660e01b815260040161030b9190610bb3565b602060405180830381865afa158015610328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034c9190610bcc565b94505b505050509193909250565b606060006103688587610bed565b90506000610379866004818a610a66565b8101906103869190610b7c565b60408082018790525190915082906103a2908390602401610c7c565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152925050505b949350505050565b6103fe6104db565b6104086000610505565b565b6001602052816000526040600020818154811061042657600080fd5b6000918252602090912001546001600160a01b03169150829050565b61044a6104db565b6001600160a01b0381166104795760405162461bcd60e51b815260040161047090610c8a565b60405180910390fd5b61048281610505565b50565b61048d6104db565b6104d58484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506104d09250859150869050610e01565b610562565b50505050565b6000546001600160a01b031633146104085760405162461bcd60e51b815260040161047090610e43565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80518251146105835760405162461bcd60e51b815260040161047090610e87565b60005b825181101561060d578181815181106105a1576105a1610b9d565b6020026020010151600160008584815181106105bf576105bf610b9d565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002090805190602001906105fa92919061064b565b508061060581610ead565b915050610586565b507f38a931c26f20e9b16579a20bed4b3da2a2c983babd8b2988381a242462e9d42e828260405161063f929190610fd4565b60405180910390a15050565b8280548282559060005260206000209081019282156106ad579160200282015b828111156106ad578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390911617825560209092019160019091019061066b565b506106b99291506106bd565b5090565b5b808211156106b957600081556001016106be565b6000604082840312156106e7576106e7600080fd5b50919050565b60006020828403121561070257610702600080fd5b813567ffffffffffffffff81111561071c5761071c600080fd5b6103ee848285016106d2565b805b82525050565b60006001600160a01b0382165b92915050565b61072a81610730565b6060810161075a8286610728565b6107676020830185610743565b6103ee6040830184610743565b60008083601f84011261078957610789600080fd5b50813567ffffffffffffffff8111156107a4576107a4600080fd5b6020830191508360018202830111156107bf576107bf600080fd5b9250929050565b805b811461048257600080fd5b803561073d816107c6565b6107c881610730565b803561073d816107de565b6000806000806060858703121561080b5761080b600080fd5b843567ffffffffffffffff81111561082557610825600080fd5b61083187828801610774565b94509450506020610844878288016107d3565b9250506040610855878288016107e7565b91505092959194509250565b60005b8381101561087c578181015183820152602001610864565b838111156104d55750506000910152565b6000610897825190565b8084526020840193506108ae818560208601610861565b601f01601f19169290920192915050565b602080825281016108d0818461088d565b9392505050565b6020810161073d8284610743565b600080604083850312156108fb576108fb600080fd5b600061090785856107e7565b9250506020610918858286016107d3565b9150509250929050565b60006020828403121561093757610937600080fd5b60006103ee84846107e7565b60008083601f84011261095857610958600080fd5b50813567ffffffffffffffff81111561097357610973600080fd5b6020830191508360208202830111156107bf576107bf600080fd5b600080600080604085870312156109a7576109a7600080fd5b843567ffffffffffffffff8111156109c1576109c1600080fd5b6109cd87828801610943565b9450945050602085013567ffffffffffffffff8111156109ef576109ef600080fd5b6109fb87828801610943565b95989497509550505050565b6000808335601e1936859003018112610a2257610a22600080fd5b80840192508235915067ffffffffffffffff821115610a4357610a43600080fd5b602083019250600182023603831315610a5e57610a5e600080fd5b509250929050565b60008085851115610a7957610a79600080fd5b83861115610a8957610a89600080fd5b5050820193919092039150565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610ad257610ad2610a96565b6040525050565b6000610ae460405190565b9050610af08282610aac565b919050565b6107c881600f0b90565b803561073d81610af5565b600060808284031215610b1f57610b1f600080fd5b610b296080610ad9565b90506000610b378484610aff565b8252506020610b4884848301610aff565b6020830152506040610b5c848285016107d3565b6040830152506060610b70848285016107d3565b60608301525092915050565b600060808284031215610b9157610b91600080fd5b60006103ee8484610b0a565b634e487b7160e01b600052603260045260246000fd5b6020810161073d8284610728565b805161073d816107de565b600060208284031215610be157610be1600080fd5b60006103ee8484610bc1565b80356001600160e01b03191682826004821015610c2057610c1b6001600160e01b0319836004036008021b90565b831692505b505092915050565b61072a81600f0b90565b80516080830190610c438482610c28565b506020820151610c566020850182610c28565b506040820151610c696040850182610728565b5060608201516104d56060850182610728565b6080810161073d8284610c32565b6020808252810161073d81602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b600067ffffffffffffffff821115610d0557610d05610a96565b5060209081020190565b6000610d22610d1d84610ceb565b610ad9565b83815290506020808201908402830185811115610d4157610d41600080fd5b835b81811015610d655780610d5688826107e7565b84525060209283019201610d43565b5050509392505050565b600082601f830112610d8357610d83600080fd5b81356103ee848260208601610d0f565b6000610da1610d1d84610ceb565b83815290506020808201908402830185811115610dc057610dc0600080fd5b835b81811015610d6557803567ffffffffffffffff811115610de457610de4600080fd5b808601610df18982610d6f565b8552505060209283019201610dc2565b60006108d0368484610d93565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b6020808252810161073d81610e0e565b600681526000602082017f6c656e206d6d000000000000000000000000000000000000000000000000000081529150610e3c565b6020808252810161073d81610e53565b634e487b7160e01b600052601160045260246000fd5b60006000198203610ec057610ec0610e97565b5060010190565b6000610ed38383610743565b505060200190565b6000610ee5825190565b80845260209384019383018060005b83811015610f19578151610f088882610ec7565b975060208301925050600101610ef4565b509495945050505050565b6000610f2e825190565b80845260209384019383018060005b83811015610f19578151610f518882610ec7565b975060208301925050600101610f3d565b60006108d08383610f24565b6000610f78825190565b80845260208401935083602082028501610f928560200190565b8060005b85811015610fc75784840389528151610faf8582610f62565b94506020830160209a909a0199925050600101610f96565b5091979650505050505050565b60408082528101610fe58185610edb565b905081810360208301526103ee8184610f6e56fea2646970667358221220f336646c338db8859caee9cfa8891cc3dd4c6bc101c7fdc000cd047c3f84247564736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100d75780639c20a863146100f1578063f2fde38b14610104578063ffe3fd301461011757600080fd5b8063358f0e1c146100825780634c6da269146100ad578063715018a6146100cd575b600080fd5b6100956100903660046106ed565b61012a565b6040516100a49392919061074c565b60405180910390f35b6100c06100bb3660046107f2565b61035a565b6040516100a491906108bf565b6100d56103f6565b005b6000546001600160a01b03165b6040516100a491906108d7565b6100e46100ff3660046108e5565b61040a565b6100d5610112366004610922565b610442565b6100d561012536600461098e565b610485565b600080808061013c6020860186610a07565b61014a916004908290610a66565b8101906101579190610b7c565b604081015181516020808401519297509293506fffffffffffffffffffffffffffffffff908116929116906000906001908290610196908b018b610922565b6001600160a01b03166001600160a01b0316815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561020a57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101ec575b505050505090506000815111156102585780838151811061022d5761022d610b9d565b6020026020010151955080828151811061024957610249610b9d565b6020026020010151945061034f565b6102656020890189610922565b6001600160a01b031663b9947eb0846040518263ffffffff1660e01b81526004016102909190610bb3565b602060405180830381865afa1580156102ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d19190610bcc565b95506102e06020890189610922565b6001600160a01b031663b9947eb0836040518263ffffffff1660e01b815260040161030b9190610bb3565b602060405180830381865afa158015610328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034c9190610bcc565b94505b505050509193909250565b606060006103688587610bed565b90506000610379866004818a610a66565b8101906103869190610b7c565b60408082018790525190915082906103a2908390602401610c7c565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152925050505b949350505050565b6103fe6104db565b6104086000610505565b565b6001602052816000526040600020818154811061042657600080fd5b6000918252602090912001546001600160a01b03169150829050565b61044a6104db565b6001600160a01b0381166104795760405162461bcd60e51b815260040161047090610c8a565b60405180910390fd5b61048281610505565b50565b61048d6104db565b6104d58484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506104d09250859150869050610e01565b610562565b50505050565b6000546001600160a01b031633146104085760405162461bcd60e51b815260040161047090610e43565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80518251146105835760405162461bcd60e51b815260040161047090610e87565b60005b825181101561060d578181815181106105a1576105a1610b9d565b6020026020010151600160008584815181106105bf576105bf610b9d565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002090805190602001906105fa92919061064b565b508061060581610ead565b915050610586565b507f38a931c26f20e9b16579a20bed4b3da2a2c983babd8b2988381a242462e9d42e828260405161063f929190610fd4565b60405180910390a15050565b8280548282559060005260206000209081019282156106ad579160200282015b828111156106ad578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390911617825560209092019160019091019061066b565b506106b99291506106bd565b5090565b5b808211156106b957600081556001016106be565b6000604082840312156106e7576106e7600080fd5b50919050565b60006020828403121561070257610702600080fd5b813567ffffffffffffffff81111561071c5761071c600080fd5b6103ee848285016106d2565b805b82525050565b60006001600160a01b0382165b92915050565b61072a81610730565b6060810161075a8286610728565b6107676020830185610743565b6103ee6040830184610743565b60008083601f84011261078957610789600080fd5b50813567ffffffffffffffff8111156107a4576107a4600080fd5b6020830191508360018202830111156107bf576107bf600080fd5b9250929050565b805b811461048257600080fd5b803561073d816107c6565b6107c881610730565b803561073d816107de565b6000806000806060858703121561080b5761080b600080fd5b843567ffffffffffffffff81111561082557610825600080fd5b61083187828801610774565b94509450506020610844878288016107d3565b9250506040610855878288016107e7565b91505092959194509250565b60005b8381101561087c578181015183820152602001610864565b838111156104d55750506000910152565b6000610897825190565b8084526020840193506108ae818560208601610861565b601f01601f19169290920192915050565b602080825281016108d0818461088d565b9392505050565b6020810161073d8284610743565b600080604083850312156108fb576108fb600080fd5b600061090785856107e7565b9250506020610918858286016107d3565b9150509250929050565b60006020828403121561093757610937600080fd5b60006103ee84846107e7565b60008083601f84011261095857610958600080fd5b50813567ffffffffffffffff81111561097357610973600080fd5b6020830191508360208202830111156107bf576107bf600080fd5b600080600080604085870312156109a7576109a7600080fd5b843567ffffffffffffffff8111156109c1576109c1600080fd5b6109cd87828801610943565b9450945050602085013567ffffffffffffffff8111156109ef576109ef600080fd5b6109fb87828801610943565b95989497509550505050565b6000808335601e1936859003018112610a2257610a22600080fd5b80840192508235915067ffffffffffffffff821115610a4357610a43600080fd5b602083019250600182023603831315610a5e57610a5e600080fd5b509250929050565b60008085851115610a7957610a79600080fd5b83861115610a8957610a89600080fd5b5050820193919092039150565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610ad257610ad2610a96565b6040525050565b6000610ae460405190565b9050610af08282610aac565b919050565b6107c881600f0b90565b803561073d81610af5565b600060808284031215610b1f57610b1f600080fd5b610b296080610ad9565b90506000610b378484610aff565b8252506020610b4884848301610aff565b6020830152506040610b5c848285016107d3565b6040830152506060610b70848285016107d3565b60608301525092915050565b600060808284031215610b9157610b91600080fd5b60006103ee8484610b0a565b634e487b7160e01b600052603260045260246000fd5b6020810161073d8284610728565b805161073d816107de565b600060208284031215610be157610be1600080fd5b60006103ee8484610bc1565b80356001600160e01b03191682826004821015610c2057610c1b6001600160e01b0319836004036008021b90565b831692505b505092915050565b61072a81600f0b90565b80516080830190610c438482610c28565b506020820151610c566020850182610c28565b506040820151610c696040850182610728565b5060608201516104d56060850182610728565b6080810161073d8284610c32565b6020808252810161073d81602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b600067ffffffffffffffff821115610d0557610d05610a96565b5060209081020190565b6000610d22610d1d84610ceb565b610ad9565b83815290506020808201908402830185811115610d4157610d41600080fd5b835b81811015610d655780610d5688826107e7565b84525060209283019201610d43565b5050509392505050565b600082601f830112610d8357610d83600080fd5b81356103ee848260208601610d0f565b6000610da1610d1d84610ceb565b83815290506020808201908402830185811115610dc057610dc0600080fd5b835b81811015610d6557803567ffffffffffffffff811115610de457610de4600080fd5b808601610df18982610d6f565b8552505060209283019201610dc2565b60006108d0368484610d93565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b6020808252810161073d81610e0e565b600681526000602082017f6c656e206d6d000000000000000000000000000000000000000000000000000081529150610e3c565b6020808252810161073d81610e53565b634e487b7160e01b600052601160045260246000fd5b60006000198203610ec057610ec0610e97565b5060010190565b6000610ed38383610743565b505060200190565b6000610ee5825190565b80845260209384019383018060005b83811015610f19578151610f088882610ec7565b975060208301925050600101610ef4565b509495945050505050565b6000610f2e825190565b80845260209384019383018060005b83811015610f19578151610f518882610ec7565b975060208301925050600101610f3d565b60006108d08383610f24565b6000610f78825190565b80845260208401935083602082028501610f928560200190565b8060005b85811015610fc75784840389528151610faf8582610f62565b94506020830160209a909a0199925050600101610f96565b5091979650505050505050565b60408082528101610fe58185610edb565b905081810360208301526103ee8184610f6e56fea2646970667358221220f336646c338db8859caee9cfa8891cc3dd4c6bc101c7fdc000cd047c3f84247564736f6c634300080f0033",
  "devdoc": {
    "author": "padoriku",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "a special codec for pools that implement exchange_underlying() slightly differently than others. e.g. \"sUSD\" pool on Ethereum and \"aave\" on Polygon",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "encode/decode calldata",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/codecs/CurveSpecialMetaPoolCodec.sol:CurveSpecialMetaPoolCodec",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6835,
        "contract": "contracts/codecs/CurveSpecialMetaPoolCodec.sol:CurveSpecialMetaPoolCodec",
        "label": "poolToTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      }
    }
  }
}