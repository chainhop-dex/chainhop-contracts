{
  "address": "0x6CF652A83f55382a98f5dCFf7015eFF034E29FB3",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "blockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryAggregate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryBlockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf12ea6d1a13cf159d81f6de68521a7d6fc976bf9705a8cff7d2fc396b3cc982f",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0x6CF652A83f55382a98f5dCFf7015eFF034E29FB3",
    "transactionIndex": 195,
    "gasUsed": "689405",
    "logsBloom": "0x
    "blockHash": "0xc8fe0b7935409e014c834fcc734e752abedbcf2705214e3cc09008ee6271962b",
    "transactionHash": "0xf12ea6d1a13cf159d81f6de68521a7d6fc976bf9705a8cff7d2fc396b3cc982f",
    "logs": [],
    "blockNumber": 16534261,
    "cumulativeGasUsed": "28939478",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2b180f400e9ce85373b8e0d626eda35a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"blockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryAggregate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryBlockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Multicall2 - Aggregate results from multiple read-only function calls\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/Multicall2.sol\":\"Multicall2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/lib/Multicall2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.12;\\n\\n/// @title Multicall2 - Aggregate results from multiple read-only function calls\\n/// @author Michael Elliot <mike@makerdao.com>\\n/// @author Joshua Levine <joshua@makerdao.com>\\n/// @author Nick Johnson <arachnid@notdot.net>\\n\\ncontract Multicall2 {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n    struct Result {\\n        bool success;\\n        bytes returnData;\\n    }\\n\\n    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\\n        blockNumber = block.number;\\n        returnData = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\n            require(success, \\\"Multicall aggregate: call failed\\\");\\n            returnData[i] = ret;\\n        }\\n    }\\n\\n    function blockAndAggregate(Call[] memory calls)\\n        public\\n        returns (\\n            uint256 blockNumber,\\n            bytes32 blockHash,\\n            Result[] memory returnData\\n        )\\n    {\\n        (blockNumber, blockHash, returnData) = tryBlockAndAggregate(true, calls);\\n    }\\n\\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(blockNumber);\\n    }\\n\\n    function getBlockNumber() public view returns (uint256 blockNumber) {\\n        blockNumber = block.number;\\n    }\\n\\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\\n        coinbase = block.coinbase;\\n    }\\n\\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\\n        difficulty = block.difficulty;\\n    }\\n\\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\n        gaslimit = block.gaslimit;\\n    }\\n\\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n\\n    function getEthBalance(address addr) public view returns (uint256 balance) {\\n        balance = addr.balance;\\n    }\\n\\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(block.number - 1);\\n    }\\n\\n    function tryAggregate(bool requireSuccess, Call[] memory calls) public returns (Result[] memory returnData) {\\n        returnData = new Result[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\n\\n            if (requireSuccess) {\\n                require(success, \\\"Multicall2 aggregate: call failed\\\");\\n            }\\n\\n            returnData[i] = Result(success, ret);\\n        }\\n    }\\n\\n    function tryBlockAndAggregate(bool requireSuccess, Call[] memory calls)\\n        public\\n        returns (\\n            uint256 blockNumber,\\n            bytes32 blockHash,\\n            Result[] memory returnData\\n        )\\n    {\\n        blockNumber = block.number;\\n        blockHash = blockhash(block.number);\\n        returnData = tryAggregate(requireSuccess, calls);\\n    }\\n}\\n\",\"keccak256\":\"0x9447f3b492d5f7b9e35073d6da2a132d3c8774d65d8efc9e0559865e82a10669\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b83806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806372425d9d11610081578063bce38bd71161005b578063bce38bd714610177578063c3077fa914610197578063ee82ac5e146101aa57600080fd5b806372425d9d1461015d57806386d516e814610163578063a8b0574e1461016957600080fd5b8063399542e9116100b2578063399542e91461011a57806342cbb15c1461013c5780634d2301cc1461014257600080fd5b80630f28c97d146100d9578063252dba42146100f157806327e86d6e14610112575b600080fd5b425b6040516100e891906104e8565b60405180910390f35b6101046100ff366004610757565b6101bc565b6040516100e892919061086d565b6100db610318565b61012d6101283660046108a0565b61032b565b6040516100e89392919061099a565b436100db565b6100db6101503660046109c7565b6001600160a01b03163190565b446100db565b456100db565b416040516100e891906109f1565b61018a6101853660046108a0565b610343565b6040516100e891906109ff565b61012d6101a5366004610757565b6104c3565b6100db6101b8366004610a21565b4090565b8051439060609067ffffffffffffffff8111156101db576101db6104fc565b60405190808252806020026020018201604052801561020e57816020015b60608152602001906001900390816101f95790505b50905060005b83518110156103125760008085838151811061023257610232610a42565b6020026020010151600001516001600160a01b031686848151811061025957610259610a42565b6020026020010151602001516040516102729190610a7a565b6000604051808303816000865af19150503d80600081146102af576040519150601f19603f3d011682016040523d82523d6000602084013e6102b4565b606091505b5091509150816102df5760405162461bcd60e51b81526004016102d690610a86565b60405180910390fd5b808484815181106102f2576102f2610a42565b60200260200101819052505050808061030a90610ad6565b915050610214565b50915091565b6000610325600143610af1565b40905090565b438040606061033a8585610343565b90509250925092565b6060815167ffffffffffffffff81111561035f5761035f6104fc565b6040519080825280602002602001820160405280156103a557816020015b60408051808201909152600081526060602082015281526020019060019003908161037d5790505b50905060005b82518110156104bc576000808483815181106103c9576103c9610a42565b6020026020010151600001516001600160a01b03168584815181106103f0576103f0610a42565b6020026020010151602001516040516104099190610a7a565b6000604051808303816000865af19150503d8060008114610446576040519150601f19603f3d011682016040523d82523d6000602084013e61044b565b606091505b5091509150851561047357816104735760405162461bcd60e51b81526004016102d690610b08565b604051806040016040528083151581526020018281525084848151811061049c5761049c610a42565b6020026020010181905250505080806104b490610ad6565b9150506103ab565b5092915050565b60008060606104d360018561032b565b9196909550909350915050565b805b82525050565b602081016104f682846104e0565b92915050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610538576105386104fc565b6040525050565b600061054a60405190565b90506105568282610512565b919050565b600067ffffffffffffffff821115610575576105756104fc565b5060209081020190565b60006001600160a01b0382166104f6565b6105998161057f565b81146105a457600080fd5b50565b80356104f681610590565b600067ffffffffffffffff8211156105cc576105cc6104fc565b601f19601f83011660200192915050565b82818337506000910152565b60006105fc6105f7846105b2565b61053f565b90508281526020810184848401111561061757610617600080fd5b6106228482856105dd565b509392505050565b600082601f83011261063e5761063e600080fd5b813561064e8482602086016105e9565b949350505050565b60006040828403121561066b5761066b600080fd5b610675604061053f565b9050600061068384846105a7565b825250602082013567ffffffffffffffff8111156106a3576106a3600080fd5b6106af8482850161062a565b60208301525092915050565b60006106c96105f78461055b565b838152905060208082019084028301858111156106e8576106e8600080fd5b835b8181101561072957803567ffffffffffffffff81111561070c5761070c600080fd5b8086016107198982610656565b85525050602092830192016106ea565b5050509392505050565b600082601f83011261074757610747600080fd5b813561064e8482602086016106bb565b60006020828403121561076c5761076c600080fd5b813567ffffffffffffffff81111561078657610786600080fd5b61064e84828501610733565b60005b838110156107ad578181015183820152602001610795565b838111156107bc576000848401525b50505050565b60006107cc825190565b8084526020840193506107e3818560208601610792565b601f01601f19169290920192915050565b600061080083836107c2565b9392505050565b6000610811825190565b8084526020840193508360208202850161082b8560200190565b8060005b85811015610860578484038952815161084885826107f4565b94506020830160209a909a019992505060010161082f565b5091979650505050505050565b6040810161087b82856104e0565b818103602083015261064e8184610807565b801515610599565b80356104f68161088d565b600080604083850312156108b6576108b6600080fd5b60006108c28585610895565b925050602083013567ffffffffffffffff8111156108e2576108e2600080fd5b6108ee85828601610733565b9150509250929050565b8015156104e2565b8051600090604084019061091485826108f8565b506020830151848203602086015261092c82826107c2565b95945050505050565b60006108008383610900565b600061094b825190565b808452602084019350836020820285016109658560200190565b8060005b8581101561086057848403895281516109828582610935565b94506020830160209a909a0199925050600101610969565b606081016109a882866104e0565b6109b560208301856104e0565b818103604083015261092c8184610941565b6000602082840312156109dc576109dc600080fd5b600061064e84846105a7565b6104e28161057f565b602081016104f682846109e8565b602080825281016108008184610941565b80610599565b80356104f681610a10565b600060208284031215610a3657610a36600080fd5b600061064e8484610a16565b634e487b7160e01b600052603260045260246000fd5b6000610a62825190565b610a70818560208601610792565b9290920192915050565b60006108008284610a58565b60208082528181019081527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c65646040830152606082016104f6565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610aea57610aea610ac0565b5060010190565b600082821015610b0357610b03610ac0565b500390565b602080825281016104f681602181527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c656020820152601960fa1b60408201526060019056fea26469706673582212200cce35cdacaa91b1930b2d806ec1cd681e9fe9e63cf4b0a38b87220c596c7f5f64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c806372425d9d11610081578063bce38bd71161005b578063bce38bd714610177578063c3077fa914610197578063ee82ac5e146101aa57600080fd5b806372425d9d1461015d57806386d516e814610163578063a8b0574e1461016957600080fd5b8063399542e9116100b2578063399542e91461011a57806342cbb15c1461013c5780634d2301cc1461014257600080fd5b80630f28c97d146100d9578063252dba42146100f157806327e86d6e14610112575b600080fd5b425b6040516100e891906104e8565b60405180910390f35b6101046100ff366004610757565b6101bc565b6040516100e892919061086d565b6100db610318565b61012d6101283660046108a0565b61032b565b6040516100e89392919061099a565b436100db565b6100db6101503660046109c7565b6001600160a01b03163190565b446100db565b456100db565b416040516100e891906109f1565b61018a6101853660046108a0565b610343565b6040516100e891906109ff565b61012d6101a5366004610757565b6104c3565b6100db6101b8366004610a21565b4090565b8051439060609067ffffffffffffffff8111156101db576101db6104fc565b60405190808252806020026020018201604052801561020e57816020015b60608152602001906001900390816101f95790505b50905060005b83518110156103125760008085838151811061023257610232610a42565b6020026020010151600001516001600160a01b031686848151811061025957610259610a42565b6020026020010151602001516040516102729190610a7a565b6000604051808303816000865af19150503d80600081146102af576040519150601f19603f3d011682016040523d82523d6000602084013e6102b4565b606091505b5091509150816102df5760405162461bcd60e51b81526004016102d690610a86565b60405180910390fd5b808484815181106102f2576102f2610a42565b60200260200101819052505050808061030a90610ad6565b915050610214565b50915091565b6000610325600143610af1565b40905090565b438040606061033a8585610343565b90509250925092565b6060815167ffffffffffffffff81111561035f5761035f6104fc565b6040519080825280602002602001820160405280156103a557816020015b60408051808201909152600081526060602082015281526020019060019003908161037d5790505b50905060005b82518110156104bc576000808483815181106103c9576103c9610a42565b6020026020010151600001516001600160a01b03168584815181106103f0576103f0610a42565b6020026020010151602001516040516104099190610a7a565b6000604051808303816000865af19150503d8060008114610446576040519150601f19603f3d011682016040523d82523d6000602084013e61044b565b606091505b5091509150851561047357816104735760405162461bcd60e51b81526004016102d690610b08565b604051806040016040528083151581526020018281525084848151811061049c5761049c610a42565b6020026020010181905250505080806104b490610ad6565b9150506103ab565b5092915050565b60008060606104d360018561032b565b9196909550909350915050565b805b82525050565b602081016104f682846104e0565b92915050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610538576105386104fc565b6040525050565b600061054a60405190565b90506105568282610512565b919050565b600067ffffffffffffffff821115610575576105756104fc565b5060209081020190565b60006001600160a01b0382166104f6565b6105998161057f565b81146105a457600080fd5b50565b80356104f681610590565b600067ffffffffffffffff8211156105cc576105cc6104fc565b601f19601f83011660200192915050565b82818337506000910152565b60006105fc6105f7846105b2565b61053f565b90508281526020810184848401111561061757610617600080fd5b6106228482856105dd565b509392505050565b600082601f83011261063e5761063e600080fd5b813561064e8482602086016105e9565b949350505050565b60006040828403121561066b5761066b600080fd5b610675604061053f565b9050600061068384846105a7565b825250602082013567ffffffffffffffff8111156106a3576106a3600080fd5b6106af8482850161062a565b60208301525092915050565b60006106c96105f78461055b565b838152905060208082019084028301858111156106e8576106e8600080fd5b835b8181101561072957803567ffffffffffffffff81111561070c5761070c600080fd5b8086016107198982610656565b85525050602092830192016106ea565b5050509392505050565b600082601f83011261074757610747600080fd5b813561064e8482602086016106bb565b60006020828403121561076c5761076c600080fd5b813567ffffffffffffffff81111561078657610786600080fd5b61064e84828501610733565b60005b838110156107ad578181015183820152602001610795565b838111156107bc576000848401525b50505050565b60006107cc825190565b8084526020840193506107e3818560208601610792565b601f01601f19169290920192915050565b600061080083836107c2565b9392505050565b6000610811825190565b8084526020840193508360208202850161082b8560200190565b8060005b85811015610860578484038952815161084885826107f4565b94506020830160209a909a019992505060010161082f565b5091979650505050505050565b6040810161087b82856104e0565b818103602083015261064e8184610807565b801515610599565b80356104f68161088d565b600080604083850312156108b6576108b6600080fd5b60006108c28585610895565b925050602083013567ffffffffffffffff8111156108e2576108e2600080fd5b6108ee85828601610733565b9150509250929050565b8015156104e2565b8051600090604084019061091485826108f8565b506020830151848203602086015261092c82826107c2565b95945050505050565b60006108008383610900565b600061094b825190565b808452602084019350836020820285016109658560200190565b8060005b8581101561086057848403895281516109828582610935565b94506020830160209a909a0199925050600101610969565b606081016109a882866104e0565b6109b560208301856104e0565b818103604083015261092c8184610941565b6000602082840312156109dc576109dc600080fd5b600061064e84846105a7565b6104e28161057f565b602081016104f682846109e8565b602080825281016108008184610941565b80610599565b80356104f681610a10565b600060208284031215610a3657610a36600080fd5b600061064e8484610a16565b634e487b7160e01b600052603260045260246000fd5b6000610a62825190565b610a70818560208601610792565b9290920192915050565b60006108008284610a58565b60208082528181019081527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c65646040830152606082016104f6565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610aea57610aea610ac0565b5060010190565b600082821015610b0357610b03610ac0565b500390565b602080825281016104f681602181527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c656020820152601960fa1b60408201526060019056fea26469706673582212200cce35cdacaa91b1930b2d806ec1cd681e9fe9e63cf4b0a38b87220c596c7f5f64736f6c634300080c0033",
  "devdoc": {
    "author": "Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>",
    "kind": "dev",
    "methods": {},
    "title": "Multicall2 - Aggregate results from multiple read-only function calls",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}