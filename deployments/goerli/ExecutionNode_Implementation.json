{
  "address": "0xE6543F543D8c20738c194DB3B65B96C52E4E9D8A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_testMode",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nativeWrap",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dex",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "codec",
          "type": "address"
        }
      ],
      "name": "DexCodecUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "messageBus",
          "type": "address"
        }
      ],
      "name": "MessageBusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nativeWrap",
          "type": "address"
        }
      ],
      "name": "NativeWrapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "erc20Amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeAmount",
          "type": "uint256"
        }
      ],
      "name": "PocketFundClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "SignerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "StepExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "providers",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "adapters",
          "type": "address[]"
        }
      ],
      "name": "SupportedBridgesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CBRIDGE_PROVIDER_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "bridges",
      "outputs": [
        {
          "internalType": "contract IBridgeAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "claimPocketFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "collectFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "dexFunc2Codec",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "chainId",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "dex",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ICodec.SwapDescription",
              "name": "swap",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "toChainId",
                  "type": "uint64"
                },
                {
                  "internalType": "string",
                  "name": "bridgeProvider",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "bridgeParams",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Types.BridgeInfo",
              "name": "bridge",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "remoteExecutionNode",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridgeOutToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bridgeOutFallbackToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bridgeOutMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bridgeOutFallbackMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeInBridgeOutToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeInBridgeOutFallbackToken",
              "type": "uint256"
            }
          ],
          "internalType": "struct Types.ExecutionInfo[]",
          "name": "_execs",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "chainId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "quoteSig",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "nativeIn",
              "type": "bool"
            }
          ],
          "internalType": "struct Types.SourceInfo",
          "name": "_src",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "chainId",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "nativeOut",
              "type": "bool"
            }
          ],
          "internalType": "struct Types.DestinationInfo",
          "name": "_dst",
          "type": "tuple"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "remainingValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "executeMessage",
      "outputs": [
        {
          "internalType": "enum IMessageReceiver.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "executeMessageWithTransferRefund",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_testMode",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nativeWrap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_dexList",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "_funcs",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "_codecs",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "_bridgeProviders",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "_bridgeAdapters",
          "type": "address[]"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageBus",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeWrap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_dexList",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "_funcs",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "_codecs",
          "type": "address[]"
        }
      ],
      "name": "setDexCodecs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "setFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_msgbus",
          "type": "address"
        }
      ],
      "name": "setMessageBus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nativeWrap",
          "type": "address"
        }
      ],
      "name": "setNativeWrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_providers",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "_adapters",
          "type": "address[]"
        }
      ],
      "name": "setSupportedBridges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9d120c69590930a04c285996031d1c03f28586b3de347b291e3aa71e509b943a",
  "receipt": {
    "to": null,
    "from": "0x9532f934EfcE6c4Bf5BA078b25fDd81a780FBdfB",
    "contractAddress": "0xE6543F543D8c20738c194DB3B65B96C52E4E9D8A",
    "transactionIndex": 10,
    "gasUsed": "4637621",
    "logsBloom": "0x
    "blockHash": "0xed32e06862f2fe4bac3bb3f25f958d7bcccd0fb2f5d810e45bfb16c9f7a1c389",
    "transactionHash": "0x9d120c69590930a04c285996031d1c03f28586b3de347b291e3aa71e509b943a",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 7926768,
        "transactionHash": "0x9d120c69590930a04c285996031d1c03f28586b3de347b291e3aa71e509b943a",
        "address": "0xE6543F543D8c20738c194DB3B65B96C52E4E9D8A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009532f934efce6c4bf5ba078b25fdd81a780fbdfb"
        ],
        "data": "0x",
        "logIndex": 26,
        "blockHash": "0xed32e06862f2fe4bac3bb3f25f958d7bcccd0fb2f5d810e45bfb16c9f7a1c389"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 7926768,
        "transactionHash": "0x9d120c69590930a04c285996031d1c03f28586b3de347b291e3aa71e509b943a",
        "address": "0xE6543F543D8c20738c194DB3B65B96C52E4E9D8A",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8"
        ],
        "data": "0x0000000000000000000000009532f934efce6c4bf5ba078b25fdd81a780fbdfb",
        "logIndex": 27,
        "blockHash": "0xed32e06862f2fe4bac3bb3f25f958d7bcccd0fb2f5d810e45bfb16c9f7a1c389"
      }
    ],
    "blockNumber": 7926768,
    "cumulativeGasUsed": "5704671",
    "status": 1,
    "byzantium": true
  },
  "args": [
    false,
    "0xF25170F86E4291a99a9A560032Fe9948b8BcFBB2",
    "0xf988115c8F584aABeea99B77239d56443AB03A77"
  ],
  "numDeployments": 5,
  "solcInputHash": "68e60a224fc4a34f17bd830208f07f82",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_testMode\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeWrap\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"codec\",\"type\":\"address\"}],\"name\":\"DexCodecUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messageBus\",\"type\":\"address\"}],\"name\":\"MessageBusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nativeWrap\",\"type\":\"address\"}],\"name\":\"NativeWrapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"erc20Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeAmount\",\"type\":\"uint256\"}],\"name\":\"PocketFundClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SignerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"StepExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"providers\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"name\":\"SupportedBridgesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CBRIDGE_PROVIDER_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bridges\",\"outputs\":[{\"internalType\":\"contract IBridgeAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimPocketFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"dexFunc2Codec\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ICodec.SwapDescription\",\"name\":\"swap\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"toChainId\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"bridgeProvider\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"bridgeParams\",\"type\":\"bytes\"}],\"internalType\":\"struct Types.BridgeInfo\",\"name\":\"bridge\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"remoteExecutionNode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeOutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeOutFallbackToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bridgeOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bridgeOutFallbackMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeInBridgeOutToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeInBridgeOutFallbackToken\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.ExecutionInfo[]\",\"name\":\"_execs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"quoteSig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"nativeIn\",\"type\":\"bool\"}],\"internalType\":\"struct Types.SourceInfo\",\"name\":\"_src\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"nativeOut\",\"type\":\"bool\"}],\"internalType\":\"struct Types.DestinationInfo\",\"name\":\"_dst\",\"type\":\"tuple\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingValue\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[{\"internalType\":\"enum IMessageReceiver.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"executeMessageWithTransferRefund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_testMode\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeWrap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_dexList\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_funcs\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_codecs\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_bridgeProviders\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_bridgeAdapters\",\"type\":\"address[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeWrap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_dexList\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_funcs\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_codecs\",\"type\":\"address[]\"}],\"name\":\"setDexCodecs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_msgbus\",\"type\":\"address\"}],\"name\":\"setMessageBus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nativeWrap\",\"type\":\"address\"}],\"name\":\"setNativeWrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_providers\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_adapters\",\"type\":\"address[]\"}],\"name\":\"setSupportedBridges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Chainhop Dex TeamPadoriku\",\"kind\":\"dev\",\"methods\":{\"execute(bytes32,(uint64,(address,bytes),(uint64,string,bytes),address,address,address,uint256,uint256,uint256,uint256)[],(uint64,uint64,uint64,bytes,uint256,address,bool),(uint64,address,bool))\":{\"params\":{\"_dst\":\"the receiving info of the entire operation\",\"_execs\":\"contains info that tells this contract how to collect a part of the bridge token received as fee and how to swap can be omitted on the source chain if there is no swaps to execute\",\"_id\":\"an id that is unique per user-swap. persistent for the entire operation. also used as salt for the pocket contract id = keccak256(abi.encodePacked(sender, receiver, nonce))\",\"_src\":\"info that is processed on the source chain. only required on the source chain and should not be populated on subsequent hops\"}},\"executeMessage(address,uint64,bytes,address)\":{\"params\":{\"_message\":\"the message that contains the remaining swap-bridge combos to be executed\"},\"returns\":{\"_0\":\"executionStatus always success if no reverts to let the MessageBus know that the message is processed\"}},\"executeMessageWithTransferRefund(address,uint256,bytes)\":{\"params\":{\"_amount\":\"The amount of the original transfer\",\"_message\":\"The same message associated with the original transfer\",\"_token\":\"The token address of the original transfer\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"a route execution contract\",\"version\":1},\"userdoc\":{\"events\":{\"StepExecuted(bytes32,uint256,address)\":{\"notice\":\"Emitted when operations on dst chain is done.\"}},\"kind\":\"user\",\"methods\":{\"execute(bytes32,(uint64,(address,bytes),(uint64,string,bytes),address,address,address,uint256,uint256,uint256,uint256)[],(uint64,uint64,uint64,bytes,uint256,address,bool),(uint64,address,bool))\":{\"notice\":\"executes a swap-bridge combo and relays the next swap-bridge combo to the next chain (if any)\"},\"executeMessage(address,uint64,bytes,address)\":{\"notice\":\"called by cBridge MessageBus and then simply calls execute() to carry on the executions\"},\"executeMessageWithTransferRefund(address,uint256,bytes)\":{\"notice\":\"Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\"}},\"notice\":\"a few key concepts about how the chain of execution works: - a \\\"swap-bridge execution combo\\\" (Types.ExecutionInfo) is a node in the execution chain - a node be swap-only, bridge-only, or swap-bridge - a message is an edge in the execution chain, it carries the remaining swap-bridge combos to the next node - execute() executes a swap-bridge combo and determines if the current node is the final one by looking at Types.DestinationInfo - executeMessage() is called on the intermediate nodes by chainhop's executor. it simply calls execute() to advance the execution chain - a \\\"pocket\\\" is a counterfactual contract of which the address is determined at quote-time by chainhop's pathfinder server with using the id as salt. the actual pocket contract deployment is done at execution time by the the ExecutionNode on that chain\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExecutionNode.sol\":\"ExecutionNode\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/BridgeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./interfaces/IBridgeAdapter.sol\\\";\\n\\n/**\\n * @title Manages a list of supported bridges\\n * @author lionelhoho\\n * @author Padoriku\\n */\\nabstract contract BridgeRegistry is Ownable, Initializable {\\n    event SupportedBridgesUpdated(string[] providers, address[] adapters);\\n\\n    bytes32 public constant CBRIDGE_PROVIDER_HASH = keccak256(bytes(\\\"cbridge\\\"));\\n\\n    mapping(bytes32 => IBridgeAdapter) public bridges;\\n\\n    function initBridgeRegistry(string[] memory _providers, address[] memory _adapters) internal onlyInitializing {\\n        _setSupportedbridges(_providers, _adapters);\\n    }\\n\\n    // to disable a bridge, set the bridge addr of the corresponding provider to address(0)\\n    function setSupportedBridges(string[] memory _providers, address[] memory _adapters) external onlyOwner {\\n        _setSupportedbridges(_providers, _adapters);\\n    }\\n\\n    function _setSupportedbridges(string[] memory _providers, address[] memory _adapters) private {\\n        require(_providers.length == _adapters.length, \\\"params size mismatch\\\");\\n        for (uint256 i = 0; i < _providers.length; i++) {\\n            bridges[keccak256(bytes(_providers[i]))] = IBridgeAdapter(_adapters[i]);\\n        }\\n        emit SupportedBridgesUpdated(_providers, _adapters);\\n    }\\n}\\n\",\"keccak256\":\"0xf3a4561011ccd539197e0292026c54633afc156db4faee253f70cf808ab8510d\",\"license\":\"GPL-3.0-only\"},\"contracts/DexRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./interfaces/ICodec.sol\\\";\\n\\n/**\\n * @title Manages a list supported dex\\n * @author Padoriku\\n */\\nabstract contract DexRegistry is Ownable, Initializable {\\n    event DexCodecUpdated(address dex, bytes4 selector, address codec);\\n\\n    // supported swap functions\\n    // 0x3df02124 exchange(int128,int128,uint256,uint256)\\n    // 0xa6417ed6 exchange_underlying(int128,int128,uint256,uint256)\\n    // 0x44ee1986 exchange_underlying(int128,int128,uint256,uint256,address)\\n    // 0x38ed1739 swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\\n    // 0xc04b8d59 exactInput((bytes,address,uint256,uint256,uint256))\\n    // 0xb0431182 clipperSwap(address,address,uint256,uint256)\\n    // 0xe449022e uniswapV3Swap(uint256,uint256,uint256[])\\n    // 0x2e95b6c8 unoswap(address,uint256,uint256,bytes32[])\\n    // 0x7c025200 swap(address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes)\\n    // 0xd0a3b665 fillOrderRFQ((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256)\\n    mapping(address => mapping(bytes4 => address)) public dexFunc2Codec;\\n\\n    function initDexRegistry(\\n        address[] memory _dexList,\\n        string[] memory _funcs,\\n        address[] memory _codecs\\n    ) internal onlyInitializing {\\n        _setDexCodecs(_dexList, _funcs, _codecs);\\n    }\\n\\n    function setDexCodecs(\\n        address[] memory _dexList,\\n        string[] memory _funcs,\\n        address[] memory _codecs\\n    ) external onlyOwner {\\n        _setDexCodecs(_dexList, _funcs, _codecs);\\n    }\\n\\n    function _setDexCodecs(\\n        address[] memory _dexList,\\n        string[] memory _funcs,\\n        address[] memory _codecs\\n    ) private {\\n        for (uint256 i = 0; i < _dexList.length; i++) {\\n            bytes4 selector = bytes4(keccak256(bytes(_funcs[i])));\\n            _setDexCodec(_dexList[i], selector, _codecs[i]);\\n        }\\n    }\\n\\n    function _setDexCodec(\\n        address _dex,\\n        bytes4 _selector,\\n        address _codec\\n    ) private {\\n        address codec = dexFunc2Codec[_dex][_selector];\\n        require(codec != _codec, \\\"nop\\\");\\n        dexFunc2Codec[_dex][_selector] = _codec;\\n        emit DexCodecUpdated(_dex, _selector, _codec);\\n    }\\n\\n    function getCodec(address _dex, bytes4 _selector) internal view returns (ICodec) {\\n        require(dexFunc2Codec[_dex][_selector] != address(0), \\\"unsupported dex\\\");\\n        return ICodec(dexFunc2Codec[_dex][_selector]);\\n    }\\n}\\n\",\"keccak256\":\"0x354e2e899bff6fdeffe496e0d5fc6d8e1ead97cc1424a60a40c2846b604a1e58\",\"license\":\"GPL-3.0-only\"},\"contracts/ExecutionNode.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./lib/Types.sol\\\";\\nimport \\\"./lib/MessageReceiver.sol\\\";\\nimport \\\"./lib/Pauser.sol\\\";\\nimport \\\"./lib/NativeWrap.sol\\\";\\nimport \\\"./lib/Bytes.sol\\\";\\n\\nimport \\\"./interfaces/IBridgeAdapter.sol\\\";\\nimport \\\"./interfaces/ICodec.sol\\\";\\nimport \\\"./interfaces/IExecutionNodeEvents.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IMessageBus.sol\\\";\\n\\nimport \\\"./BridgeRegistry.sol\\\";\\nimport \\\"./FeeOperator.sol\\\";\\nimport \\\"./SigVerifier.sol\\\";\\nimport \\\"./Pocket.sol\\\";\\nimport \\\"./DexRegistry.sol\\\";\\n\\n/**\\n * @author Chainhop Dex Team\\n * @author Padoriku\\n * @title a route execution contract\\n * @notice\\n * a few key concepts about how the chain of execution works:\\n * - a \\\"swap-bridge execution combo\\\" (Types.ExecutionInfo) is a node in the execution chain\\n * - a node be swap-only, bridge-only, or swap-bridge\\n * - a message is an edge in the execution chain, it carries the remaining swap-bridge combos to the next node\\n * - execute() executes a swap-bridge combo and determines if the current node is the final one by looking at Types.DestinationInfo\\n * - executeMessage() is called on the intermediate nodes by chainhop's executor. it simply calls execute() to advance the execution chain\\n * - a \\\"pocket\\\" is a counterfactual contract of which the address is determined at quote-time by chainhop's pathfinder server with using\\n * the id as salt. the actual pocket contract deployment is done at execution time by the the ExecutionNode on that chain\\n */\\ncontract ExecutionNode is\\n    IExecutionNodeEvents,\\n    MessageReceiver,\\n    DexRegistry,\\n    BridgeRegistry,\\n    SigVerifier,\\n    FeeOperator,\\n    NativeWrap,\\n    ReentrancyGuard,\\n    Pauser\\n{\\n    using SafeERC20 for IERC20;\\n    using ECDSA for bytes32;\\n    using Bytes for bytes;\\n\\n    constructor(\\n        bool _testMode,\\n        address _messageBus,\\n        address _nativeWrap\\n    ) MessageReceiver(_testMode, _messageBus) NativeWrap(_nativeWrap) {}\\n\\n    // init() can only be called once during the first deployment of the proxy contract.\\n    // any subsequent changes to the proxy contract's state must be done through their respective set methods via owner key.\\n    function init(\\n        bool _testMode,\\n        address _messageBus,\\n        address _nativeWrap,\\n        address _signer,\\n        address _feeCollector,\\n        address[] memory _dexList,\\n        string[] memory _funcs,\\n        address[] memory _codecs,\\n        string[] memory _bridgeProviders,\\n        address[] memory _bridgeAdapters\\n    ) external initializer {\\n        initMessageReceiver(_testMode, _messageBus);\\n        initDexRegistry(_dexList, _funcs, _codecs);\\n        initBridgeRegistry(_bridgeProviders, _bridgeAdapters);\\n        initSigVerifier(_signer);\\n        initFeeOperator(_feeCollector);\\n        initNativeWrap(_nativeWrap);\\n    }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     * Core\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n\\n    /**\\n     * @notice executes a swap-bridge combo and relays the next swap-bridge combo to the next chain (if any)\\n     * @param _id an id that is unique per user-swap. persistent for the entire operation. also used as salt for the pocket contract\\n     * id = keccak256(abi.encodePacked(sender, receiver, nonce))\\n     * @param _execs contains info that tells this contract how to collect a part of the bridge token\\n     * received as fee and how to swap can be omitted on the source chain if there is no swaps to execute\\n     * @param _src info that is processed on the source chain. only required on the source chain and should not be populated on subsequent hops\\n     * @param _dst the receiving info of the entire operation\\n     */\\n    function execute(\\n        bytes32 _id,\\n        Types.ExecutionInfo[] memory _execs,\\n        Types.SourceInfo memory _src,\\n        Types.DestinationInfo memory _dst\\n    ) public payable nonReentrant whenNotPaused returns (uint256 remainingValue) {\\n        require(_execs.length > 0, \\\"nop\\\");\\n\\n        Types.ExecutionInfo memory exec;\\n        (exec, _execs) = _popFirst(_execs);\\n\\n        remainingValue = msg.value;\\n\\n        // pull funds\\n        uint256 amountIn;\\n        address tokenIn;\\n        if (_src.chainId == _chainId()) {\\n            // if there are more executions on other chains, verify sig so that we are sure the fees\\n            // to be collected will not be tempered with when we run those executions\\n            // note that quote sig verification is only done on the src chain. the security of each\\n            // subsequent execution's fee collection is dependant on the security of cbridge's IM\\n            if (_execs.length > 0) {\\n                _verify(_execs, _src, _dst);\\n            }\\n            (amountIn, tokenIn) = _pullFundFromSender(_src);\\n            if (_src.nativeIn) {\\n                remainingValue -= amountIn;\\n            }\\n        } else {\\n            (amountIn, tokenIn) = _pullFundFromPocket(_id, exec);\\n            // if amountIn is 0 after deducting fee, this contract keeps all amountIn as fee and\\n            // ends the execution\\n            if (amountIn == 0) {\\n                emit StepExecuted(_id, 0, tokenIn);\\n                return remainingValue;\\n            }\\n            // refund immediately if receives bridge out fallback token\\n            if (tokenIn == exec.bridgeOutFallbackToken) {\\n                _sendToken(tokenIn, amountIn, _dst.receiver, false);\\n                emit StepExecuted(_id, amountIn, tokenIn);\\n                return remainingValue;\\n            }\\n        }\\n\\n        // process swap if any\\n        uint256 nextAmount = amountIn;\\n        address nextToken = tokenIn;\\n        if (exec.swap.dex != address(0)) {\\n            bool success = true;\\n            (success, nextAmount, nextToken) = _executeSwap(exec.swap, amountIn, tokenIn);\\n            if (_src.chainId == _chainId()) require(success, \\\"swap fail\\\");\\n            // refund immediately if swap fails\\n            if (!success) {\\n                _sendToken(tokenIn, amountIn, _dst.receiver, false);\\n                emit StepExecuted(_id, amountIn, tokenIn);\\n                return remainingValue;\\n            }\\n        }\\n\\n        // pay receiver if this is the last execution step\\n        if (_dst.chainId == _chainId()) {\\n            _sendToken(nextToken, nextAmount, _dst.receiver, _dst.nativeOut);\\n            emit StepExecuted(_id, nextAmount, nextToken);\\n            return remainingValue;\\n        }\\n\\n        // funds are bridged directly to the receiver if there are no subsequent executions on the destination chain.\\n        // otherwise, it's sent to a \\\"pocket\\\" contract addr to temporarily hold the fund before it is used for swapping.\\n        address bridgeOutReceiver = (_execs.length > 0) ? _getPocketAddr(_id, exec.remoteExecutionNode) : _dst.receiver;\\n        uint256 refundMsgFee = _bridgeSend(\\n            exec.bridge.toChainId,\\n            keccak256(bytes(exec.bridge.bridgeProvider)),\\n            exec.bridge.bridgeParams,\\n            bridgeOutReceiver,\\n            nextToken,\\n            nextAmount\\n        );\\n        remainingValue -= refundMsgFee;\\n\\n        // if there are more execution steps left, pack them and send to the next chain\\n        if (_execs.length > 0) {\\n            bytes memory message = abi.encode(Types.Message({id: _id, execs: _execs, dst: _dst}));\\n            uint256 msgFee = IMessageBus(messageBus).calcFee(message);\\n            remainingValue -= msgFee;\\n            IMessageBus(messageBus).sendMessage{value: msgFee}(\\n                exec.remoteExecutionNode,\\n                exec.bridge.toChainId,\\n                message\\n            );\\n        }\\n\\n        emit StepExecuted(_id, nextAmount, nextToken);\\n    }\\n\\n    /**\\n     * @notice called by cBridge MessageBus and then simply calls execute() to carry on the executions\\n     * @param _message the message that contains the remaining swap-bridge combos to be executed\\n     * @return executionStatus always success if no reverts to let the MessageBus know that the message is processed\\n     */\\n    function executeMessage(\\n        address, // _sender\\n        uint64, // _srcChainId\\n        bytes memory _message,\\n        address // _executor\\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\\n        Types.Message memory message = abi.decode((_message), (Types.Message));\\n        uint256 remainingValue = execute(message.id, message.execs, Types.emptySourceInfo(), message.dst);\\n        // chainhop executor would always send a set amount of native token when calling messagebus's executeMessage().\\n        // these tokens cover the fee introduced by chaining another message when there are more bridging.\\n        // refunding the unspent native tokens back to the executor\\n        if (remainingValue > 0) {\\n            (bool ok, ) = tx.origin.call{value: remainingValue}(\\\"\\\");\\n            require(ok, \\\"failed to refund remaining native token\\\");\\n        }\\n        return ExecutionStatus.Success;\\n    }\\n\\n    // the receiver of a swap is entitled to all the funds in the pocket. as long as someone can prove\\n    // that they are the receiver of a swap, they can always recreate the pocket contract and claim the\\n    // funds inside.\\n    function claimPocketFund(\\n        address _sender,\\n        address _receiver,\\n        uint64 _nonce,\\n        address _token\\n    ) external {\\n        // id ensures that only the designated receiver of a swap can claim funds from the designated pocket of a swap\\n        bytes32 id = _computeId(_sender, _receiver, _nonce);\\n\\n        Pocket pocket = new Pocket{salt: id}();\\n        uint256 erc20Amount = IERC20(_token).balanceOf(address(pocket));\\n        uint256 nativeAmount = address(pocket).balance;\\n        require(erc20Amount > 0 || nativeAmount > 0, \\\"pocket is empty\\\");\\n\\n        // this claims both _token and native\\n        pocket.claim(_token, erc20Amount);\\n\\n        if (erc20Amount > 0) {\\n            IERC20(_token).safeTransfer(_receiver, erc20Amount);\\n        }\\n        if (nativeAmount > 0) {\\n            (bool ok, ) = _receiver.call{value: nativeAmount, gas: 50000}(\\\"\\\");\\n            require(ok, \\\"failed to send native\\\");\\n        }\\n        emit PocketFundClaimed(_receiver, erc20Amount, _token, nativeAmount);\\n    }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     * Misc\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n    function _computeId(\\n        address _sender,\\n        address _dstReceiver,\\n        uint64 _nonce\\n    ) private pure returns (bytes32) {\\n        // the main purpose of this id is to uniquely identify a user-swap.\\n        return keccak256(abi.encodePacked(_sender, _dstReceiver, _nonce));\\n    }\\n\\n    function _pullFundFromSender(Types.SourceInfo memory _src) private returns (uint256 amount, address token) {\\n        if (_src.nativeIn) {\\n            require(_src.tokenIn == nativeWrap, \\\"tokenIn not nativeWrap\\\");\\n            require(msg.value >= _src.amountIn, \\\"insufficient native amount\\\");\\n            IWETH(nativeWrap).deposit{value: _src.amountIn}();\\n        } else {\\n            IERC20(_src.tokenIn).safeTransferFrom(msg.sender, address(this), _src.amountIn);\\n        }\\n        return (_src.amountIn, _src.tokenIn);\\n    }\\n\\n    function _pullFundFromPocket(bytes32 _id, Types.ExecutionInfo memory _exec)\\n        private\\n        returns (uint256 amount, address token)\\n    {\\n        Pocket pocket = new Pocket{salt: _id}();\\n\\n        uint256 fallbackAmount;\\n        if (_exec.bridgeOutFallbackToken != address(0)) {\\n            fallbackAmount = IERC20(_exec.bridgeOutFallbackToken).balanceOf(address(pocket)); // e.g. hToken/anyToken\\n        }\\n        uint256 erc20Amount = IERC20(_exec.bridgeOutToken).balanceOf(address(pocket));\\n        uint256 nativeAmount = address(pocket).balance;\\n\\n        // if the pocket does not have bridgeOutMin, we consider the transfer not arrived yet. in\\n        // this case we tell the msgbus to revert the outter tx using the MSG::ABORT: prefix and\\n        // our executor will retry sending this tx later.\\n        //\\n        // this bridgeOutMin is also a counter-measure to a DoS attack vector. if we assume the bridge\\n        // funds have arrived once we see a balance in the pocket, an attacker can deposit a small\\n        // amount of fund into the pocket and confuse this contract that the bridged fund has arrived.\\n        // this triggers the refund logic branch and thus denying the dst swap for the victim.\\n        // bridgeOutMin is determined by the server before sending out the transfer.\\n        // bridgeOutMin = R * bridgeAmountIn where R is an arbitrary ratio that we feel effective in\\n        // raising the attacker's attack cost.\\n        //\\n        // note that in case the bridging actually results in a huge slippage, the user can always call\\n        // claimPocketFund to collect the bridge out tokens as a refund.\\n        require(\\n            erc20Amount > _exec.bridgeOutMin ||\\n                nativeAmount > _exec.bridgeOutMin ||\\n                fallbackAmount > _exec.bridgeOutFallbackMin,\\n            \\\"MSG::ABORT:pocket is empty\\\"\\n        );\\n        if (fallbackAmount > 0) {\\n            pocket.claim(_exec.bridgeOutFallbackToken, fallbackAmount);\\n            amount = _deductFee(_exec.feeInBridgeOutFallbackToken, fallbackAmount);\\n            token = _exec.bridgeOutFallbackToken;\\n        } else {\\n            pocket.claim(_exec.bridgeOutToken, erc20Amount);\\n            if (erc20Amount > 0) {\\n                amount = _deductFee(_exec.feeInBridgeOutToken, erc20Amount);\\n            } else if (nativeAmount > 0) {\\n                require(_exec.bridgeOutToken == nativeWrap, \\\"bridgeOutToken not nativeWrap\\\");\\n                amount = _deductFee(_exec.feeInBridgeOutToken, nativeAmount);\\n                IWETH(_exec.bridgeOutToken).deposit{value: amount}();\\n            }\\n            token = _exec.bridgeOutToken;\\n        }\\n    }\\n\\n    function _getPocketAddr(bytes32 _salt, address _deployer) private pure returns (address) {\\n        // how to predict a create2 address:\\n        // https://docs.soliditylang.org/en/v0.8.17/control-structures.html?highlight=create2#salted-contract-creations-create2\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(bytes1(0xff), _deployer, _salt, keccak256(type(Pocket).creationCode))\\n        );\\n        return address(uint160(uint256(hash)));\\n    }\\n\\n    function _deductFee(uint256 _fee, uint256 _amount) private pure returns (uint256 amount) {\\n        // handle the case where amount received is not enough to pay fee\\n        if (_amount >= _fee) {\\n            amount = _amount - _fee;\\n        }\\n    }\\n\\n    function _bridgeSend(\\n        uint64 _toChainId,\\n        bytes32 _bridgeProvider,\\n        bytes memory _bridgeParams,\\n        address _receiver,\\n        address _token,\\n        uint256 _amount\\n    ) private returns (uint256 refundMsgFee) {\\n        IBridgeAdapter bridge = bridges[_bridgeProvider];\\n        if (_bridgeProvider == CBRIDGE_PROVIDER_HASH) {\\n            // special handling for dealing with cbridge's refund mechnism: cbridge adapter always\\n            // sends a message that contains only the receiver addr along with the transfer. this way\\n            // when refund happens we can execute the executeMessageWithTransferRefund function in\\n            // cbridge adapter to refund to the receiver\\n            refundMsgFee = IMessageBus(messageBus).calcFee(abi.encode(_receiver));\\n        }\\n        IERC20(_token).safeIncreaseAllowance(address(bridge), _amount);\\n        bridge.bridge{value: refundMsgFee}(_toChainId, _receiver, _amount, _token, _bridgeParams);\\n    }\\n\\n    function _executeSwap(\\n        ICodec.SwapDescription memory _swap,\\n        uint256 _amountIn,\\n        address _tokenIn\\n    )\\n        private\\n        returns (\\n            bool ok,\\n            uint256 amountOut,\\n            address tokenOut\\n        )\\n    {\\n        if (_swap.dex == address(0)) {\\n            // nop swap\\n            return (true, _amountIn, _tokenIn);\\n        }\\n        bytes4 selector = bytes4(_swap.data);\\n        ICodec codec = getCodec(_swap.dex, selector);\\n        address tokenIn;\\n        (, tokenIn, tokenOut) = codec.decodeCalldata(_swap);\\n        require(tokenIn == _tokenIn, \\\"swap info mismatch\\\");\\n\\n        bytes memory data = codec.encodeCalldataWithOverride(_swap.data, _amountIn, address(this));\\n        IERC20(tokenIn).safeIncreaseAllowance(_swap.dex, _amountIn);\\n        uint256 balBefore = IERC20(tokenOut).balanceOf(address(this));\\n        (bool success, ) = _swap.dex.call(data);\\n        if (!success) {\\n            return (false, 0, tokenOut);\\n        }\\n        uint256 balAfter = IERC20(tokenOut).balanceOf(address(this));\\n        return (true, balAfter - balBefore, tokenOut);\\n    }\\n\\n    function _sendToken(\\n        address _token,\\n        uint256 _amount,\\n        address _receiver,\\n        bool _nativeOut\\n    ) private {\\n        if (_nativeOut) {\\n            require(_token == nativeWrap, \\\"token is not nativeWrap\\\");\\n            IWETH(nativeWrap).withdraw(_amount);\\n            (bool sent, ) = _receiver.call{value: _amount, gas: 50000}(\\\"\\\");\\n            require(sent, \\\"send fail\\\");\\n        } else {\\n            IERC20(_token).safeTransfer(_receiver, _amount);\\n        }\\n    }\\n\\n    function _popFirst(Types.ExecutionInfo[] memory _execs)\\n        private\\n        pure\\n        returns (Types.ExecutionInfo memory first, Types.ExecutionInfo[] memory rest)\\n    {\\n        require(_execs.length > 0, \\\"empty execs\\\");\\n        first = _execs[0];\\n        rest = new Types.ExecutionInfo[](_execs.length - 1);\\n        for (uint256 i = 1; i < _execs.length; i++) {\\n            rest[i - 1] = _execs[i];\\n        }\\n    }\\n\\n    function _verify(\\n        Types.ExecutionInfo[] memory _execs, // all execs except the one on the src chain\\n        Types.SourceInfo memory _src,\\n        Types.DestinationInfo memory _dst\\n    ) private view {\\n        require(_src.deadline > block.timestamp, \\\"deadline exceeded\\\");\\n        bytes memory data = abi.encodePacked(\\n            \\\"chainhop quote\\\",\\n            uint64(block.chainid),\\n            _dst.chainId,\\n            _src.amountIn,\\n            _src.tokenIn,\\n            _src.deadline\\n        );\\n        for (uint256 i = 0; i < _execs.length; i++) {\\n            Types.ExecutionInfo memory e = _execs[i];\\n            // bridged tokens and the chain id of the execution are encoded in the sig data so that\\n            // no malicious user can temper the fee they have to pay on any execution steps\\n            bytes memory execData = abi.encodePacked(\\n                e.chainId,\\n                e.feeInBridgeOutToken,\\n                e.bridgeOutToken,\\n                e.feeInBridgeOutFallbackToken,\\n                e.bridgeOutFallbackToken\\n            );\\n            data = data.concat(execData);\\n        }\\n        bytes32 signHash = keccak256(data).toEthSignedMessageHash();\\n        verifySig(signHash, _src.quoteSig);\\n    }\\n\\n    function _chainId() private view returns (uint64) {\\n        return uint64(block.chainid);\\n    }\\n}\\n\",\"keccak256\":\"0x43418cabe0c63cc6a42572ba996537889ff8468ba40bd283064458d38bf29bc0\",\"license\":\"GPL-3.0-only\"},\"contracts/FeeOperator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Allows the owner to set fee collector and allows fee collectors to collect fees\\n * @author Padoriku\\n */\\nabstract contract FeeOperator is Ownable, Initializable {\\n    using SafeERC20 for IERC20;\\n\\n    address public feeCollector;\\n\\n    event FeeCollectorUpdated(address from, address to);\\n\\n    modifier onlyFeeCollector() {\\n        require(msg.sender == feeCollector, \\\"not fee collector\\\");\\n        _;\\n    }\\n\\n    function initFeeOperator(address _feeCollector) internal onlyInitializing {\\n        _setFeeCollector(_feeCollector);\\n    }\\n\\n    function collectFee(address[] calldata _tokens, address _to) external onlyFeeCollector {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            // use zero address to denote native token\\n            if (_tokens[i] == address(0)) {\\n                uint256 bal = address(this).balance;\\n                (bool sent, ) = _to.call{value: bal, gas: 50000}(\\\"\\\");\\n                require(sent, \\\"send native failed\\\");\\n            } else {\\n                uint256 balance = IERC20(_tokens[i]).balanceOf(address(this));\\n                IERC20(_tokens[i]).safeTransfer(_to, balance);\\n            }\\n        }\\n    }\\n\\n    function setFeeCollector(address _feeCollector) external onlyOwner {\\n        _setFeeCollector(_feeCollector);\\n    }\\n\\n    function _setFeeCollector(address _feeCollector) private {\\n        address oldFeeCollector = feeCollector;\\n        feeCollector = _feeCollector;\\n        emit FeeCollectorUpdated(oldFeeCollector, _feeCollector);\\n    }\\n}\\n\",\"keccak256\":\"0x69ada23ae3622f755eb7a3f516fb3e063c3dc3278c26d7ec47769649e81dd8ea\",\"license\":\"GPL-3.0-only\"},\"contracts/Pocket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.15;\\n\\n// the pocket is a contract that is to be created conterfactually on the dst chain in the scenario where\\n// there is a dst swap. the main problem the pocket tries to solve is to gain the ability to know when and\\n// by how much the bridged tokens are received.\\n// when chainhop backend builds a cross-chain swap, it calculates a swap id (see _computeSwapId in\\n// ExecutionNode) and the id is used as the salt in generating a pocket address on the dst chain.\\n// this address is then assigned as the receiver of the bridge out tokens on the dst chain to temporarily\\n// hold the funds until the actual pocket contract is deployed at the exact address during the message execution.\\ncontract Pocket {\\n    function claim(address _token, uint256 _amt) external {\\n        address sender = msg.sender;\\n        _token.call(abi.encodeWithSelector(0xa9059cbb, sender, _amt));\\n        assembly {\\n            // selfdestruct sends all native balance to sender\\n            selfdestruct(sender)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1bd686baa02f538fb8a26428d605ab04180995f8aae237f3ea71171bca83760b\",\"license\":\"GPL-3.0-only\"},\"contracts/SigVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Allows owner to set signer, and verifies signatures\\n * @author Padoriku\\n */\\ncontract SigVerifier is Ownable, Initializable {\\n    using ECDSA for bytes32;\\n\\n    address public signer;\\n\\n    event SignerUpdated(address from, address to);\\n\\n    function initSigVerifier(address _signer) internal onlyInitializing {\\n        _setSigner(_signer);\\n    }\\n\\n    function setSigner(address _signer) public onlyOwner {\\n        _setSigner(_signer);\\n    }\\n\\n    function _setSigner(address _signer) private {\\n        address oldSigner = signer;\\n        signer = _signer;\\n        emit SignerUpdated(oldSigner, _signer);\\n    }\\n\\n    function verifySig(bytes32 _hash, bytes memory _feeSig) internal view {\\n        address _signer = _hash.recover(_feeSig);\\n        require(_signer == signer, \\\"invalid signer\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5565150b50f2a15a91c6d79bb6b68c820a63452e98561191165c18f1b02f4949\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IBridgeAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\ninterface IBridgeAdapter {\\n    function bridge(\\n        uint64 _dstChainId,\\n        // the address that the fund is transfered to on the destination chain\\n        address _receiver,\\n        uint256 _amount,\\n        address _token,\\n        // Bridge transfers quoted and abi encoded by chainhop backend server.\\n        // Bridge adapter implementations need to decode this themselves.\\n        bytes memory _bridgeParams\\n    ) external payable returns (bytes memory bridgeResp);\\n}\\n\",\"keccak256\":\"0xbf85eb8c91c925c94841e1cc02fe129c3fe3c071a8293d35248eaccffc737504\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ICodec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface ICodec {\\n    struct SwapDescription {\\n        address dex; // the DEX to use for the swap, zero address implies no swap needed\\n        bytes data; // the data to call the dex with\\n    }\\n\\n    function decodeCalldata(SwapDescription calldata swap)\\n        external\\n        view\\n        returns (\\n            uint256 amountIn,\\n            address tokenIn,\\n            address tokenOut\\n        );\\n\\n    function encodeCalldataWithOverride(\\n        bytes calldata data,\\n        uint256 amountInOverride,\\n        address receiverOverride\\n    ) external pure returns (bytes memory swapCalldata);\\n}\\n\",\"keccak256\":\"0x3c063f0ffd87df3df38998c78273bc00ac835331905be997c7e3c6aa3bdbdcc4\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IExecutionNodeEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../lib/Types.sol\\\";\\n\\ninterface IExecutionNodeEvents {\\n    /**\\n     * @notice Emitted when operations on dst chain is done.\\n     * @param id see _computeId()\\n     * @param amountOut the amount of tokenOut from this step\\n     * @param tokenOut the token that is outputted from this step\\n     */\\n    event StepExecuted(bytes32 id, uint256 amountOut, address tokenOut);\\n\\n    event PocketFundClaimed(address receiver, uint256 erc20Amount, address token, uint256 nativeAmount);\\n}\\n\",\"keccak256\":\"0xaa250b30a774113715b997fa49f9877d8486d0f05b3b29c04d7d49aed30b2f06\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IMessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../lib/MsgDataTypes.sol\\\";\\n\\ninterface IMessageBus {\\n    event Executed(\\n        MsgDataTypes.MsgType msgType,\\n        bytes32 msgId,\\n        MsgDataTypes.TxStatus status,\\n        address indexed receiver,\\n        uint64 srcChainId,\\n        bytes32 srcTxHash\\n    );\\n\\n    function liquidityBridge() external view returns (address);\\n\\n    function pegBridge() external view returns (address);\\n\\n    function pegBridgeV2() external view returns (address);\\n\\n    function pegVault() external view returns (address);\\n\\n    function pegVaultV2() external view returns (address);\\n\\n    function feeBase() external view returns (uint256);\\n\\n    function feePerByte() external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the required fee for the message.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     @ @return The required fee.\\n     */\\n    function calcFee(bytes calldata _message) external view returns (uint256);\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native gas token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Sends a message associated with a transfer to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _srcBridge The bridge contract to send the transfer with.\\n     * @param _srcTransferId The transfer ID.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        address _srcBridge,\\n        bytes32 _srcTransferId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdrawFee(\\n        address _account,\\n        uint256 _cumulativeFee,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Execute a message with a successful transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransfer(\\n        bytes calldata _message,\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message with a refunded transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransferRefund(\\n        bytes calldata _message, // the same message associated with the original transfer\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message not associated with a transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessage(\\n        bytes calldata _message,\\n        MsgDataTypes.RouteInfo calldata _route,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x7b87c0bf4c9621809dedad54deb3aa7991a4ccef8be3693545e1516ad5904648\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessageReceiver {\\n    enum ExecutionStatus {\\n        Fail, // execution failed, finalized\\n        Success, // execution succeeded, finalized\\n        Retry // execution rejected, can retry later\\n    }\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver)\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x15d920153621fd56bae5067ca6347ebfc19fa49bbcde593be1e3b0309ba44b29\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x4af2aca7cbf87734e6ae30d3027baaddba6351f46e1ddbd155887a07ec85c2c2\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nlibrary Bytes {\\n    uint256 internal constant WORD_SIZE = 32;\\n\\n    function concat(bytes memory self, bytes memory other) internal pure returns (bytes memory) {\\n        bytes memory ret = new bytes(self.length + other.length);\\n        (uint256 src, uint256 srcLen) = fromBytes(self);\\n        (uint256 src2, uint256 src2Len) = fromBytes(other);\\n        (uint256 dest, ) = fromBytes(ret);\\n        uint256 dest2 = dest + srcLen;\\n        copy(src, dest, srcLen);\\n        copy(src2, dest2, src2Len);\\n        return ret;\\n    }\\n\\n    function fromBytes(bytes memory bts) internal pure returns (uint256 addr, uint256 len) {\\n        len = bts.length;\\n        assembly {\\n            addr := add(bts, 32)\\n        }\\n    }\\n\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) internal pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += WORD_SIZE;\\n            src += WORD_SIZE;\\n        }\\n\\n        if (len == 0) return;\\n\\n        // Copy remaining bytes\\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x176bb7f5d6108fcdff2b9e74eaf2c529e25b00869eed4fb1b774f6a28edeea95\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/MessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IMessageReceiver.sol\\\";\\n\\nabstract contract MessageReceiver is IMessageReceiver, Ownable, Initializable {\\n    event MessageBusUpdated(address messageBus);\\n\\n    // testMode is used for the ease of testing functions with the \\\"onlyMessageBus\\\" modifier.\\n    // WARNING: when testMode is true, ANYONE can call executeMessage functions\\n    // this variable can only be set during contract construction and is always not set on mainnets\\n    bool public testMode;\\n\\n    address public messageBus;\\n\\n    constructor(bool _testMode, address _messageBus) {\\n        testMode = _testMode;\\n        messageBus = _messageBus;\\n    }\\n\\n    function initMessageReceiver(bool _testMode, address _msgbus) internal onlyInitializing {\\n        require(!_testMode || block.chainid == 31337); // only allow testMode on hardhat local network\\n        testMode = _testMode;\\n        messageBus = _msgbus;\\n        emit MessageBusUpdated(messageBus);\\n    }\\n\\n    function setMessageBus(address _msgbus) public onlyOwner {\\n        messageBus = _msgbus;\\n        emit MessageBusUpdated(messageBus);\\n    }\\n\\n    modifier onlyMessageBus() {\\n        if (!testMode) {\\n            require(msg.sender == messageBus, \\\"caller is not message bus\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver)\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual returns (ExecutionStatus) {}\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message\\n    ) external payable virtual returns (bool) {}\\n}\\n\",\"keccak256\":\"0x86902885ca3c809bbf946d4abc7c3b1c17bee72b817a8f33c8d28a08be1876c2\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/MsgDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nlibrary MsgDataTypes {\\n    // bridge operation type at the sender side (src chain)\\n    enum BridgeSendType {\\n        Null,\\n        Liquidity,\\n        PegDeposit,\\n        PegBurn,\\n        PegV2Deposit,\\n        PegV2Burn,\\n        PegV2BurnFrom\\n    }\\n\\n    // bridge operation type at the receiver side (dst chain)\\n    enum TransferType {\\n        Null,\\n        LqRelay, // relay through liquidity bridge\\n        LqWithdraw, // withdraw from liquidity bridge\\n        PegMint, // mint through pegged token bridge\\n        PegWithdraw, // withdraw from original token vault\\n        PegV2Mint, // mint through pegged token bridge v2\\n        PegV2Withdraw // withdraw from original token vault v2\\n    }\\n\\n    enum MsgType {\\n        MessageWithTransfer,\\n        MessageOnly\\n    }\\n\\n    enum TxStatus {\\n        Null,\\n        Success,\\n        Fail,\\n        Fallback,\\n        Pending // transient state within a transaction\\n    }\\n\\n    struct TransferInfo {\\n        TransferType t;\\n        address sender;\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        uint64 wdseq; // only needed for LqWithdraw (refund)\\n        uint64 srcChainId;\\n        bytes32 refId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct RouteInfo {\\n        address sender;\\n        address receiver;\\n        uint64 srcChainId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct MsgWithTransferExecutionParams {\\n        bytes message;\\n        TransferInfo transfer;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n\\n    struct BridgeTransferParams {\\n        bytes request;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n}\\n\",\"keccak256\":\"0x4a815c72988c56480d9b3e18f3f067a000d287342a58dc419a7a0c402994d05b\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/NativeWrap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract NativeWrap is Ownable, Initializable {\\n    address public nativeWrap;\\n\\n    event NativeWrapUpdated(address nativeWrap);\\n\\n    constructor(address _nativeWrap) {\\n        nativeWrap = _nativeWrap;\\n    }\\n\\n    function initNativeWrap(address _nativeWrap) internal onlyInitializing {\\n        _setNativeWrap(_nativeWrap);\\n    }\\n\\n    function setNativeWrap(address _nativeWrap) external onlyOwner {\\n        _setNativeWrap(_nativeWrap);\\n    }\\n\\n    function _setNativeWrap(address _nativeWrap) private {\\n        nativeWrap = _nativeWrap;\\n        emit NativeWrapUpdated(_nativeWrap);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x3521178be1f33375ae86c09d9c2647136900ca188a2a17e12737f81d7dd426f3\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Pauser is Ownable, Pausable {\\n    mapping(address => bool) public pausers;\\n\\n    event PauserAdded(address account);\\n    event PauserRemoved(address account);\\n\\n    constructor() {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"Caller is not pauser\\\");\\n        _;\\n    }\\n\\n    function pause() public onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyPauser {\\n        _unpause();\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return pausers[account];\\n    }\\n\\n    function addPauser(address account) public onlyOwner {\\n        _addPauser(account);\\n    }\\n\\n    function removePauser(address account) public onlyOwner {\\n        _removePauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function _addPauser(address account) private {\\n        require(!isPauser(account), \\\"Account is already pauser\\\");\\n        pausers[account] = true;\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) private {\\n        require(isPauser(account), \\\"Account is not pauser\\\");\\n        pausers[account] = false;\\n        emit PauserRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0xa279c397841eb6ceb047c76d626a74f4c5d2ddb2209a7e37b232038680a8da2e\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/Types.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./MsgDataTypes.sol\\\";\\nimport \\\"../interfaces/ICodec.sol\\\";\\n\\nlibrary Types {\\n    struct SourceInfo {\\n        uint64 chainId;\\n        // A number unique enough to be used in request ID generation.\\n        uint64 nonce;\\n        // the unix timestamp before which the fee is valid\\n        uint64 deadline;\\n        // sig of sha3(\\\"executor fee\\\", srcChainId, amountIn, tokenIn, deadline, toChainId, feeInBridgeOutToken, bridgeOutToken, feeInBridgeOutFallbackToken, bridgeOutFallbackToken[, toChainId, feeInBridgeOutToken, bridgeOutToken, feeInBridgeOutFallbackToken, bridgeOutFallbackToken]...)\\n        // see _verifyQuote()\\n        bytes quoteSig;\\n        uint256 amountIn;\\n        address tokenIn;\\n        bool nativeIn;\\n    }\\n\\n    function emptySourceInfo() internal pure returns (SourceInfo memory) {\\n        return SourceInfo(0, 0, 0, \\\"\\\", 0, address(0), false);\\n    }\\n\\n    struct DestinationInfo {\\n        uint64 chainId;\\n        // The receiving party (the user) of the final output token\\n        // note that if an organization user's private key is breached, and if their original receiver is a contract\\n        // address, the hacker could deploy a malicious contract with the same address on the different chain and hence\\n        // get access to the user's pocket funds on that chain.\\n        // WARNING users should make sure their own deployer key's safety or that the receiver is\\n        // 1. not a reproducable address on any of the chains that chainhop supports\\n        // 2. a contract that they already deployed on all the chains that chainhop supports\\n        // 3. an EOA\\n        address receiver;\\n        bool nativeOut;\\n    }\\n\\n    struct ExecutionInfo {\\n        uint64 chainId;\\n        ICodec.SwapDescription swap;\\n        BridgeInfo bridge;\\n        address remoteExecutionNode;\\n        address bridgeOutToken;\\n        // some bridges utilize a intermediary token (e.g. hToken for Hop and anyToken for Multichain)\\n        // in cases where there isn't enough underlying token liquidity on the dst chain, the user/pocket\\n        // could receive this token as a fallback. remote ExecutionNode needs to know what this token is\\n        // in order to check whether a fallback has happened and refund the user.\\n        address bridgeOutFallbackToken;\\n        // the minimum that remote ExecutionNode needs to receive in order to allow the swap message\\n        // to execute. note that this differs from a normal slippages controlling variable and is\\n        // purely used to deter DoS attacks (detailed in ExecutionNode).\\n        uint256 bridgeOutMin;\\n        uint256 bridgeOutFallbackMin;\\n        // executor fee\\n        uint256 feeInBridgeOutToken;\\n        // in case the bridging result in in fallback tokens, this is the amount of the fee that\\n        // chainhop charges\\n        uint256 feeInBridgeOutFallbackToken;\\n    }\\n\\n    struct BridgeInfo {\\n        uint64 toChainId;\\n        // bridge provider identifier\\n        string bridgeProvider;\\n        // Bridge transfers quoted and abi encoded by chainhop backend server.\\n        // Bridge adapter implementations need to decode this themselves.\\n        bytes bridgeParams;\\n    }\\n\\n    struct Message {\\n        bytes32 id;\\n        Types.ExecutionInfo[] execs;\\n        Types.DestinationInfo dst;\\n    }\\n}\\n\",\"keccak256\":\"0xbe675d66c7e1477d5bd3de23bdf4bd8e06de27d8af1ce953958a78e501966153\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101dc5760003560e01c806380f51c1211610102578063a42dce8011610095578063d3ac0fbc11610064578063d3ac0fbc146105b8578063eeaaa651146105d8578063efcfd8f51461060e578063f2fde38b1461062e57600080fd5b8063a42dce8014610504578063c040499814610524578063c415b95c14610577578063cd9ea3421461059757600080fd5b8063918ead76116100d1578063918ead76146104635780639c649fdf146104835780639e02c9f9146104a3578063a1a227fa146104e457600080fd5b806380f51c12146103e057806382dc1ec4146104105780638456cb59146104305780638da5cb5b1461044557600080fd5b80635b5a66a71161017a5780636ef8d66d116101495780636ef8d66d14610376578063715018a61461038b5780637228e5c4146103a05780637a0f9356146103c057600080fd5b80635b5a66a7146102fe5780635c975abb1461031e5780636b2c0f55146103365780636c19e7831461035657600080fd5b80633f4ba83a116101b65780633f4ba83a1461026e578063457bfa2f1461028557806346fbf68e146102a5578063547cad12146102de57600080fd5b806314346a12146101e857806320be95f21461020e578063238ac9331461023657600080fd5b366101e357005b600080fd5b6101fb6101f6366004613e29565b61064e565b6040519081526020015b60405180910390f35b61022661021c366004613fee565b6000949350505050565b6040519015158152602001610205565b34801561024257600080fd5b50600454610256906001600160a01b031681565b6040516001600160a01b039091168152602001610205565b34801561027a57600080fd5b50610283610bc5565b005b34801561029157600080fd5b50600654610256906001600160a01b031681565b3480156102b157600080fd5b506102266102c0366004614077565b6001600160a01b031660009081526009602052604090205460ff1690565b3480156102ea57600080fd5b506102836102f9366004614077565b610c2e565b34801561030a57600080fd5b50610283610319366004614077565b610c8b565b34801561032a57600080fd5b5060085460ff16610226565b34801561034257600080fd5b50610283610351366004614077565b610c9f565b34801561036257600080fd5b50610283610371366004614077565b610cb0565b34801561038257600080fd5b50610283610cc1565b34801561039757600080fd5b50610283610cca565b3480156103ac57600080fd5b506102836103bb366004614183565b610cdc565b3480156103cc57600080fd5b506102836103db36600461420b565b610cf4565b3480156103ec57600080fd5b506102266103fb366004614077565b60096020526000908152604090205460ff1681565b34801561041c57600080fd5b5061028361042b366004614077565b610f94565b34801561043c57600080fd5b50610283610fa5565b34801561045157600080fd5b506000546001600160a01b0316610256565b34801561046f57600080fd5b5061028361047e366004614267565b61100c565b6104966104913660046142cb565b611022565b604051610205919061434b565b3480156104af57600080fd5b506102566104be366004614373565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b3480156104f057600080fd5b50600154610256906001600160a01b031681565b34801561051057600080fd5b5061028361051f366004614077565b611219565b34801561053057600080fd5b506040805180820190915260078152666362726964676560c81b6020909101526101fb7f87d218bfcd262745694c36930f68b5dd697460f1af499de15378f8ddddb1d74f81565b34801561058357600080fd5b50600554610256906001600160a01b031681565b3480156105a357600080fd5b5060005461022690600160b01b900460ff1681565b3480156105c457600080fd5b506102836105d33660046143b9565b61122a565b3480156105e457600080fd5b506102566105f33660046144e0565b6003602052600090815260409020546001600160a01b031681565b34801561061a57600080fd5b506102836106293660046144f9565b6113bc565b34801561063a57600080fd5b50610283610649366004614077565b6115f2565b60006002600754036106a75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026007556106b461167f565b60008451116106eb5760405162461bcd60e51b815260206004820152600360248201526206e6f760ec1b604482015260640161069e565b6106f36139b3565b6106fc856116d2565b955034925090506000804667ffffffffffffffff16866000015167ffffffffffffffff16036107615786511561073757610737878787611814565b61074086611a42565b60c088015191935091501561075c576107598285614595565b93505b610845565b61076b8884611bb0565b909250905060008290036107ce5760408051898152600060208201526001600160a01b038316918101919091527f295612f9c20f128efb8df333990658b0f1b8083bc7b6dcf90750348cede4c299906060015b60405180910390a1505050610bb8565b8260a001516001600160a01b0316816001600160a01b031603610845576107fc818387602001516000611f55565b60408051898152602081018490526001600160a01b038316918101919091527f295612f9c20f128efb8df333990658b0f1b8083bc7b6dcf90750348cede4c299906060016107be565b602083015151829082906001600160a01b03161561094e5760208501516001906108709086866120d8565b909450925090504667ffffffffffffffff16896000015167ffffffffffffffff16036108e357806108e35760405162461bcd60e51b815260206004820152600960248201527f73776170206661696c0000000000000000000000000000000000000000000000604482015260640161069e565b8061094c576108f984868a602001516000611f55565b604080518c8152602081018790526001600160a01b0386168183015290517f295612f9c20f128efb8df333990658b0f1b8083bc7b6dcf90750348cede4c2999181900360600190a1505050505050610bb8565b505b865167ffffffffffffffff4681169116036109c957610977818389602001518a60400151611f55565b604080518b8152602081018490526001600160a01b0383168183015290517f295612f9c20f128efb8df333990658b0f1b8083bc7b6dcf90750348cede4c2999181900360600190a15050505050610bb8565b6000808a51116109dd5787602001516109eb565b6109eb8b87606001516123fa565b90506000610a1c876040015160000151886040015160200151805190602001208960400151604001518587896124b0565b9050610a288189614595565b8b5190985015610b6857600060405180606001604052808e81526020018d81526020018b815250604051602001610a5f9190614677565b60408051601f198184030181529082905260015463299aee5160e11b83529092506000916001600160a01b0390911690635335dca290610aa39085906004016147c2565b602060405180830381865afa158015610ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae491906147d5565b9050610af0818b614595565b60015460608b01516040808d0151519051634f9e72ad60e11b8152939d506001600160a01b0390921692639f3ce55a928592610b339290919088906004016147ee565b6000604051808303818588803b158015610b4c57600080fd5b505af1158015610b60573d6000803e3d6000fd5b505050505050505b604080518d8152602081018690526001600160a01b0385168183015290517f295612f9c20f128efb8df333990658b0f1b8083bc7b6dcf90750348cede4c2999181900360600190a1505050505050505b6001600755949350505050565b3360009081526009602052604090205460ff16610c245760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f7420706175736572000000000000000000000000604482015260640161069e565b610c2c61263c565b565b610c3661268e565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f3f8223bcd8b3b875473e9f9e14e1ad075451a2b5ffd31591655da9a01516bf5e906020015b60405180910390a150565b610c9361268e565b610c9c816126e8565b50565b610ca761268e565b610c9c81612736565b610cb861268e565b610c9c816127ef565b610c2c33612736565b610cd261268e565b610c2c6000612851565b610ce461268e565b610cef8383836128a1565b505050565b6000610d01858585612922565b9050600081604051610d1290613a68565b8190604051809103906000f5905080158015610d32573d6000803e3d6000fd5b506040516370a0823160e01b81526001600160a01b0380831660048301529192506000918516906370a0823190602401602060405180830381865afa158015610d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da391906147d5565b90506001600160a01b0382163181151580610dbe5750600081115b610e0a5760405162461bcd60e51b815260206004820152600f60248201527f706f636b657420697320656d7074790000000000000000000000000000000000604482015260640161069e565b604051635569f64b60e11b81526001600160a01b0386811660048301526024820184905284169063aad3ec9690604401600060405180830381600087803b158015610e5457600080fd5b505af1158015610e68573d6000803e3d6000fd5b505050506000821115610e8957610e896001600160a01b0386168884612982565b8015610f39576000876001600160a01b03168261c35090604051600060405180830381858888f193505050503d8060008114610ee1576040519150601f19603f3d011682016040523d82523d6000602084013e610ee6565b606091505b5050905080610f375760405162461bcd60e51b815260206004820152601560248201527f6661696c656420746f2073656e64206e61746976650000000000000000000000604482015260640161069e565b505b604080516001600160a01b038981168252602082018590528716818301526060810183905290517f93792cbd2b72fa0c2850634d3177263b6f8dbe5c2245b5ad2522ef65b5a9b8d59181900360800190a15050505050505050565b610f9c61268e565b610c9c816129fa565b3360009081526009602052604090205460ff166110045760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f7420706175736572000000000000000000000000604482015260640161069e565b610c2c612ab7565b61101461268e565b61101e8282612af4565b5050565b60008054600160b01b900460ff1661108e576001546001600160a01b0316331461108e5760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d6573736167652062757300000000000000604482015260640161069e565b6000838060200190518101906110a491906149ac565b905060006111448260000151836020015161113a6040805160e0810182526000808252602082018190529181018290526060808201526080810182905260a0810182905260c0810191909152506040805160e08101825260008082526020808301829052828401829052835190810190935280835260608201929092526080810182905260a0810182905260c081019190915290565b856040015161064e565b9050801561120c57604051600090329083908381818185875af1925050503d806000811461118e576040519150601f19603f3d011682016040523d82523d6000602084013e611193565b606091505b505090508061120a5760405162461bcd60e51b815260206004820152602760248201527f6661696c656420746f20726566756e642072656d61696e696e67206e6174697660448201527f6520746f6b656e00000000000000000000000000000000000000000000000000606482015260840161069e565b505b5060019695505050505050565b61122161268e565b610c9c81612c07565b600054600160a81b900460ff161580801561125257506000546001600160a01b90910460ff16105b806112735750303b1580156112735750600054600160a01b900460ff166001145b6112e55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161069e565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b179055801561132d576000805460ff60a81b1916600160a81b1790555b6113378b8b612c61565b611342868686612d65565b61134c8383612dd2565b61135588612e3f565b61135e87612eac565b61136789612f19565b80156113af576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b6005546001600160a01b031633146114165760405162461bcd60e51b815260206004820152601160248201527f6e6f742066656520636f6c6c6563746f72000000000000000000000000000000604482015260640161069e565b60005b828110156115ec57600084848381811061143557611435614b72565b905060200201602081019061144a9190614077565b6001600160a01b0316036115075760405147906000906001600160a01b0385169061c35090849084818181858888f193505050503d80600081146114aa576040519150601f19603f3d011682016040523d82523d6000602084013e6114af565b606091505b50509050806115005760405162461bcd60e51b815260206004820152601260248201527f73656e64206e6174697665206661696c65640000000000000000000000000000604482015260640161069e565b50506115da565b600084848381811061151b5761151b614b72565b90506020020160208101906115309190614077565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015611576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159a91906147d5565b90506115d883828787868181106115b3576115b3614b72565b90506020020160208101906115c89190614077565b6001600160a01b03169190612982565b505b806115e481614b88565b915050611419565b50505050565b6115fa61268e565b6001600160a01b0381166116765760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161069e565b610c9c81612851565b60085460ff1615610c2c5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161069e565b6116da6139b3565b6060600083511161172d5760405162461bcd60e51b815260206004820152600b60248201527f656d707479206578656373000000000000000000000000000000000000000000604482015260640161069e565b8260008151811061174057611740614b72565b60200260200101519150600183516117589190614595565b67ffffffffffffffff81111561177057611770613a75565b6040519080825280602002602001820160405280156117a957816020015b6117966139b3565b81526020019060019003908161178e5790505b50905060015b835181101561180e578381815181106117ca576117ca614b72565b6020026020010151826001836117e09190614595565b815181106117f0576117f0614b72565b6020026020010181905250808061180690614b88565b9150506117af565b50915091565b42826040015167ffffffffffffffff16116118715760405162461bcd60e51b815260206004820152601160248201527f646561646c696e65206578636565646564000000000000000000000000000000604482015260640161069e565b8051608083015160a084015160408086015181517f636861696e686f702071756f746500000000000000000000000000000000000060208201524660c090811b6001600160c01b0319908116602e84015296811b87166036830152603e82019590955260609390931b6bffffffffffffffffffffffff1916605e84015290921b90921660728301528051605a818403018152607a909201905260005b84518110156119db57600085828151811061192a5761192a614b72565b6020908102919091018101518051610100820151608083015161012084015160a08501516040519597506000966119a8960160c09590951b6001600160c01b03191685526008850193909352606091821b6bffffffffffffffffffffffff199081166028860152603c85019190915291901b16605c82015260700190565b60408051601f1981840301815291905290506119c48482612f86565b9350505080806119d390614b88565b91505061190d565b508051602080830191909120604080517f19457468657265756d205369676e6564204d6573736167653a0a33320000000081850152603c8082019390935281518082039093018352605c0190528051910120611a3b81856060015161304c565b5050505050565b6000808260c0015115611b775760065460a08401516001600160a01b03908116911614611ab15760405162461bcd60e51b815260206004820152601660248201527f746f6b656e496e206e6f74206e61746976655772617000000000000000000000604482015260640161069e565b8260800151341015611b055760405162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e74206e617469766520616d6f756e74000000000000604482015260640161069e565b600660009054906101000a90046001600160a01b03166001600160a01b031663d0e30db084608001516040518263ffffffff1660e01b81526004016000604051808303818588803b158015611b5957600080fd5b505af1158015611b6d573d6000803e3d6000fd5b5050505050611b9f565b611b9f333085608001518660a001516001600160a01b03166130b8909392919063ffffffff16565b5050608081015160a0909101519091565b600080600084604051611bc290613a68565b8190604051809103906000f5905080158015611be2573d6000803e3d6000fd5b5060a08501519091506000906001600160a01b031615611c6f5760a08501516040516370a0823160e01b81526001600160a01b038481166004830152909116906370a0823190602401602060405180830381865afa158015611c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6c91906147d5565b90505b60808501516040516370a0823160e01b81526001600160a01b03848116600483015260009216906370a0823190602401602060405180830381865afa158015611cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce091906147d5565b60c08701519091506001600160a01b0384163190821180611d0457508660c0015181115b80611d1257508660e0015183115b611d5e5760405162461bcd60e51b815260206004820152601a60248201527f4d53473a3a41424f52543a706f636b657420697320656d707479000000000000604482015260640161069e565b8215611de95760a0870151604051635569f64b60e11b81526001600160a01b039182166004820152602481018590529085169063aad3ec9690604401600060405180830381600087803b158015611db457600080fd5b505af1158015611dc8573d6000803e3d6000fd5b50505050611ddb876101200151846130f0565b95508660a001519450611f4a565b6080870151604051635569f64b60e11b81526001600160a01b039182166004820152602481018490529085169063aad3ec9690604401600060405180830381600087803b158015611e3957600080fd5b505af1158015611e4d573d6000803e3d6000fd5b505050506000821115611e7057611e69876101000151836130f0565b9550611f42565b8015611f425760065460808801516001600160a01b03908116911614611ed85760405162461bcd60e51b815260206004820152601d60248201527f6272696467654f7574546f6b656e206e6f74206e617469766557726170000000604482015260640161069e565b611ee7876101000151826130f0565b955086608001516001600160a01b031663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b158015611f2857600080fd5b505af1158015611f3c573d6000803e3d6000fd5b50505050505b866080015194505b505050509250929050565b80156120c4576006546001600160a01b03858116911614611fb85760405162461bcd60e51b815260206004820152601760248201527f746f6b656e206973206e6f74206e617469766557726170000000000000000000604482015260640161069e565b600654604051632e1a7d4d60e01b8152600481018590526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b158015611ffe57600080fd5b505af1158015612012573d6000803e3d6000fd5b505050506000826001600160a01b03168461c35090604051600060405180830381858888f193505050503d8060008114612068576040519150601f19603f3d011682016040523d82523d6000602084013e61206d565b606091505b50509050806120be5760405162461bcd60e51b815260206004820152600960248201527f73656e64206661696c0000000000000000000000000000000000000000000000604482015260640161069e565b506115ec565b6115ec6001600160a01b0385168385612982565b8251600090819081906001600160a01b03166120fc575060019150839050826123f1565b6000866020015161210c90614ba1565b9050600061211e886000015183613103565b90506000816001600160a01b031663358f0e1c8a6040518263ffffffff1660e01b815260040161214e9190614bd8565b606060405180830381865afa15801561216b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218f9190614beb565b95509150506001600160a01b03808216908816146121ef5760405162461bcd60e51b815260206004820152601260248201527f7377617020696e666f206d69736d617463680000000000000000000000000000604482015260640161069e565b6020890151604051634c6da26960e01b81526000916001600160a01b03851691634c6da26991612225918d903090600401614c23565b600060405180830381865afa158015612242573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261226a9190810190614c55565b8a51909150612284906001600160a01b038416908b6131b6565b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a0823190602401602060405180830381865afa1580156122cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ef91906147d5565b905060008b600001516001600160a01b03168360405161230f9190614c8a565b6000604051808303816000865af19150503d806000811461234c576040519150601f19603f3d011682016040523d82523d6000602084013e612351565b606091505b505090508061236c57600080985098505050505050506123f1565b6040516370a0823160e01b81523060048201526000906001600160a01b038916906370a0823190602401602060405180830381865afa1580156123b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d791906147d5565b905060016123e58483614595565b99509950505050505050505b93509350939050565b60008060ff60f81b83856040518060200161241490613a68565b6020820181038252601f19601f820116604052508051906020012060405160200161248e94939291907fff0000000000000000000000000000000000000000000000000000000000000094909416845260609290921b6bffffffffffffffffffffffff191660018401526015830152603582015260550190565b60408051601f1981840301815291905280516020909101209150505b92915050565b600085815260036020908152604080832054815180830190925260078252666362726964676560c81b91909201526001600160a01b03167f782de74032d9d8ba96b3c96cf0974a22968b9f0e50b6621eac870722224e28b1870161259f57600154604080516001600160a01b03888116602083015290921691635335dca291016040516020818303038152906040526040518263ffffffff1660e01b815260040161255b91906147c2565b602060405180830381865afa158015612578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259c91906147d5565b91505b6125b36001600160a01b03851682856131b6565b6040516324c9401b60e01b81526001600160a01b038216906324c9401b9084906125e9908c908a9089908b908e90600401614ca6565b60006040518083038185885af1158015612607573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526126309190810190614c55565b50509695505050505050565b612644613268565b6008805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000546001600160a01b03163314610c2c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161069e565b600680546001600160a01b0319166001600160a01b0383169081179091556040519081527fb878cd71628ac64b2df1872301925e01164824535b02e8601077749eeeb88c3d90602001610c80565b6001600160a01b03811660009081526009602052604090205460ff1661279e5760405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f74207061757365720000000000000000000000604482015260640161069e565b6001600160a01b038116600081815260096020908152604091829020805460ff1916905590519182527fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9101610c80565b600480546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f2d025324f0a785e8c12d0a0d91a9caa49df4ef20ff87e0df7213a1d4f3157beb91015b60405180910390a15050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005b83518110156115ec5760008382815181106128c1576128c1614b72565b602002602001015180519060200120905061290f8583815181106128e7576128e7614b72565b60200260200101518285858151811061290257612902614b72565b60200260200101516132ba565b508061291a81614b88565b9150506128a4565b6040516bffffffffffffffffffffffff19606085811b8216602084015284901b1660348201526001600160c01b031960c083901b1660488201526000906050016040516020818303038152906040528051906020012090505b9392505050565b6040516001600160a01b038316602482015260448101829052610cef90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909316929092179091526133ac565b6001600160a01b03811660009081526009602052604090205460ff1615612a635760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c72656164792070617573657200000000000000604482015260640161069e565b6001600160a01b038116600081815260096020908152604091829020805460ff1916600117905590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89101610c80565b612abf61167f565b6008805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586126713390565b8051825114612b455760405162461bcd60e51b815260206004820152601460248201527f706172616d732073697a65206d69736d61746368000000000000000000000000604482015260640161069e565b60005b8251811015612bd557818181518110612b6357612b63614b72565b602002602001015160036000858481518110612b8157612b81614b72565b602002602001015180519060200120815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508080612bcd90614b88565b915050612b48565b507f68d2b5e14eb61b73f2dfa46a255dcba81a3b53259093a83c90da69c3ade70b968282604051612845929190614ce8565b600580546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f389101612845565b600054600160a81b900460ff16612cce5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161069e565b811580612cdc575046617a69145b612ce557600080fd5b600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16600160b01b84151502179055600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f3f8223bcd8b3b875473e9f9e14e1ad075451a2b5ffd31591655da9a01516bf5e90602001612845565b600054600160a81b900460ff16610ce45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161069e565b600054600160a81b900460ff166110145760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161069e565b600054600160a81b900460ff16610cb85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161069e565b600054600160a81b900460ff166112215760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161069e565b600054600160a81b900460ff16610c935760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161069e565b6060600082518451612f989190614d8c565b67ffffffffffffffff811115612fb057612fb0613a75565b6040519080825280601f01601f191660200182016040528015612fda576020820181803683370190505b509050600080612fee868051602090910191565b91509150600080613003878051602090910191565b915091506000613017868051602090910191565b50905060006130268583614d8c565b9050613033868387613491565b61303e848285613491565b509498975050505050505050565b6000613058838361350f565b6004549091506001600160a01b03808316911614610cef5760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964207369676e6572000000000000000000000000000000000000604482015260640161069e565b6040516001600160a01b03808516602483015283166044820152606481018290526115ec9085906323b872dd60e01b906084016129ae565b60008282106124aa5761297b8383614595565b6001600160a01b0382811660009081526002602090815260408083206001600160e01b0319861684529091528120549091166131815760405162461bcd60e51b815260206004820152600f60248201527f756e737570706f72746564206465780000000000000000000000000000000000604482015260640161069e565b506001600160a01b0391821660009081526002602090815260408083206001600160e01b031994909416835292905220541690565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015613207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061322b91906147d5565b6132359190614d8c565b6040516001600160a01b0385166024820152604481018290529091506115ec90859063095ea7b360e01b906064016129ae565b60085460ff16610c2c5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161069e565b6001600160a01b0380841660009081526002602090815260408083206001600160e01b031987168452909152902054811690821681036133225760405162461bcd60e51b815260206004820152600360248201526206e6f760ec1b604482015260640161069e565b6001600160a01b0384811660008181526002602090815260408083206001600160e01b031989168085529083529281902080546001600160a01b03191695881695861790558051938452908301919091528101919091527f454003ca28aca3b395ad1720eedfe6ee23b22ae10af0a8bb39c206ca1ca5679b9060600160405180910390a150505050565b6000613401826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166135339092919063ffffffff16565b805190915015610cef578080602001905181019061341f9190614da4565b610cef5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161069e565b602081106134c957825182526134a8602083614d8c565b91506134b5602084614d8c565b92506134c2602082614595565b9050613491565b806000036134d657505050565b600060016134e5836020614595565b6134f190610100614ea5565b6134fb9190614595565b935183518516941916939093179091525050565b600080600061351e858561354a565b9150915061352b8161358f565b509392505050565b60606135428484600085613745565b949350505050565b60008082516041036135805760208301516040840151606085015160001a6135748782858561388d565b94509450505050613588565b506000905060025b9250929050565b60008160048111156135a3576135a3614335565b036135ab5750565b60018160048111156135bf576135bf614335565b0361360c5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161069e565b600281600481111561362057613620614335565b0361366d5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161069e565b600381600481111561368157613681614335565b036136d95760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161069e565b60048160048111156136ed576136ed614335565b03610c9c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161069e565b6060824710156137bd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161069e565b6001600160a01b0385163b6138145760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161069e565b600080866001600160a01b031685876040516138309190614c8a565b60006040518083038185875af1925050503d806000811461386d576040519150601f19603f3d011682016040523d82523d6000602084013e613872565b606091505b509150915061388282828661397a565b979650505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156138c45750600090506003613971565b8460ff16601b141580156138dc57508460ff16601c14155b156138ed5750600090506004613971565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613941573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661396a57600060019250925050613971565b9150600090505b94509492505050565b6060831561398957508161297b565b8251156139995782518084602001fd5b8160405162461bcd60e51b815260040161069e91906147c2565b604051806101400160405280600067ffffffffffffffff1681526020016139f6604051806040016040528060006001600160a01b03168152602001606081525090565b8152604080516060808201835260008252602082810182905292820152910190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b6101da80614eb283390190565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715613aae57613aae613a75565b60405290565b6040516060810167ffffffffffffffff81118282101715613aae57613aae613a75565b60405160e0810167ffffffffffffffff81118282101715613aae57613aae613a75565b604051610140810167ffffffffffffffff81118282101715613aae57613aae613a75565b604051601f8201601f1916810167ffffffffffffffff81118282101715613b4757613b47613a75565b604052919050565b600067ffffffffffffffff821115613b6957613b69613a75565b5060051b60200190565b67ffffffffffffffff81168114610c9c57600080fd5b8035613b9481613b73565b919050565b6001600160a01b0381168114610c9c57600080fd5b8035613b9481613b99565b600067ffffffffffffffff821115613bd357613bd3613a75565b50601f01601f191660200190565b600082601f830112613bf257600080fd5b8135613c05613c0082613bb9565b613b1e565b818152846020838601011115613c1a57600080fd5b816020850160208301376000918101602001919091529392505050565b600060408284031215613c4957600080fd5b613c51613a8b565b90508135613c5e81613b99565b8152602082013567ffffffffffffffff811115613c7a57600080fd5b613c8684828501613be1565b60208301525092915050565b600060608284031215613ca457600080fd5b613cac613ab4565b90508135613cb981613b73565b8152602082013567ffffffffffffffff80821115613cd657600080fd5b613ce285838601613be1565b60208401526040840135915080821115613cfb57600080fd5b50613d0884828501613be1565b60408301525092915050565b8015158114610c9c57600080fd5b8035613b9481613d14565b600060e08284031215613d3f57600080fd5b613d47613ad7565b9050613d5282613b89565b8152613d6060208301613b89565b6020820152613d7160408301613b89565b6040820152606082013567ffffffffffffffff811115613d9057600080fd5b613d9c84828501613be1565b60608301525060808201356080820152613db860a08301613bae565b60a0820152613dc960c08301613d22565b60c082015292915050565b600060608284031215613de657600080fd5b613dee613ab4565b90508135613dfb81613b73565b81526020820135613e0b81613b99565b60208201526040820135613e1e81613d14565b604082015292915050565b60008060008060c08587031215613e3f57600080fd5b84359350602085013567ffffffffffffffff80821115613e5e57600080fd5b818701915087601f830112613e7257600080fd5b613e7f613c008335613b4f565b82358082526020808301929160051b8501018a811115613e9e57600080fd5b602085015b81811015613fac578481351115613eb957600080fd5b80358601610140818e03601f19011215613ed257600080fd5b613eda613afa565b613ee660208301613b89565b8152604082013587811115613efa57600080fd5b613f098f602083860101613c37565b602083015250606082013587811115613f2157600080fd5b613f308f602083860101613c92565b604083015250613f4260808301613bae565b6060820152613f5360a08301613bae565b6080820152613f6460c08301613bae565b60a082015260e082013560c082015261010082013560e08201526101208201356101008201526101408201356101208201528086525050602084019350602081019050613ea3565b5090965050506040870135915080821115613fc657600080fd5b50613fd387828801613d2d565b925050613fe38660608701613dd4565b905092959194509250565b6000806000806060858703121561400457600080fd5b843561400f81613b99565b935060208501359250604085013567ffffffffffffffff8082111561403357600080fd5b818701915087601f83011261404757600080fd5b81358181111561405657600080fd5b88602082850101111561406857600080fd5b95989497505060200194505050565b60006020828403121561408957600080fd5b813561297b81613b99565b600082601f8301126140a557600080fd5b813560206140b5613c0083613b4f565b82815260059290921b840181019181810190868411156140d457600080fd5b8286015b848110156140f85780356140eb81613b99565b83529183019183016140d8565b509695505050505050565b600082601f83011261411457600080fd5b81356020614124613c0083613b4f565b82815260059290921b8401810191818101908684111561414357600080fd5b8286015b848110156140f857803567ffffffffffffffff8111156141675760008081fd5b6141758986838b0101613be1565b845250918301918301614147565b60008060006060848603121561419857600080fd5b833567ffffffffffffffff808211156141b057600080fd5b6141bc87838801614094565b945060208601359150808211156141d257600080fd5b6141de87838801614103565b935060408601359150808211156141f457600080fd5b5061420186828701614094565b9150509250925092565b6000806000806080858703121561422157600080fd5b843561422c81613b99565b9350602085013561423c81613b99565b9250604085013561424c81613b73565b9150606085013561425c81613b99565b939692955090935050565b6000806040838503121561427a57600080fd5b823567ffffffffffffffff8082111561429257600080fd5b61429e86838701614103565b935060208501359150808211156142b457600080fd5b506142c185828601614094565b9150509250929050565b600080600080608085870312156142e157600080fd5b84356142ec81613b99565b935060208501356142fc81613b73565b9250604085013567ffffffffffffffff81111561431857600080fd5b61432487828801613be1565b925050606085013561425c81613b99565b634e487b7160e01b600052602160045260246000fd5b602081016003831061436d57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561438657600080fd5b823561439181613b99565b915060208301356001600160e01b0319811681146143ae57600080fd5b809150509250929050565b6000806000806000806000806000806101408b8d0312156143d957600080fd5b6143e28b613d22565b99506143f060208c01613bae565b98506143fe60408c01613bae565b975061440c60608c01613bae565b965061441a60808c01613bae565b955060a08b013567ffffffffffffffff8082111561443757600080fd5b6144438e838f01614094565b965060c08d013591508082111561445957600080fd5b6144658e838f01614103565b955060e08d013591508082111561447b57600080fd5b6144878e838f01614094565b94506101008d013591508082111561449e57600080fd5b6144aa8e838f01614103565b93506101208d01359150808211156144c157600080fd5b506144ce8d828e01614094565b9150509295989b9194979a5092959850565b6000602082840312156144f257600080fd5b5035919050565b60008060006040848603121561450e57600080fd5b833567ffffffffffffffff8082111561452657600080fd5b818601915086601f83011261453a57600080fd5b81358181111561454957600080fd5b8760208260051b850101111561455e57600080fd5b6020928301955093505084013561457481613b99565b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b6000828210156145a7576145a761457f565b500390565b60005b838110156145c75781810151838201526020016145af565b838111156115ec5750506000910152565b600081518084526145f08160208601602086016145ac565b601f01601f19169290920160200192915050565b6001600160a01b038151168252600060208201516040602085015261354260408501826145d8565b67ffffffffffffffff8151168252600060208201516060602085015261465560608501826145d8565b90506040830151848203604086015261466e82826145d8565b95945050505050565b6000602080835260c08084018551838601528286015160a06040818189015283835180865260e09550858a019150858160051b8b0101888601955060005b8281101561477d578b820360df190184528651805167ffffffffffffffff1683526101408b820151818d8601526146ee82860182614604565b9150508682015184820388860152614706828261462c565b915050606080830151614723828701826001600160a01b03169052565b50506080828101516001600160a01b03908116918601919091528883015116888501528a8201518b850152898201518a850152610100808301519085015261012091820151919093015295890195928901926001016146b5565b5092909a0151805167ffffffffffffffff1660608b015260208101516001600160a01b031660808b015260400151151560a09099019890985298975050505050505050565b60208152600061297b60208301846145d8565b6000602082840312156147e757600080fd5b5051919050565b6001600160a01b038416815267ffffffffffffffff8316602082015260606040820152600061466e60608301846145d8565b8051613b9481613b73565b8051613b9481613b99565b6000614844613c0084613bb9565b905082815283838301111561485857600080fd5b61297b8360208301846145ac565b600082601f83011261487757600080fd5b61297b83835160208501614836565b60006040828403121561489857600080fd5b6148a0613a8b565b905081516148ad81613b99565b8152602082015167ffffffffffffffff8111156148c957600080fd5b613c8684828501614866565b6000606082840312156148e757600080fd5b6148ef613ab4565b905081516148fc81613b73565b8152602082015167ffffffffffffffff8082111561491957600080fd5b818401915084601f83011261492d57600080fd5b61493c85835160208501614836565b6020840152604084015191508082111561495557600080fd5b50613d0884828501614866565b60006060828403121561497457600080fd5b61497c613ab4565b9050815161498981613b73565b8152602082015161499981613b99565b60208201526040820151613e1e81613d14565b600060208083850312156149bf57600080fd5b825167ffffffffffffffff808211156149d757600080fd5b9084019060a082870312156149eb57600080fd5b6149f3613ab4565b825181528383015182811115614a0857600080fd5b8301601f81018813614a1957600080fd5b8051614a27613c0082613b4f565b81815260059190911b8201860190868101908a831115614a4657600080fd5b8784015b83811015614b4c57805187811115614a6157600080fd5b8501610140818e03601f19011215614a7857600080fd5b614a80613afa565b614a8b8b8301614820565b8152604082015189811115614a9f57600080fd5b614aad8f8d83860101614886565b8c83015250606082015189811115614ac457600080fd5b614ad28f8d838601016148d5565b604083015250614ae46080830161482b565b6060820152614af560a0830161482b565b6080820152614b0660c0830161482b565b60a082015260e082015160c08201526101008083015160e08301526101208084015182840152610140840151818401525050808552505088830192508881019050614a4a565b50808886015250505050614b638760408501614962565b60408201529695505050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201614b9a57614b9a61457f565b5060010190565b805160208201516001600160e01b03198082169291906004831015614bd05780818460040360031b1b83161693505b505050919050565b60208152600061297b6020830184614604565b600080600060608486031215614c0057600080fd5b835192506020840151614c1281613b99565b604085015190925061457481613b99565b606081526000614c3660608301866145d8565b90508360208301526001600160a01b0383166040830152949350505050565b600060208284031215614c6757600080fd5b815167ffffffffffffffff811115614c7e57600080fd5b61354284828501614866565b60008251614c9c8184602087016145ac565b9190910192915050565b67ffffffffffffffff8616815260006001600160a01b03808716602084015285604084015280851660608401525060a0608083015261388260a08301846145d8565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b83811015614d3f57605f19888703018552614d2d8683516145d8565b95509382019390820190600101614d11565b50508584038187015286518085528782019482019350915060005b82811015614d7f5784516001600160a01b031684529381019392810192600101614d5a565b5091979650505050505050565b60008219821115614d9f57614d9f61457f565b500190565b600060208284031215614db657600080fd5b815161297b81613d14565b600181815b80851115614dfc578160001904821115614de257614de261457f565b80851615614def57918102915b93841c9390800290614dc6565b509250929050565b600082614e13575060016124aa565b81614e20575060006124aa565b8160018114614e365760028114614e4057614e5c565b60019150506124aa565b60ff841115614e5157614e5161457f565b50506001821b6124aa565b5060208310610133831016604e8410600b8410161715614e7f575081810a6124aa565b614e898383614dc1565b8060001904821115614e9d57614e9d61457f565b029392505050565b600061297b8383614e0456fe608060405234801561001057600080fd5b506101ba806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063aad3ec9614610030575b600080fd5b61004361003e366004610104565b610045565b005b604080513360248201819052604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052915173ffffffffffffffffffffffffffffffffffffffff8516916100bc91610149565b6000604051808303816000865af19150503d80600081146100f9576040519150601f19603f3d011682016040523d82523d6000602084013e6100fe565b606091505b50505080ff5b6000806040838503121561011757600080fd5b823573ffffffffffffffffffffffffffffffffffffffff8116811461013b57600080fd5b946020939093013593505050565b6000825160005b8181101561016a5760208186018101518583015201610150565b81811115610179576000828501525b50919091019291505056fea2646970667358221220596a029e19ba353d69291cd33136a82a60ef181cd9690abbbe3fe4a98c3c68c064736f6c634300080f0033a2646970667358221220b88fdd83210941db639ee525721a66a7037a6715484cca49e893e60579a1f1f764736f6c634300080f0033",
  "devdoc": {
    "author": "Chainhop Dex TeamPadoriku",
    "kind": "dev",
    "methods": {
      "execute(bytes32,(uint64,(address,bytes),(uint64,string,bytes),address,address,address,uint256,uint256,uint256,uint256)[],(uint64,uint64,uint64,bytes,uint256,address,bool),(uint64,address,bool))": {
        "params": {
          "_dst": "the receiving info of the entire operation",
          "_execs": "contains info that tells this contract how to collect a part of the bridge token received as fee and how to swap can be omitted on the source chain if there is no swaps to execute",
          "_id": "an id that is unique per user-swap. persistent for the entire operation. also used as salt for the pocket contract id = keccak256(abi.encodePacked(sender, receiver, nonce))",
          "_src": "info that is processed on the source chain. only required on the source chain and should not be populated on subsequent hops"
        }
      },
      "executeMessage(address,uint64,bytes,address)": {
        "params": {
          "_message": "the message that contains the remaining swap-bridge combos to be executed"
        },
        "returns": {
          "_0": "executionStatus always success if no reverts to let the MessageBus know that the message is processed"
        }
      },
      "executeMessageWithTransferRefund(address,uint256,bytes)": {
        "params": {
          "_amount": "The amount of the original transfer",
          "_message": "The same message associated with the original transfer",
          "_token": "The token address of the original transfer"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "a route execution contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "StepExecuted(bytes32,uint256,address)": {
        "notice": "Emitted when operations on dst chain is done."
      }
    },
    "kind": "user",
    "methods": {
      "execute(bytes32,(uint64,(address,bytes),(uint64,string,bytes),address,address,address,uint256,uint256,uint256,uint256)[],(uint64,uint64,uint64,bytes,uint256,address,bool),(uint64,address,bool))": {
        "notice": "executes a swap-bridge combo and relays the next swap-bridge combo to the next chain (if any)"
      },
      "executeMessage(address,uint64,bytes,address)": {
        "notice": "called by cBridge MessageBus and then simply calls execute() to carry on the executions"
      },
      "executeMessageWithTransferRefund(address,uint256,bytes)": {
        "notice": "Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract"
      }
    },
    "notice": "a few key concepts about how the chain of execution works: - a \"swap-bridge execution combo\" (Types.ExecutionInfo) is a node in the execution chain - a node be swap-only, bridge-only, or swap-bridge - a message is an edge in the execution chain, it carries the remaining swap-bridge combos to the next node - execute() executes a swap-bridge combo and determines if the current node is the final one by looking at Types.DestinationInfo - executeMessage() is called on the intermediate nodes by chainhop's executor. it simply calls execute() to advance the execution chain - a \"pocket\" is a counterfactual contract of which the address is determined at quote-time by chainhop's pathfinder server with using the id as salt. the actual pocket contract deployment is done at execution time by the the ExecutionNode on that chain",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 119,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 122,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8941,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "testMode",
        "offset": 22,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8943,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "messageBus",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2492,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "dexFunc2Codec",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_bytes4,t_address))"
      },
      {
        "astId": 2379,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "bridges",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_contract(IBridgeAdapter)7470)"
      },
      {
        "astId": 4234,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "signer",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4047,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "feeCollector",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 9626,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "nativeWrap",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 382,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "_status",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 281,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "_paused",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 9695,
        "contract": "contracts/ExecutionNode.sol:ExecutionNode",
        "label": "pausers",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IBridgeAdapter)7470": {
        "encoding": "inplace",
        "label": "contract IBridgeAdapter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_address)"
      },
      "t_mapping(t_bytes32,t_contract(IBridgeAdapter)7470)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => contract IBridgeAdapter)",
        "numberOfBytes": "32",
        "value": "t_contract(IBridgeAdapter)7470"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}